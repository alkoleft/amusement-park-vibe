
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает сведения о внешней обработке.
//
// Возвращаемое значение:
//   Структура - Подробнее см. ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке().
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.2.1");
	ПараметрыРегистрации.Информация = НСтр("ru = 'Модифицированная обработка для выгрузки списка аттракционов на сайт.'");
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = "2025.04";
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Выгрузить на сайт Аттракционы'");
	Команда.Идентификатор = "ОткрытиеФормы";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	Команда.ПоказыватьОповещение = Истина;
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Выгрузка архива Аттракционов по расписанию'");
	Команда.Идентификатор = ИдентификаторКомандыВыгрузкаАрхиваПоРасписанию();
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	Команда.ПоказыватьОповещение = Ложь;
		
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Обработчик серверных команд.
//
// Параметры:
//   ИдентификаторКоманды - Строка    - имя команды, определенное в функции СведенияОВнешнейОбработке().
//   ПараметрыВыполнения  - Структура - контекст выполнения команды:
//       * ДополнительнаяОбработкаСсылка - СправочникСсылка.ДополнительныеОтчетыИОбработки - ссылка обработки.
//           Может использоваться для чтения параметров обработки.
//           Пример см. в комментарии к функции ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы().
//
Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполнения) Экспорт

	Если ИдентификаторКоманды = ИдентификаторКомандыВыгрузкаАрхиваПоРасписанию() Тогда
		ДанныеАрхива = ПодготовитьАрхив();
		ДанныеАрхива.Записать("C:\Users\matvey-acer\Desktop\Парк аттракционов\export.zip");
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестная команда'");
	КонецЕсли;

КонецПроцедуры


// Готовит архив, содержащий список аттракционов и файлы фотографий
// 
// Возвращаемое значение:
//  Строка -  Адрес временного хранилища с архивом
Функция ПодготовитьАрхив() Экспорт
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ВыгрузкаНаСайт");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Аттракционы.Ссылка)) КАК Идентификатор,
		|	ПРЕДСТАВЛЕНИЕ(Аттракционы.Ссылка) КАК Аттракцион,
		|	ПРЕДСТАВЛЕНИЕ(Аттракционы.ВидАттракциона) КАК ВидАттракциона,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
		|	Аттракционы.Фото КАК Фото
		|ИЗ
		|	Справочник.Аттракционы КАК Аттракционы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
		|		ПО Аттракционы.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(Замер, Выборка.Количество(), "ВыполнениеЗапроса");
	
	ИмяКаталога = ПолучитьИмяВременногоФайла("");
	СоздатьКаталог(ИмяКаталога);
	
	ОписаниеАттракционов = Новый Массив;
	
	ШаблонИмениКартинки = "%1%2%3";
	
	ДлительныеОперации.СообщитьПрогресс(33, НСтр("ru = 'Запущена выгрузка аттракционов...'"));
	
	Пока Выборка.Следующий() Цикл
		
		ОписаниеАттракциона = Новый Структура;
		ОписаниеАттракциона.Вставить("Идентификатор", Выборка.Идентификатор);
		ОписаниеАттракциона.Вставить("Аттракцион", Выборка.Аттракцион);
		ОписаниеАттракциона.Вставить("ВидАттракциона", Выборка.ВидАттракциона);
		ОписаниеАттракциона.Вставить("Цена", Выборка.Цена);
		ОписаниеАттракциона.Вставить("Фото", Неопределено);
		
		Если ЗначениеЗаполнено(Выборка.Фото) Тогда
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(Выборка.Фото);
			ИмяФайла = Строка(Выборка.Фото.УникальныйИдентификатор()) + ДанныеФайла.ИмяФайла;
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ПолноеИмяФайла = СтрШаблон(ШаблонИмениКартинки, ИмяКаталога, ПолучитьРазделительПути(), ИмяФайла);
			ДвоичныеДанные.Записать(ПолноеИмяФайла);			
			ОписаниеАттракциона.Фото = ПолучитьРазделительПути() + ИмяФайла;
		КонецЕсли;
		
		ОписаниеАттракционов.Добавить(ОписаниеАттракциона);
		
	КонецЦикла;
	
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(Замер, Выборка.Количество(), "СформированКаталог");
	
	ШаблонИмениФайлаВыгрузки = "%1%2export.json";
	ИмяФайлаВыгрузки = СтрШаблон(ШаблонИмениФайлаВыгрузки, ИмяКаталога, ПолучитьРазделительПути());
	
	Запись = Новый ЗаписьJSON;
	Запись.ОткрытьФайл(ИмяФайлаВыгрузки);
	ЗаписатьJSON(Запись, ОписаниеАттракционов);
	Запись.Закрыть();
	
	ДлительныеОперации.СообщитьПрогресс(66, НСтр("ru = 'Формируем архив...'"));
	
	Архиватор = Новый ЗаписьZipФайла;
	Архиватор.Добавить(ИмяКаталога + ПолучитьРазделительПути() + "*.*",, 
		РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	ДанныеАрхива = Архиватор.ПолучитьДвоичныеДанные();
		
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(Замер, Выборка.Количество(), "СформированАрхив");
	
	УдалитьФайлы(ИмяКаталога);
		
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(Замер, Выборка.Количество(), "УдаленыВременныеФайлы");
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, Выборка.Количество());
	
	Возврат ДанныеАрхива;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИдентификаторКомандыВыгрузкаАрхиваПоРасписанию()
	Возврат "ВыгрузкаАрхиваПоРасписанию";
КонецФункции

#КонецОбласти

#КонецЕсли
