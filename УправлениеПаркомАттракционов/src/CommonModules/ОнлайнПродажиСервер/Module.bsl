// Общий модуль ОнлайнПродажиСервер
// Основной модуль для REST API онлайн продажи билетов
// Содержит служебные функции и обработчики HTTP-запросов

#Область ПрограммныйИнтерфейс

#Область СлужебныеФункции

// Сформировать ответ об успехе
//
// Параметры:
//  Данные - Произвольный - данные для возврата в ответе
//
// Возвращаемое значение:
//  HTTPСервисОтвет - сформированный HTTP-ответ
//
Функция СформироватьОтветУспех(Данные) Экспорт
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	СтруктураОтвета = Новый Структура();
	СтруктураОтвета.Вставить("success", Истина);
	СтруктураОтвета.Вставить("data", Данные);
	СтруктураОтвета.Вставить("timestamp", ТекущаяДатаСеанса());
	
	Ответ.УстановитьТелоИзСтроки(ЗаписатьJSON(СтруктураОтвета));
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	Возврат Ответ;
	
КонецФункции

// Сформировать ответ об ошибке
//
// Параметры:
//  КодОшибки - Число - HTTP код ошибки
//  ТекстОшибки - Строка - текст ошибки
//  ДополнительныеДанные - Произвольный - дополнительные данные об ошибке
//
// Возвращаемое значение:
//  HTTPСервисОтвет - сформированный HTTP-ответ
//
Функция СформироватьОтветОшибка(КодОшибки, ТекстОшибки, ДополнительныеДанные = Неопределено) Экспорт
	
	Ответ = Новый HTTPСервисОтвет(КодОшибки);
	
	СтруктураОтвета = Новый Структура();
	СтруктураОтвета.Вставить("success", Ложь);
	СтруктураОтвета.Вставить("error", ТекстОшибки);
	СтруктураОтвета.Вставить("timestamp", ТекущаяДатаСеанса());
	
	Если ДополнительныеДанные <> Неопределено Тогда
		СтруктураОтвета.Вставить("details", ДополнительныеДанные);
	КонецЕсли;
	
	Ответ.УстановитьТелоИзСтроки(ЗаписатьJSON(СтруктураОтвета));
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	Возврат Ответ;
	
КонецФункции

// Получить версию API
//
// Возвращаемое значение:
//  Строка - версия API
//
Функция ПолучитьВерсиюАПИ() Экспорт
	
	Возврат "1.0";
	
КонецФункции

// Записать в журнал API
//
// Параметры:
//  ТипСобытия - Строка - тип события (GET /products, POST /reservations и т.д.)
//  Описание - Строка - описание события
//  ДанныеЗапроса - Произвольный - данные запроса для журналирования
//  ВремяВыполнения - Число - время выполнения в миллисекундах (необязательный)
//  КодОтвета - Число - HTTP код ответа (необязательный, по умолчанию 200)
//
Процедура ЗаписатьВЖурналАПИ(ТипСобытия, Описание, ДанныеЗапроса = Неопределено, ВремяВыполнения = 0, КодОтвета = 200) Экспорт
	
	// Записываем в специализированный регистр журнала онлайн продаж
	РегистрыСведений.ЖурналОнлайнПродаж.ЗаписатьОперацию(
		ТипСобытия, 
		Описание, 
		ДанныеЗапроса, 
		ВремяВыполнения, 
		КодОтвета);
	
	// Дублируем в журнал регистрации для совместимости
	ЗаписьЖурналаРегистрации("ОнлайнПродажиАПИ", УровеньЖурналаРегистрации.Информация, , , 
		СтрШаблон("[%1] %2 (Время: %3мс, Код: %4)", ТипСобытия, Описание, ВремяВыполнения, КодОтвета));
	
КонецПроцедуры

// Валидировать JSON
//
// Параметры:
//  СтрокаДжейСОН - Строка - строка JSON для валидации
//
// Возвращаемое значение:
//  Структура - результат валидации:
//    * Успех - Булево - успешность валидации
//    * Данные - Произвольный - распарсенные данные (если успех)
//    * ОписаниеОшибки - Строка - описание ошибки (если не успех)
//
Функция ВалидироватьДжейСОН(СтрокаДжейСОН) Экспорт
	
	Результат = Новый Структура("Успех, Данные, ОписаниеОшибки", Ложь, Неопределено, "");
	
	Если ПустаяСтрока(СтрокаДжейСОН) Тогда
		Результат.ОписаниеОшибки = "Пустое тело запроса";
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(СтрокаДжейСОН);
		Данные = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.Успех = Истина;
		Результат.Данные = Данные;
		
	Исключение
		Результат.ОписаниеОшибки = СтрШаблон("Некорректный JSON: %1", ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Проверить обязательные поля
//
// Параметры:
//  Данные - Структура - данные для проверки
//  МассивПолей - Массив - массив имен обязательных полей
//
// Возвращаемое значение:
//  Структура - результат проверки:
//    * Успех - Булево - успешность проверки
//    * ОтсутствующиеПоля - Массив - массив отсутствующих полей
//
Функция ПроверитьОбязательныеПоля(Данные, МассивПолей) Экспорт
	
	Результат = Новый Структура("Успех, ОтсутствующиеПоля", Истина, Новый Массив);
	
	Если ТипЗнч(Данные) <> Тип("Структура") И ТипЗнч(Данные) <> Тип("Соответствие") Тогда
		Результат.Успех = Ложь;
		Результат.ОтсутствующиеПоля.Добавить("Данные должны быть объектом");
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ИмяПоля Из МассивПолей Цикл
		Если НЕ Данные.Свойство(ИмяПоля) ИЛИ НЕ ЗначениеЗаполнено(Данные[ИмяПоля]) Тогда
			Результат.ОтсутствующиеПоля.Добавить(ИмяПоля);
		КонецЕсли;
	КонецЦикла;
	
	Если Результат.ОтсутствующиеПоля.Количество() > 0 Тогда
		Результат.Успех = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Валидировать телефон
//
// Параметры:
//  НомерТелефона - Строка - номер телефона для валидации
//
// Возвращаемое значение:
//  Булево - корректность номера телефона
//
Функция ВалидироватьТелефон(НомерТелефона) Экспорт
	
	Если НЕ ЗначениеЗаполнено(НомерТелефона) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Простая валидация: убираем все кроме цифр и проверяем длину
	ТолькоЦифры = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(НомерТелефона, " ", ""), "+", ""), "-", ""), "(", "");
	ТолькоЦифры = СтрЗаменить(ТолькоЦифры, ")", "");
	
	// Российский номер должен содержать 10-11 цифр
	Возврат СтрДлина(ТолькоЦифры) >= 10 И СтрДлина(ТолькоЦифры) <= 11;
	
КонецФункции

// Валидировать электронную почту
//
// Параметры:
//  АдресЭлектроннойПочты - Строка - адрес электронной почты для валидации
//
// Возвращаемое значение:
//  Булево - корректность адреса электронной почты
//
Функция ВалидироватьЭлектроннуюПочту(АдресЭлектроннойПочты) Экспорт
	
	Если НЕ ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Простая валидация email
	Возврат СтрНайти(АдресЭлектроннойПочты, "@") > 0 И СтрНайти(АдресЭлектроннойПочты, ".") > 0;
	
КонецФункции

// Валидировать UUID
//
// Параметры:
//  СтрокаUUID - Строка - строка UUID для валидации
//
// Возвращаемое значение:
//  Булево - корректность UUID
//
Функция ВалидироватьUUID(СтрокаUUID) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтрокаUUID) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// UUID должен быть длиной 36 символов в формате xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
	Если СтрДлина(СтрокаUUID) <> 36 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверим наличие дефисов в нужных позициях
	Если Сред(СтрокаUUID, 9, 1) <> "-" ИЛИ Сред(СтрокаUUID, 14, 1) <> "-" 
		ИЛИ Сред(СтрокаUUID, 19, 1) <> "-" ИЛИ Сред(СтрокаUUID, 24, 1) <> "-" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Валидировать дату
//
// Параметры:
//  СтрокаДаты - Строка - строка даты для валидации (формат ISO 8601: YYYY-MM-DD)
//
// Возвращаемое значение:
//  Структура - результат валидации:
//    * Успех - Булево - успешность валидации
//    * Дата - Дата - преобразованная дата (если успех)
//    * ОписаниеОшибки - Строка - описание ошибки (если не успех)
//
Функция ВалидироватьДату(СтрокаДаты) Экспорт
	
	Результат = Новый Структура("Успех, Дата, ОписаниеОшибки", Ложь, Неопределено, "");
	
	Если НЕ ЗначениеЗаполнено(СтрокаДаты) Тогда
		Результат.ОписаниеОшибки = "Пустая строка даты";
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		// Попробуем преобразовать строку в дату
		ДатаЗначение = Дата(СтрокаДаты);
		Результат.Успех = Истина;
		Результат.Дата = ДатаЗначение;
	Исключение
		Результат.ОписаниеОшибки = СтрШаблон("Некорректный формат даты: %1", СтрокаДаты);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Валидировать число
//
// Параметры:
//  ЗначениеДляПроверки - Произвольный - значение для проверки
//  МинимальноеЗначение - Число - минимальное допустимое значение (необязательный)
//  МаксимальноеЗначение - Число - максимальное допустимое значение (необязательный)
//
// Возвращаемое значение:
//  Структура - результат валидации:
//    * Успех - Булево - успешность валидации
//    * Число - Число - преобразованное число (если успех)
//    * ОписаниеОшибки - Строка - описание ошибки (если не успех)
//
Функция ВалидироватьЧисло(ЗначениеДляПроверки, МинимальноеЗначение = Неопределено, МаксимальноеЗначение = Неопределено) Экспорт
	
	Результат = Новый Структура("Успех, Число, ОписаниеОшибки", Ложь, 0, "");
	
	Попытка
		ЧисловоеЗначение = Число(ЗначениеДляПроверки);
		
		// Проверка минимального значения
		Если МинимальноеЗначение <> Неопределено И ЧисловоеЗначение < МинимальноеЗначение Тогда
			Результат.ОписаниеОшибки = СтрШаблон("Значение %1 меньше минимального %2", ЧисловоеЗначение, МинимальноеЗначение);
			Возврат Результат;
		КонецЕсли;
		
		// Проверка максимального значения
		Если МаксимальноеЗначение <> Неопределено И ЧисловоеЗначение > МаксимальноеЗначение Тогда
			Результат.ОписаниеОшибки = СтрШаблон("Значение %1 больше максимального %2", ЧисловоеЗначение, МаксимальноеЗначение);
			Возврат Результат;
		КонецЕсли;
		
		Результат.Успех = Истина;
		Результат.Число = ЧисловоеЗначение;
		
	Исключение
		Результат.ОписаниеОшибки = СтрШаблон("Невозможно преобразовать в число: %1", ЗначениеДляПроверки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Получить стандартизированный код ошибки
//
// Параметры:
//  ТипОшибки - Строка - тип ошибки
//
// Возвращаемое значение:
//  Структура - информация об ошибке:
//    * Код - Число - HTTP код ошибки
//    * КодОшибки - Строка - внутренний код ошибки
//    * Сообщение - Строка - стандартное сообщение
//
Функция ПолучитьКодОшибки(ТипОшибки) Экспорт
	
	СтандартныеОшибки = Новый Соответствие();
	
	// 400 - Bad Request
	СтандартныеОшибки.Вставить("INVALID_JSON", Новый Структура("Код, КодОшибки, Сообщение", 400, "INVALID_JSON", "Некорректный формат JSON"));
	СтандартныеОшибки.Вставить("MISSING_FIELDS", Новый Структура("Код, КодОшибки, Сообщение", 400, "MISSING_FIELDS", "Отсутствуют обязательные поля"));
	СтандартныеОшибки.Вставить("INVALID_PHONE", Новый Структура("Код, КодОшибки, Сообщение", 400, "INVALID_PHONE", "Некорректный номер телефона"));
	СтандартныеОшибки.Вставить("INVALID_EMAIL", Новый Структура("Код, КодОшибки, Сообщение", 400, "INVALID_EMAIL", "Некорректный адрес электронной почты"));
	СтандартныеОшибки.Вставить("INVALID_UUID", Новый Структура("Код, КодОшибки, Сообщение", 400, "INVALID_UUID", "Некорректный идентификатор"));
	СтандартныеОшибки.Вставить("INVALID_DATE", Новый Структура("Код, КодОшибки, Сообщение", 400, "INVALID_DATE", "Некорректная дата"));
	СтандартныеОшибки.Вставить("INVALID_NUMBER", Новый Структура("Код, КодОшибки, Сообщение", 400, "INVALID_NUMBER", "Некорректное числовое значение"));
	
	// 401 - Unauthorized
	СтандартныеОшибки.Вставить("UNAUTHORIZED", Новый Структура("Код, КодОшибки, Сообщение", 401, "UNAUTHORIZED", "Требуется авторизация"));
	
	// 403 - Forbidden
	СтандартныеОшибки.Вставить("FORBIDDEN", Новый Структура("Код, КодОшибки, Сообщение", 403, "FORBIDDEN", "Доступ запрещен"));
	
	// 404 - Not Found
	СтандартныеОшибки.Вставить("NOT_FOUND", Новый Структура("Код, КодОшибки, Сообщение", 404, "NOT_FOUND", "Ресурс не найден"));
	СтандартныеОшибки.Вставить("CUSTOMER_NOT_FOUND", Новый Структура("Код, КодОшибки, Сообщение", 404, "CUSTOMER_NOT_FOUND", "Клиент не найден"));
	СтандартныеОшибки.Вставить("PRODUCT_NOT_FOUND", Новый Структура("Код, КодОшибки, Сообщение", 404, "PRODUCT_NOT_FOUND", "Товар не найден"));
	СтандартныеОшибки.Вставить("RESERVATION_NOT_FOUND", Новый Структура("Код, КодОшибки, Сообщение", 404, "RESERVATION_NOT_FOUND", "Бронирование не найдено"));
	СтандартныеОшибки.Вставить("TICKET_NOT_FOUND", Новый Структура("Код, КодОшибки, Сообщение", 404, "TICKET_NOT_FOUND", "Билет не найден"));
	
	// 409 - Conflict
	СтандартныеОшибки.Вставить("CUSTOMER_EXISTS", Новый Структура("Код, КодОшибки, Сообщение", 409, "CUSTOMER_EXISTS", "Клиент уже существует"));
	СтандартныеОшибки.Вставить("INSUFFICIENT_STOCK", Новый Структура("Код, КодОшибки, Сообщение", 409, "INSUFFICIENT_STOCK", "Недостаточно товара в наличии"));
	СтандартныеОшибки.Вставить("RESERVATION_EXPIRED", Новый Структура("Код, КодОшибки, Сообщение", 409, "RESERVATION_EXPIRED", "Бронирование истекло"));
	СтандартныеОшибки.Вставить("RESERVATION_ALREADY_PAID", Новый Структура("Код, КодОшибки, Сообщение", 409, "RESERVATION_ALREADY_PAID", "Бронирование уже оплачено"));
	СтандартныеОшибки.Вставить("INSUFFICIENT_BONUS", Новый Структура("Код, КодОшибки, Сообщение", 409, "INSUFFICIENT_BONUS", "Недостаточно бонусных баллов"));
	
	// 422 - Unprocessable Entity
	СтандартныеОшибки.Вставить("VALIDATION_ERROR", Новый Структура("Код, КодОшибки, Сообщение", 422, "VALIDATION_ERROR", "Ошибка валидации данных"));
	
	// 500 - Internal Server Error
	СтандартныеОшибки.Вставить("INTERNAL_ERROR", Новый Структура("Код, КодОшибки, Сообщение", 500, "INTERNAL_ERROR", "Внутренняя ошибка сервера"));
	СтандартныеОшибки.Вставить("DATABASE_ERROR", Новый Структура("Код, КодОшибки, Сообщение", 500, "DATABASE_ERROR", "Ошибка базы данных"));
	
	// 501 - Not Implemented
	СтандартныеОшибки.Вставить("NOT_IMPLEMENTED", Новый Структура("Код, КодОшибки, Сообщение", 501, "NOT_IMPLEMENTED", "Функция не реализована"));
	
	// 503 - Service Unavailable
	СтандартныеОшибки.Вставить("SERVICE_UNAVAILABLE", Новый Структура("Код, КодОшибки, Сообщение", 503, "SERVICE_UNAVAILABLE", "Сервис временно недоступен"));
	
	Если СтандартныеОшибки.Получить(ТипОшибки) <> Неопределено Тогда
		Возврат СтандартныеОшибки.Получить(ТипОшибки);
	Иначе
		// Возвращаем общую ошибку сервера
		Возврат СтандартныеОшибки.Получить("INTERNAL_ERROR");
	КонецЕсли;
	
КонецФункции

// Сформировать стандартизированный ответ об ошибке
//
// Параметры:
//  ТипОшибки - Строка - тип ошибки (см. ПолучитьКодОшибки)
//  ДополнительноеСообщение - Строка - дополнительное сообщение об ошибке
//  ДополнительныеДанные - Произвольный - дополнительные данные об ошибке
//
// Возвращаемое значение:
//  HTTPСервисОтвет - сформированный HTTP-ответ
//
Функция СформироватьСтандартныйОтветОшибка(ТипОшибки, ДополнительноеСообщение = "", ДополнительныеДанные = Неопределено) Экспорт
	
	ИнформацияОбОшибке = ПолучитьКодОшибки(ТипОшибки);
	
	Ответ = Новый HTTPСервисОтвет(ИнформацияОбОшибке.Код);
	
	СтруктураОтвета = Новый Структура();
	СтруктураОтвета.Вставить("success", Ложь);
	СтруктураОтвета.Вставить("error_code", ИнформацияОбОшибке.КодОшибки);
	
	Если ЗначениеЗаполнено(ДополнительноеСообщение) Тогда
		СтруктураОтвета.Вставить("error", ДополнительноеСообщение);
	Иначе
		СтруктураОтвета.Вставить("error", ИнформацияОбОшибке.Сообщение);
	КонецЕсли;
	
	СтруктураОтвета.Вставить("timestamp", ТекущаяДатаСеанса());
	
	Если ДополнительныеДанные <> Неопределено Тогда
		СтруктураОтвета.Вставить("details", ДополнительныеДанные);
	КонецЕсли;
	
	Ответ.УстановитьТелоИзСтроки(ЗаписатьJSON(СтруктураОтвета));
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиHTTPЗапросов

// Обработать получение списка номенклатуры
//
// Параметры:
//  Запрос - HTTPСервисЗапрос - HTTP-запрос
//
// Возвращаемое значение:
//  HTTPСервисОтвет - HTTP-ответ
//
Функция ОбработатьПолучениеСпискаНоменклатуры(Запрос) Экспорт
	
	НачалоВремени = ТекущаяДатаМиллисекунды();
	
	Попытка
		
		// Пока возвращаем заглушку
		ДанныеНоменклатуры = Новый Массив;
		
		СтруктураТовара = Новый Структура();
		СтруктураТовара.Вставить("id", "00000000-0000-0000-0000-000000000001");
		СтруктураТовара.Вставить("code", "001");
		СтруктураТовара.Вставить("name", "Билет на карусель");
		СтруктураТовара.Вставить("description", "Билет на посещение карусели");
		СтруктураТовара.Вставить("product_type", "single_visit");
		СтруктураТовара.Вставить("attraction_type", "Карусель");
		СтруктураТовара.Вставить("visits_count", 1);
		СтруктураТовара.Вставить("price", 500);
		СтруктураТовара.Вставить("currency", "RUB");
		СтруктураТовара.Вставить("active", Истина);
		
		ДанныеНоменклатуры.Добавить(СтруктураТовара);
		
		Результат = СформироватьОтветУспех(ДанныеНоменклатуры);
		
	Исключение
		Результат = СформироватьСтандартныйОтветОшибка("INTERNAL_ERROR", "Внутренняя ошибка сервера", ОписаниеОшибки());
	КонецПопытки;
	
	// Журналирование
	ВремяВыполнения = ТекущаяДатаМиллисекунды() - НачалоВремени;
	КодОтвета = ?(Результат.КодСостояния = Неопределено, 200, Результат.КодСостояния);
	ЗаписатьВЖурналАПИ("GET /products", "Получение списка номенклатуры", , ВремяВыполнения, КодОтвета);
	
	Возврат Результат;
	
КонецФункции

// Обработать получение данных номенклатуры
//
// Параметры:
//  Запрос - HTTPСервисЗапрос - HTTP-запрос
//
// Возвращаемое значение:
//  HTTPСервисОтвет - HTTP-ответ
//
Функция ОбработатьПолучениеДанныхНоменклатуры(Запрос) Экспорт
	
	НачалоВремени = ТекущаяДатаМиллисекунды();
	
	Попытка
		
		// Пока возвращаем заглушку
		ДанныеТовара = Новый Структура();
		ДанныеТовара.Вставить("id", "00000000-0000-0000-0000-000000000001");
		ДанныеТовара.Вставить("code", "001");
		ДанныеТовара.Вставить("name", "Билет на карусель");
		ДанныеТовара.Вставить("description", "Билет на посещение карусели. Включает одно посещение.");
		ДанныеТовара.Вставить("product_type", "single_visit");
		ДанныеТовара.Вставить("attraction_type", "Карусель");
		ДанныеТовара.Вставить("visits_count", 1);
		ДанныеТовара.Вставить("price", 500);
		ДанныеТовара.Вставить("currency", "RUB");
		ДанныеТовара.Вставить("active", Истина);
		ДанныеТовара.Вставить("images", Новый Массив);
		
		Ограничения = Новый Структура();
		Ограничения.Вставить("min_age", 3);
		Ограничения.Вставить("max_age", 99);
		Ограничения.Вставить("max_capacity", 20);
		ДанныеТовара.Вставить("restrictions", Ограничения);
		
		Результат = СформироватьОтветУспех(ДанныеТовара);
		
	Исключение
		Результат = СформироватьСтандартныйОтветОшибка("INTERNAL_ERROR", "Внутренняя ошибка сервера", ОписаниеОшибки());
	КонецПопытки;
	
	// Журналирование
	ВремяВыполнения = ТекущаяДатаМиллисекунды() - НачалоВремени;
	КодОтвета = ?(Результат.КодСостояния = Неопределено, 200, Результат.КодСостояния);
	ЗаписатьВЖурналАПИ("GET /products/{id}", "Получение данных номенклатуры", , ВремяВыполнения, КодОтвета);
	
	Возврат Результат;
	
КонецФункции

// Обработать поиск клиента
//
// Параметры:
//  Запрос - HTTPСервисЗапрос - HTTP-запрос
//
// Возвращаемое значение:
//  HTTPСервисОтвет - HTTP-ответ
//
Функция ОбработатьПоискКлиента(Запрос) Экспорт
	
	НачалоВремени = ТекущаяДатаМиллисекунды();
	
	Попытка
		
		// Пока возвращаем заглушку
		ДанныеКлиента = Новый Структура();
		ДанныеКлиента.Вставить("id", "00000000-0000-0000-0000-000000000101");
		ДанныеКлиента.Вставить("name", "Иванов Иван Иванович");
		ДанныеКлиента.Вставить("phone", "+7-900-123-45-67");
		ДанныеКлиента.Вставить("email", "ivanov@example.com");
		ДанныеКлиента.Вставить("bonus_balance", 1500);
		
		Результат = СформироватьОтветУспех(ДанныеКлиента);
		
	Исключение
		Результат = СформироватьСтандартныйОтветОшибка("INTERNAL_ERROR", "Внутренняя ошибка сервера", ОписаниеОшибки());
	КонецПопытки;
	
	// Журналирование
	ВремяВыполнения = ТекущаяДатаМиллисекунды() - НачалоВремени;
	КодОтвета = ?(Результат.КодСостояния = Неопределено, 200, Результат.КодСостояния);
	ЗаписатьВЖурналАПИ("GET /customers/search", "Поиск клиента", , ВремяВыполнения, КодОтвета);
	
	Возврат Результат;
	
КонецФункции

// Обработать создание клиента
//
// Параметры:
//  Запрос - HTTPСервисЗапрос - HTTP-запрос
//
// Возвращаемое значение:
//  HTTPСервисОтвет - HTTP-ответ
//
Функция ОбработатьСозданиеКлиента(Запрос) Экспорт
	
	НачалоВремени = ТекущаяДатаМиллисекунды();
	
	Попытка
		
		// Валидация JSON
		РезультатВалидации = ВалидироватьДжейСОН(Запрос.ПолучитьТелоКакСтроку());
		Если НЕ РезультатВалидации.Успех Тогда
			Возврат СформироватьСтандартныйОтветОшибка("INVALID_JSON", РезультатВалидации.ОписаниеОшибки);
		КонецЕсли;
		
		ДанныеЗапроса = РезультатВалидации.Данные;
		
		// Проверка обязательных полей
		ОбязательныеПоля = Новый Массив;
		ОбязательныеПоля.Добавить("name");
		ОбязательныеПоля.Добавить("phone");
		
		РезультатПроверки = ПроверитьОбязательныеПоля(ДанныеЗапроса, ОбязательныеПоля);
		Если НЕ РезультатПроверки.Успех Тогда
			Возврат СформироватьСтандартныйОтветОшибка("MISSING_FIELDS", 
				"Отсутствуют обязательные поля: " + СтрСоединить(РезультатПроверки.ОтсутствующиеПоля, ", "));
		КонецЕсли;
		
		// Валидация телефона
		Если НЕ ВалидироватьТелефон(ДанныеЗапроса["phone"]) Тогда
			Возврат СформироватьСтандартныйОтветОшибка("INVALID_PHONE", 
				"Некорректный формат номера телефона: " + ДанныеЗапроса["phone"]);
		КонецЕсли;
		
		// Валидация email (если указан)
		Если ДанныеЗапроса.Свойство("email") И ЗначениеЗаполнено(ДанныеЗапроса["email"]) Тогда
			Если НЕ ВалидироватьЭлектроннуюПочту(ДанныеЗапроса["email"]) Тогда
				Возврат СформироватьСтандартныйОтветОшибка("INVALID_EMAIL", 
					"Некорректный формат адреса электронной почты: " + ДанныеЗапроса["email"]);
			КонецЕсли;
		КонецЕсли;
		
		// Пока возвращаем заглушку созданного клиента
		НовыйКлиент = Новый Структура();
		НовыйКлиент.Вставить("id", "00000000-0000-0000-0000-000000000102");
		НовыйКлиент.Вставить("name", ДанныеЗапроса["name"]);
		НовыйКлиент.Вставить("phone", ДанныеЗапроса["phone"]);
		
		Если ДанныеЗапроса.Свойство("email") Тогда
			НовыйКлиент.Вставить("email", ДанныеЗапроса["email"]);
		КонецЕсли;
		
		НовыйКлиент.Вставить("bonus_balance", 0);
		НовыйКлиент.Вставить("created_at", ТекущаяДатаСеанса());
		
		Результат = СформироватьОтветУспех(НовыйКлиент);
		
	Исключение
		Результат = СформироватьСтандартныйОтветОшибка("INTERNAL_ERROR", "Внутренняя ошибка сервера", ОписаниеОшибки());
	КонецПопытки;
	
	// Журналирование
	ВремяВыполнения = ТекущаяДатаМиллисекунды() - НачалоВремени;
	КодОтвета = ?(Результат.КодСостояния = Неопределено, 200, Результат.КодСостояния);
	ЗаписатьВЖурналАПИ("POST /customers", "Создание клиента", ДанныеЗапроса, ВремяВыполнения, КодОтвета);
	
	Возврат Результат;
	
КонецФункции

// Обработать получение баланса бонусов
//
// Параметры:
//  Запрос - HTTPСервисЗапрос - HTTP-запрос
//
// Возвращаемое значение:
//  HTTPСервисОтвет - HTTP-ответ
//
Функция ОбработатьПолучениеБалансаБонусов(Запрос) Экспорт
	
	НачалоВремени = ТекущаяДатаМиллисекунды();
	
	Попытка
		
		// Пока возвращаем заглушку
		ДанныеБонусов = Новый Структура();
		ДанныеБонусов.Вставить("customer_id", "00000000-0000-0000-0000-000000000101");
		ДанныеБонусов.Вставить("bonus_balance", 1500);
		ДанныеБонусов.Вставить("available_for_payment", 1200); // 80% от баланса
		ДанныеБонусов.Вставить("currency", "RUB");
		ДанныеБонусов.Вставить("last_updated", ТекущаяДатаСеанса());
		
		Результат = СформироватьОтветУспех(ДанныеБонусов);
		
	Исключение
		Результат = СформироватьСтандартныйОтветОшибка("INTERNAL_ERROR", "Внутренняя ошибка сервера", ОписаниеОшибки());
	КонецПопытки;
	
	// Журналирование
	ВремяВыполнения = ТекущаяДатаМиллисекунды() - НачалоВремени;
	КодОтвета = ?(Результат.КодСостояния = Неопределено, 200, Результат.КодСостояния);
	ЗаписатьВЖурналАПИ("GET /customers/{id}/bonus", "Получение баланса бонусов", , ВремяВыполнения, КодОтвета);
	
	Возврат Результат;
	
КонецФункции

// Остальные обработчики пока возвращают заглушки

Функция ОбработатьСозданиеБронирования(Запрос) Экспорт
	Возврат СформироватьСтандартныйОтветОшибка("NOT_IMPLEMENTED", "Функция будет реализована на следующих этапах");
КонецФункции

Функция ОбработатьПолучениеСтатусаБронирования(Запрос) Экспорт
	Возврат СформироватьСтандартныйОтветОшибка("NOT_IMPLEMENTED", "Функция будет реализована на следующих этапах");
КонецФункции

Функция ОбработатьОтменуБронирования(Запрос) Экспорт
	Возврат СформироватьСтандартныйОтветОшибка("NOT_IMPLEMENTED", "Функция будет реализована на следующих этапах");
КонецФункции

Функция ОбработатьПодтверждениеОплаты(Запрос) Экспорт
	Возврат СформироватьСтандартныйОтветОшибка("NOT_IMPLEMENTED", "Функция будет реализована на следующих этапах");
КонецФункции

Функция ОбработатьПолучениеИнформацииОБилете(Запрос) Экспорт
	Возврат СформироватьСтандартныйОтветОшибка("NOT_IMPLEMENTED", "Функция будет реализована на следующих этапах");
КонецФункции

Функция ОбработатьПолучениеБилетовКлиента(Запрос) Экспорт
	Возврат СформироватьСтандартныйОтветОшибка("NOT_IMPLEMENTED", "Функция будет реализована на следующих этапах");
КонецФункции

#КонецОбласти

#КонецОбласти
