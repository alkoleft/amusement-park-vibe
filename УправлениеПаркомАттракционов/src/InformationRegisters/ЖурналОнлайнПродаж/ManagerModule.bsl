// Модуль менеджера регистра сведений ЖурналОнлайнПродаж
// Функции для журналирования операций API онлайн продаж

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Записать операцию в журнал
//
// Параметры:
//  ТипОперации - Строка - тип операции (например, "GET /products")
//  Описание - Строка - описание операции
//  ДанныеЗапроса - Произвольный - данные запроса для сохранения
//  ВремяВыполнения - Число - время выполнения в миллисекундах
//  КодОтвета - Число - HTTP код ответа
//  Пользователь - СправочникСсылка.Пользователи - пользователь (необязательный)
//
Процедура ЗаписатьОперацию(ТипОперации, Описание, ДанныеЗапроса = Неопределено, ВремяВыполнения = 0, КодОтвета = 200, Пользователь = Неопределено) Экспорт
	
	Попытка
		
		МенеджерЗаписи = РегистрыСведений.ЖурналОнлайнПродаж.СоздатьМенеджерЗаписи();
		
		МенеджерЗаписи.Дата = ТекущаяДатаСеанса();
		МенеджерЗаписи.ТипОперации = ТипОперации;
		МенеджерЗаписи.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор());
		
		Если Пользователь <> Неопределено Тогда
			МенеджерЗаписи.Пользователь = Пользователь;
		Иначе
			// Пытаемся получить текущего пользователя
			Попытка
				МенеджерЗаписи.Пользователь = Пользователи.ТекущийПользователь();
			Исключение
				// Если не удается получить пользователя, оставляем пустым
			КонецПопытки;
		КонецЕсли;
		
		МенеджерЗаписи.Описание = Описание;
		МенеджерЗаписи.ВремяВыполнения = ВремяВыполнения;
		МенеджерЗаписи.КодОтвета = КодОтвета;
		
		// Сохраняем данные запроса в хранилище значений
		Если ДанныеЗапроса <> Неопределено Тогда
			МенеджерЗаписи.ДанныеЗапроса = Новый ХранилищеЗначения(ДанныеЗапроса);
		КонецЕсли;
		
		МенеджерЗаписи.Записать();
		
	Исключение
		// Записываем ошибку журналирования в журнал регистрации, но не прерываем выполнение
		ЗаписьЖурналаРегистрации("ЖурналОнлайнПродаж", УровеньЖурналаРегистрации.Ошибка, 
			Метаданные.РегистрыСведений.ЖурналОнлайнПродаж, , 
			СтрШаблон("Ошибка записи в журнал операций API: %1", ОписаниеОшибки()));
	КонецПопытки;
	
КонецПроцедуры

// Получить статистику операций за период
//
// Параметры:
//  НачалоПериода - Дата - начало периода
//  КонецПериода - Дата - конец периода
//  ТипОперации - Строка - фильтр по типу операции (необязательный)
//
// Возвращаемое значение:
//  ТаблицаЗначений - статистика операций
//
Функция ПолучитьСтатистикуОпераций(НачалоПериода, КонецПериода, ТипОперации = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЖурналОнлайнПродаж.ТипОперации КАК ТипОперации,
	|	КОЛИЧЕСТВО(*) КАК КоличествоОпераций,
	|	СРЕДНЕЕ(ЖурналОнлайнПродаж.ВремяВыполнения) КАК СреднееВремяВыполнения,
	|	МАКСИМУМ(ЖурналОнлайнПродаж.ВремяВыполнения) КАК МаксимальноеВремяВыполнения,
	|	МИНИМУМ(ЖурналОнлайнПродаж.ВремяВыполнения) КАК МинимальноеВремяВыполнения,
	|	СУММА(ВЫБОР
	|			КОГДА ЖурналОнлайнПродаж.КодОтвета >= 200
	|					И ЖурналОнлайнПродаж.КодОтвета < 300
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК УспешныеОперации,
	|	СУММА(ВЫБОР
	|			КОГДА ЖурналОнлайнПродаж.КодОтвета >= 400
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОперацииСОшибками
	|ИЗ
	|	РегистрСведений.ЖурналОнлайнПродаж КАК ЖурналОнлайнПродаж
	|ГДЕ
	|	ЖурналОнлайнПродаж.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И (&ТипОперации = """"
	|			ИЛИ ЖурналОнлайнПродаж.ТипОперации = &ТипОперации)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЖурналОнлайнПродаж.ТипОперации
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоОпераций УБЫВ";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("ТипОперации", ТипОперации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Получить последние операции
//
// Параметры:
//  КоличествоЗаписей - Число - количество записей для получения
//  ТипОперации - Строка - фильтр по типу операции (необязательный)
//  ТолькоОшибки - Булево - показать только операции с ошибками
//
// Возвращаемое значение:
//  ТаблицаЗначений - последние операции
//
Функция ПолучитьПоследниеОперации(КоличествоЗаписей = 100, ТипОперации = "", ТолькоОшибки = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ &КоличествоЗаписей
	|	ЖурналОнлайнПродаж.Дата КАК Дата,
	|	ЖурналОнлайнПродаж.ТипОперации КАК ТипОперации,
	|	ЖурналОнлайнПродаж.УникальныйИдентификатор КАК УникальныйИдентификатор,
	|	ЖурналОнлайнПродаж.Описание КАК Описание,
	|	ЖурналОнлайнПродаж.ВремяВыполнения КАК ВремяВыполнения,
	|	ЖурналОнлайнПродаж.КодОтвета КАК КодОтвета,
	|	ЖурналОнлайнПродаж.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.ЖурналОнлайнПродаж КАК ЖурналОнлайнПродаж
	|ГДЕ
	|	(&ТипОперации = """"
	|			ИЛИ ЖурналОнлайнПродаж.ТипОперации = &ТипОперации)
	|	И (&НеТолькоОшибки
	|			ИЛИ ЖурналОнлайнПродаж.КодОтвета >= 400)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЖурналОнлайнПродаж.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("КоличествоЗаписей", КоличествоЗаписей);
	Запрос.УстановитьПараметр("ТипОперации", ТипОперации);
	Запрос.УстановитьПараметр("НеТолькоОшибки", НЕ ТолькоОшибки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Получить детальную информацию об операции
//
// Параметры:
//  УникальныйИдентификатор - Строка - уникальный идентификатор операции
//
// Возвращаемое значение:
//  Структура - детальная информация об операции или Неопределено, если не найдена
//
Функция ПолучитьДетальнуюИнформациюОперации(УникальныйИдентификатор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЖурналОнлайнПродаж.Дата КАК Дата,
	|	ЖурналОнлайнПродаж.ТипОперации КАК ТипОперации,
	|	ЖурналОнлайнПродаж.УникальныйИдентификатор КАК УникальныйИдентификатор,
	|	ЖурналОнлайнПродаж.Описание КАК Описание,
	|	ЖурналОнлайнПродаж.ДанныеЗапроса КАК ДанныеЗапроса,
	|	ЖурналОнлайнПродаж.ВремяВыполнения КАК ВремяВыполнения,
	|	ЖурналОнлайнПродаж.КодОтвета КАК КодОтвета,
	|	ЖурналОнлайнПродаж.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.ЖурналОнлайнПродаж КАК ЖурналОнлайнПродаж
	|ГДЕ
	|	ЖурналОнлайнПродаж.УникальныйИдентификатор = &УникальныйИдентификатор";
	
	Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИдентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ИнформацияОбОперации = Новый Структура();
	ИнформацияОбОперации.Вставить("Дата", Выборка.Дата);
	ИнформацияОбОперации.Вставить("ТипОперации", Выборка.ТипОперации);
	ИнформацияОбОперации.Вставить("УникальныйИдентификатор", Выборка.УникальныйИдентификатор);
	ИнформацияОбОперации.Вставить("Описание", Выборка.Описание);
	ИнформацияОбОперации.Вставить("ВремяВыполнения", Выборка.ВремяВыполнения);
	ИнформацияОбОперации.Вставить("КодОтвета", Выборка.КодОтвета);
	ИнформацияОбОперации.Вставить("Пользователь", Выборка.Пользователь);
	
	// Извлекаем данные запроса из хранилища значений
	Если ЗначениеЗаполнено(Выборка.ДанныеЗапроса) Тогда
		Попытка
			ИнформацияОбОперации.Вставить("ДанныеЗапроса", Выборка.ДанныеЗапроса.Получить());
		Исключение
			ИнформацияОбОперации.Вставить("ДанныеЗапроса", "Ошибка извлечения данных запроса");
		КонецПопытки;
	Иначе
		ИнформацияОбОперации.Вставить("ДанныеЗапроса", Неопределено);
	КонецЕсли;
	
	Возврат ИнформацияОбОперации;
	
КонецФункции

// Очистить старые записи журнала
//
// Параметры:
//  ДатаУдаленияДо - Дата - дата, до которой удалить записи
//
// Возвращаемое значение:
//  Число - количество удаленных записей
//
Функция ОчиститьСтарыеЗаписи(ДатаУдаленияДо) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЖурналОнлайнПродаж.Дата КАК Дата,
	|	ЖурналОнлайнПродаж.ТипОперации КАК ТипОперации,
	|	ЖурналОнлайнПродаж.УникальныйИдентификатор КАК УникальныйИдентификатор,
	|	ЖурналОнлайнПродаж.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.ЖурналОнлайнПродаж КАК ЖурналОнлайнПродаж
	|ГДЕ
	|	ЖурналОнлайнПродаж.Дата < &ДатаУдаленияДо";
	
	Запрос.УстановитьПараметр("ДатаУдаленияДо", ДатаУдаленияДо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	КоличествоУдаленных = 0;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.ЖурналОнлайнПродаж.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Дата = Выборка.Дата;
		МенеджерЗаписи.ТипОперации = Выборка.ТипОперации;
		МенеджерЗаписи.УникальныйИдентификатор = Выборка.УникальныйИдентификатор;
		МенеджерЗаписи.Пользователь = Выборка.Пользователь;
		
		МенеджерЗаписи.Удалить();
		КоличествоУдаленных = КоличествоУдаленных + 1;
		
	КонецЦикла;
	
	Возврат КоличествоУдаленных;
	
КонецФункции

#КонецОбласти

#КонецЕсли
