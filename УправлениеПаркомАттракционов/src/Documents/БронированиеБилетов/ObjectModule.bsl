// Модуль объекта документа БронированиеБилетов
// Обработчики событий объекта для управления бронированием билетов

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события ПриЗаписи
//
// Параметры:
//  Отказ - Булево - флаг отказа от записи
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Контроль статуса и времени истечения
	Если СтатусБрони = Перечисления.СтатусыБронирования.Активная Тогда
		
		// Проверяем, не истекло ли время брони
		Если ВремяИстечения <= ТекущаяДатаСеанса() Тогда
			СтатусБрони = Перечисления.СтатусыБронирования.Истекла;
			
			// Записываем в журнал
			ЗаписьЖурналаРегистрации("БронированиеБилетов", УровеньЖурналаРегистрации.Информация, 
				Метаданные.Документы.БронированиеБилетов, Ссылка,
				"Автоматическое истечение брони по времени");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередЗаписью
//
// Параметры:
//  Отказ - Булево - флаг отказа от записи
//  РежимЗаписи - РежимЗаписиДокумента - режим записи документа
//  РежимПроведения - РежимПроведенияДокумента - режим проведения документа
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Валидация данных
	ВыполнитьВалидациюДанных(Отказ);
	
	// Расчет суммы документа
	РассчитатьСуммуДокумента();
	
	// Установка времени истечения для новых документов
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И НЕ ЗначениеЗаполнено(ВремяИстечения) Тогда
		// По умолчанию бронь активна 15 минут
		ВремяИстечения = ТекущаяДатаСеанса() + 15 * 60; // 15 минут в секундах
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ОбработкаПроведения
//
// Параметры:
//  Отказ - Булево - флаг отказа от проведения
//  РежимПроведения - РежимПроведенияДокумента - режим проведения документа
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Создание движений по регистру БронированиеПосещений
	// Резервирование позиций
	
	Движения.БронированиеПосещений.Записывать = Истина;
	
	Для Каждого СтрокаПозиции Из Позиции Цикл
		
		// Получаем вид аттракциона для номенклатуры
		ВидАттракциона = ПолучитьВидАттракционаДляНоменклатуры(СтрокаПозиции.Номенклатура);
		
		// Создаем движение по регистру (приход - резервирование)
		Движение = Движения.БронированиеПосещений.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.БронированиеБилетов = Ссылка;
		Движение.ВидАттракциона = ВидАттракциона;
		Движение.ДатаПосещения = СтрокаПозиции.ДатаПосещения;
		Движение.КоличествоПосещений = СтрокаПозиции.Количество;
		
	КонецЦикла;
	
	// Записываем в журнал
	ЗаписьЖурналаРегистрации("БронированиеБилетов", УровеньЖурналаРегистрации.Информация, 
		Метаданные.Документы.БронированиеБилетов, Ссылка,
		"Резервирование позиций при проведении брони");
	
КонецПроцедуры

// Обработчик события ОбработкаУдаленияПроведения
//
// Параметры:
//  Отказ - Булево - флаг отказа от отмены проведения
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Освобождение резерва в регистре БронированиеПосещений
	
	Движения.БронированиеПосещений.Записывать = Истина;
	
	Для Каждого СтрокаПозиции Из Позиции Цикл
		
		// Получаем вид аттракциона для номенклатуры
		ВидАттракциона = ПолучитьВидАттракционаДляНоменклатуры(СтрокаПозиции.Номенклатура);
		
		// Создаем движение по регистру (расход - освобождение резерва)
		Движение = Движения.БронированиеПосещений.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.БронированиеБилетов = Ссылка;
		Движение.ВидАттракциона = ВидАттракциона;
		Движение.ДатаПосещения = СтрокаПозиции.ДатаПосещения;
		Движение.КоличествоПосещений = СтрокаПозиции.Количество;
		
	КонецЦикла;
	
	// Записываем в журнал
	ЗаписьЖурналаРегистрации("БронированиеБилетов", УровеньЖурналаРегистрации.Информация, 
		Метаданные.Документы.БронированиеБилетов, Ссылка,
		"Освобождение резерва при отмене проведения брони");
	
КонецПроцедуры

// Обработчик события ОбработкаПроверкиЗаполнения
//
// Параметры:
//  Отказ - Булево - флаг отказа от записи
//  ПроверяемыеРеквизиты - Массив - массив имен проверяемых реквизитов
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка обязательных полей
	Если НЕ ЗначениеЗаполнено(Клиент) Тогда
		ОбщегоНазначения.СообщитьПользователю("Не заполнен клиент", ЭтотОбъект, "Клиент", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтатусБрони) Тогда
		ОбщегоНазначения.СообщитьПользователю("Не заполнен статус брони", ЭтотОбъект, "СтатусБрони", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВремяИстечения) Тогда
		ОбщегоНазначения.СообщитьПользователю("Не заполнено время истечения", ЭтотОбъект, "ВремяИстечения", , Отказ);
	КонецЕсли;
	
	// Проверка табличной части
	Если Позиции.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю("Не заполнены позиции брони", ЭтотОбъект, "Позиции", , Отказ);
	КонецЕсли;
	
	// Проверка каждой строки табличной части
	НомерСтроки = 0;
	Для Каждого СтрокаПозиции Из Позиции Цикл
		НомерСтроки = НомерСтроки + 1;
		
		Если НЕ ЗначениеЗаполнено(СтрокаПозиции.Номенклатура) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон("Не заполнена номенклатура в строке %1", НомерСтроки), 
				ЭтотОбъект, СтрШаблон("Позиции[%1].Номенклатура", НомерСтроки - 1), , Отказ);
		КонецЕсли;
		
		Если СтрокаПозиции.Количество <= 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон("Количество должно быть больше нуля в строке %1", НомерСтроки), 
				ЭтотОбъект, СтрШаблон("Позиции[%1].Количество", НомерСтроки - 1), , Отказ);
		КонецЕсли;
		
		Если СтрокаПозиции.Цена < 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон("Цена не может быть отрицательной в строке %1", НомерСтроки), 
				ЭтотОбъект, СтрШаблон("Позиции[%1].Цена", НомерСтроки - 1), , Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполнить валидацию данных документа
//
// Параметры:
//  Отказ - Булево - флаг отказа от записи
//
Процедура ВыполнитьВалидациюДанных(Отказ)
	
	// Проверка времени истечения
	Если ЗначениеЗаполнено(ВремяИстечения) И ВремяИстечения <= ТекущаяДатаСеанса() Тогда
		Если СтатусБрони = Перечисления.СтатусыБронирования.Активная Тогда
			ОбщегоНазначения.СообщитьПользователю(
				"Время истечения брони не может быть в прошлом для активной брони", 
				ЭтотОбъект, "ВремяИстечения", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Проверка статуса брони
	Если СтатусБрони = Перечисления.СтатусыБронирования.Оплачена Тогда
		// Для оплаченной брони должны быть заполнены все обязательные поля
		Если НЕ ЗначениеЗаполнено(СуммаДокумента) ИЛИ СуммаДокумента <= 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				"Для оплаченной брони должна быть указана сумма документа", 
				ЭтотОбъект, "СуммаДокумента", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Рассчитать сумму документа
//
Процедура РассчитатьСуммуДокумента()
	
	ОбщаяСумма = 0;
	
	Для Каждого СтрокаПозиции Из Позиции Цикл
		СтрокаПозиции.Сумма = СтрокаПозиции.Количество * СтрокаПозиции.Цена;
		ОбщаяСумма = ОбщаяСумма + СтрокаПозиции.Сумма;
	КонецЦикла;
	
	СуммаДокумента = ОбщаяСумма;
	
КонецПроцедуры

// Получить вид аттракциона для номенклатуры
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - ссылка на номенклатуру
//
// Возвращаемое значение:
//  СправочникСсылка.ВидыАттракционов - вид аттракциона
//
Функция ПолучитьВидАттракционаДляНоменклатуры(Номенклатура)
	
	// TODO: Реализовать получение вида аттракциона из номенклатуры
	// Пока возвращаем пустую ссылку
	Возврат Справочники.ВидыАттракционов.ПустаяСсылка();
	
КонецФункции

#КонецОбласти

#КонецЕсли
