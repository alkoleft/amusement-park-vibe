// Модуль менеджера регистра накопления БронированиеПосещений
// Функции для работы с забронированными посещениями аттракционов

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получить остатки забронированных посещений
//
// Параметры:
//  ВидАттракциона - СправочникСсылка.ВидыАттракционов - вид аттракциона
//  ДатаПосещения - Дата - дата посещения
//  НаДату - Дата - дата, на которую получить остатки (по умолчанию текущая дата)
//
// Возвращаемое значение:
//  Число - количество забронированных посещений
//
Функция ПолучитьОстаткиБронирований(ВидАттракциона, ДатаПосещения, НаДату = Неопределено) Экспорт
	
	Если НаДату = Неопределено Тогда
		НаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БронированиеПосещенийОстатки.КоличествоПосещенийОстаток КАК КоличествоПосещений
	|ИЗ
	|	РегистрНакопления.БронированиеПосещений.Остатки(
	|		&НаДату,
	|		ВидАттракциона = &ВидАттракциона
	|		И ДатаПосещения = &ДатаПосещения) КАК БронированиеПосещенийОстатки";
	
	Запрос.УстановитьПараметр("НаДату", НаДату);
	Запрос.УстановитьПараметр("ВидАттракциона", ВидАттракциона);
	Запрос.УстановитьПараметр("ДатаПосещения", ДатаПосещения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КоличествоПосещений;
	
КонецФункции

// Получить список активных бронирований
//
// Параметры:
//  ВидАттракциона - СправочникСсылка.ВидыАттракционов - вид аттракциона (необязательный)
//  ДатаПосещения - Дата - дата посещения (необязательный)
//  НаДату - Дата - дата, на которую получить данные (по умолчанию текущая дата)
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с активными бронированиями
//
Функция ПолучитьСписокАктивныхБронирований(ВидАттракциона = Неопределено, ДатаПосещения = Неопределено, НаДату = Неопределено) Экспорт
	
	Если НаДату = Неопределено Тогда
		НаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БронированиеПосещенийОстатки.БронированиеБилетов КАК БронированиеБилетов,
	|	БронированиеПосещенийОстатки.ВидАттракциона КАК ВидАттракциона,
	|	БронированиеПосещенийОстатки.ДатаПосещения КАК ДатаПосещения,
	|	БронированиеПосещенийОстатки.КоличествоПосещенийОстаток КАК КоличествоПосещений,
	|	БронированиеБилетов.СтатусБрони КАК СтатусБрони,
	|	БронированиеБилетов.ВремяИстечения КАК ВремяИстечения,
	|	БронированиеБилетов.Клиент КАК Клиент
	|ИЗ
	|	РегистрНакопления.БронированиеПосещений.Остатки(
	|		&НаДату,
	|		&УсловиеОтбора) КАК БронированиеПосещенийОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.БронированиеБилетов КАК БронированиеБилетов
	|		ПО БронированиеПосещенийОстатки.БронированиеБилетов = БронированиеБилетов.Ссылка
	|ГДЕ
	|	БронированиеПосещенийОстатки.КоличествоПосещенийОстаток > 0
	|	И БронированиеБилетов.СтатусБрони = ЗНАЧЕНИЕ(Перечисление.СтатусыБронирования.Активная)
	|
	|УПОРЯДОЧИТЬ ПО
	|	БронированиеБилетов.ВремяИстечения";
	
	// Формируем условие отбора
	УсловиеОтбора = "";
	
	Если ВидАттракциона <> Неопределено Тогда
		УсловиеОтбора = УсловиеОтбора + "ВидАттракциона = &ВидАттракциона";
		Запрос.УстановитьПараметр("ВидАттракциона", ВидАттракциона);
	КонецЕсли;
	
	Если ДатаПосещения <> Неопределено Тогда
		Если НЕ ПустаяСтрока(УсловиеОтбора) Тогда
			УсловиеОтбора = УсловиеОтбора + " И ";
		КонецЕсли;
		УсловиеОтбора = УсловиеОтбора + "ДатаПосещения = &ДатаПосещения";
		Запрос.УстановитьПараметр("ДатаПосещения", ДатаПосещения);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НаДату", НаДату);
	Запрос.УстановитьПараметр("УсловиеОтбора", УсловиеОтбора);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Получить истекшие бронирования
//
// Параметры:
//  НаДату - Дата - дата, на которую проверить истечение (по умолчанию текущая дата)
//
// Возвращаемое значение:
//  Массив - массив ссылок на истекшие документы БронированиеБилетов
//
Функция ПолучитьИстекшиеБронирования(НаДату = Неопределено) Экспорт
	
	Если НаДату = Неопределено Тогда
		НаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БронированиеПосещенийОстатки.БронированиеБилетов КАК БронированиеБилетов
	|ИЗ
	|	РегистрНакопления.БронированиеПосещений.Остатки(&НаДату, ) КАК БронированиеПосещенийОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.БронированиеБилетов КАК БронированиеБилетов
	|		ПО БронированиеПосещенийОстатки.БронированиеБилетов = БронированиеБилетов.Ссылка
	|ГДЕ
	|	БронированиеПосещенийОстатки.КоличествоПосещенийОстаток > 0
	|	И БронированиеБилетов.СтатусБрони = ЗНАЧЕНИЕ(Перечисление.СтатусыБронирования.Активная)
	|	И БронированиеБилетов.ВремяИстечения <= &НаДату";
	
	Запрос.УстановитьПараметр("НаДату", НаДату);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивИстекшихБронирований = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивИстекшихБронирований.Добавить(Выборка.БронированиеБилетов);
	КонецЦикла;
	
	Возврат МассивИстекшихБронирований;
	
КонецФункции

// Проверить доступность для бронирования
//
// Параметры:
//  ВидАттракциона - СправочникСсылка.ВидыАттракционов - вид аттракциона
//  ДатаПосещения - Дата - дата посещения
//  КоличествоКБронированию - Число - количество к бронированию
//  МаксимальнаяВместимость - Число - максимальная вместимость аттракциона
//
// Возвращаемое значение:
//  Структура - результат проверки:
//    * Доступно - Булево - доступность для бронирования
//    * ТекущиеБронирования - Число - текущее количество бронирований
//    * ДоступноКБронированию - Число - доступно к бронированию
//    * ОписаниеОшибки - Строка - описание ошибки (если не доступно)
//
Функция ПроверитьДоступностьДляБронирования(ВидАттракциона, ДатаПосещения, КоличествоКБронированию, МаксимальнаяВместимость = 0) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Доступно", Истина);
	Результат.Вставить("ТекущиеБронирования", 0);
	Результат.Вставить("ДоступноКБронированию", 0);
	Результат.Вставить("ОписаниеОшибки", "");
	
	// Получаем текущие бронирования
	ТекущиеБронирования = ПолучитьОстаткиБронирований(ВидАттракциона, ДатаПосещения);
	Результат.ТекущиеБронирования = ТекущиеБронирования;
	
	// Если максимальная вместимость не ограничена (0), то всегда доступно
	Если МаксимальнаяВместимость <= 0 Тогда
		Результат.ДоступноКБронированию = 999999; // Условно неограниченное количество
		Возврат Результат;
	КонецЕсли;
	
	// Рассчитываем доступное количество
	ДоступноКБронированию = МаксимальнаяВместимость - ТекущиеБронирования;
	Результат.ДоступноКБронированию = ДоступноКБронированию;
	
	// Проверяем доступность
	Если ДоступноКБронированию < КоличествоКБронированию Тогда
		Результат.Доступно = Ложь;
		Результат.ОписаниеОшибки = СтрШаблон(
			"Недостаточно свободных мест. Запрошено: %1, доступно: %2", 
			КоличествоКБронированию, ДоступноКБронированию);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
