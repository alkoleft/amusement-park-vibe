//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2025 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Тогда

#Область ОписаниеПеременных

//@skip-check object-module-export-variable
Перем Fields Экспорт; // BSLLS:ExportVariables-off

// ТаблицаЗначений - Хранит данные эмулируемого объекта
Перем Данные;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// BSLLS:NumberOfParams-off
// BSLLS:NumberOfOptionalParams-off

// Добавляет запись в набор данных. Это данные, которые могут быть прочитаны через интерфейс RecordSet.
// Порядок значений соответствует порядку колонок, заданному при инициализации.
// 
// Параметры:
//  Значение1 - Произвольный - Значение для первой колонки.
//  Значение2 - Произвольный - (необязательный) Значение для второй колонки.
//  Значение3 - Произвольный - (необязательный) Значение для третьей колонки.
//  Значение4 - Произвольный - (необязательный) Значение для четвертой колонки.
//  Значение5 - Произвольный - (необязательный) Значение для пятой колонки.
//  Значение6 - Произвольный - (необязательный) Значение для шестой колонки.
//  Значение7 - Произвольный - (необязательный) Значение для седьмой колонки.
//  Значение8 - Произвольный - (необязательный) Значение для восьмой колонки.
//  Значение9 - Произвольный - (необязательный) Значение для девятой колонки.
//  Значение10 - Произвольный - (необязательный) Значение для десятой колонки.
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТRecordSet - Текущий объект эмулятора RecordSet для цепочки вызовов.
//
// Пример:
//  RecordSet = ЮТест.Данные().ADORecordSet();
//  RecordSet.Инициализировать("ID,Наименование,Цена");
//  RecordSet.Добавить(1, "Товар1", 100.50);
//  RecordSet.Добавить(2, "Товар2", 250.00);
//@skip-check method-too-many-params
Функция Добавить(Значение1,
				 Значение2 = Неопределено,
				 Значение3 = Неопределено,
				 Значение4 = Неопределено,
				 Значение5 = Неопределено,
				 Значение6 = Неопределено,
				 Значение7 = Неопределено,
				 Значение8 = Неопределено,
				 Значение9 = Неопределено,
				 Значение10 = Неопределено) Экспорт
	
	КоличествоПараметров = 10;
	Значения = Новый Массив(КоличествоПараметров);
	Значения[0] = Значение1;
	Значения[1] = Значение2;
	Значения[2] = Значение3;
	Значения[3] = Значение4;
	Значения[4] = Значение5;
	Значения[5] = Значение6;
	Значения[6] = Значение7;
	Значения[7] = Значение8;
	Значения[8] = Значение9;
	Значения[9] = Значение10;
		
	Строка = Данные.Добавить();
	
	Для Инд = 0 По Данные.Колонки.Количество() - 1 Цикл
		Строка[Инд] = Значения[Инд];
	КонецЦикла;
	
	УстановитьФлаги();
	
	Возврат ЭтотОбъект;
	
КонецФункции
// BSLLS:NumberOfParams-on
// BSLLS:NumberOfOptionalParams-on

// Переход к первой строке набора.
// Устанавливает текущую позицию на первую запись в наборе данных.
//
// Пример:
//  RecordSet = ЮТест.Данные().ADORecordSet();
//  RecordSet.Инициализировать("Поле1").Добавить("А").Добавить("Б");
//  RecordSet.MoveFirst(); // Переход на строку со значением "А"
//  Пока НЕ RecordSet.EOF() Цикл
//    Сообщить(RecordSet.Fields(0).Value);
//    RecordSet.MoveNext();
//  КонецЦикла;
Процедура MoveFirst() Экспорт
	
	AbsolutePosition = 0;
	УстановитьФлаги();
	
КонецПроцедуры

// Переход к следующей строке набора.
// Смещает текущую позицию на следующую запись в наборе данных.
//
// Пример:
//  RecordSet = ЮТест.Данные().ADORecordSet();
//  RecordSet.Инициализировать("Буква").Добавить("А").Добавить("Б").Добавить("В");
//  RecordSet.MoveFirst();
//  RecordSet.MoveNext(); // Текущая запись "Б"
Процедура MoveNext() Экспорт
	
	AbsolutePosition = AbsolutePosition + 1;
	УстановитьФлаги();
	
КонецПроцедуры

// Закрытие набора и очистка данных.
// Освобождает ресурсы, связанные с набором данных, и очищает его содержимое.
//
// Пример:
//  RecordSet = ЮТест.Данные().ADORecordSet();
//  RecordSet.Инициализировать("Данные").Добавить(123);
//  // ... работа с RecordSet ...
//  RecordSet.Close(); // Данные очищены, EOF и BOF будут Истина
Процедура Close() Экспорт
	
	Данные = Неопределено;
	УстановитьФлаги();
	ОбновитьFields();
	
КонецПроцедуры

// Возвращает информацию о колонке набора для текущей записи.
// 
// Параметры:
//  ИндексПоля - Число - Индекс колонки (начиная с 0).
// 
// Возвращаемое значение:
//  Структура - Информация о колонке:
//    * Name - Строка - Имя колонки.
//    * Value - Произвольный - Значение колонки для текущей строки набора.
//
// Пример:
//  RecordSet = ЮТест.Данные().ADORecordSet();
//  RecordSet.Инициализировать("ID,Наименование").Добавить(1, "Продукт А");
//  RecordSet.MoveFirst();
//  ИнформацияОПервойКолонке = RecordSet.Fields(0); // {Name = "ID", Value = 1}
//  ИнформацияОВторойКолонке = RecordSet.Fields(1); // {Name = "Наименование", Value = "Продукт А"}
Функция Fields(ИндексПоля) Экспорт
	
	Если Данные <> Неопределено И Данные.Количество() <> 0 Тогда
		Значение = Данные[AbsolutePosition][ИндексПоля];
	Иначе
		Значение = Неопределено;
	КонецЕсли;
	
	//@skip-check constructor-function-return-section
	Возврат Новый Структура("Name, Value", Данные.Колонки[ИндексПоля].Имя, Значение);
	
КонецФункции

// Возвращает признак, что все записи набора прочитаны (достигнут конец набора).
// 
// Возвращаемое значение:
//  Булево - Истина, если достигнут конец набора данных (курсор после последней записи), иначе Ложь.
//
// Пример:
//  RecordSet = ЮТест.Данные().ADORecordSet();
//  RecordSet.Инициализировать("Колонка1").Добавить("Значение1");
//  RecordSet.MoveFirst();
//  Пока НЕ RecordSet.EOF() Цикл
//    // Обработка записи
//    RecordSet.MoveNext();
//  КонецЦикла; // Цикл завершится, когда RecordSet.EOF() станет Истина
Функция EOF() Экспорт
	
	Возврат EOF;
	
КонецФункции

// Возвращает признак, который показывает, находится ли текущее положение записи курсора перед первой записью.
// 
// Возвращаемое значение:
//  Булево - Истина, если текущая позиция курсора находится перед первой записью набора, иначе Ложь.
//
// Пример:
//  RecordSet = ЮТест.Данные().ADORecordSet();
//  RecordSet.Инициализировать("Тест");
//  // RecordSet.BOF() здесь будет Истина, если набор пуст, или если MoveFirst() еще не вызывался после инициализации непустого набора.
//  Если RecordSet.BOF() И RecordSet.EOF() Тогда
//    Сообщить("Набор данных пуст.");
//  КонецЕсли;
Функция BOF() Экспорт
	
	Возврат BOF;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Инициализирует эмулятор RecordSet. Устанавливает информацию о колонках и служебные данные.
// Этот метод должен быть вызван перед добавлением данных в набор.
// 
// Параметры:
//  Колонки - Строка - Имена колонок, разделенные запятой (например, "Код,Наименование,Сумма").
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТRecordSet - Текущий объект эмулятора RecordSet для цепочки вызовов.
//
// Пример:
//  RecordSet = ЮТест.Данные().ADORecordSet();
//  RecordSet.Инициализировать("Артикул,КоличествоНаСкладе");
//  RecordSet.Добавить("Т001", 10).Добавить("Т002", 5);
Функция Инициализировать(Знач Колонки) Экспорт
	
	Данные = Новый ТаблицаЗначений();
	
	Колонки = ЮТСтроки.РазделитьСтроку(Колонки, ",");
	
	Для Каждого Колонка Из Колонки Цикл
		Данные.Колонки.Добавить(Колонка);
	КонецЦикла;
	
	ОбновитьFields();
	MoveFirst();
	
	Возврат ЭтотОбъект;
	
КонецФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьФлаги()
	
	EOF = Данные = Неопределено ИЛИ Данные.Количество() <= AbsolutePosition;
	BOF = Данные = Неопределено ИЛИ Данные.Количество() = 0 ИЛИ AbsolutePosition < 0;
	RecordCount = ?(Данные = Неопределено, 0, Данные.Количество());
	
КонецПроцедуры

Процедура ОбновитьFields()
	
	Количество = ?(Данные = Неопределено, 0, Данные.Колонки.Количество());
	Fields = Новый Структура("Count", Количество);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
