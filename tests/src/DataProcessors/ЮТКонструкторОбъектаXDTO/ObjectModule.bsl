//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2025 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Тогда

#Область ОписаниеПеременных

Перем ТекущийОбъект;
Перем ТекущийТип;
Перем СтекОбъектов;
Перем Фабрика;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Устанавливает значение свойства объекта XDTO.
//
// Параметры:
//  ИмяРеквизита - Строка - Имя свойства объекта XDTO.
//  Значение - Произвольный - Значение свойства объекта XDTO.
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторОбъектаXDTO - Текущий конструктор для цепочки вызовов.
//
// Пример:
//  Конструктор.Установить("Имя", "Тест");
//
Функция Установить(ИмяРеквизита, Значение) Экспорт
	
	ТекущийОбъект[ИмяРеквизита] = Значение;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает значения свойств объекта XDTO.
//
// Параметры:
//  ЗначенияРеквизитов - Структура - Структура, где ключ - имя свойства, значение - значение свойства.
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторОбъектаXDTO - Текущий конструктор для цепочки вызовов.
//
// Пример:
//  Значения = Новый Структура("Имя, Возраст", "Тест", 18);
//  Конструктор.УстановитьРеквизиты(Значения);
//
Функция УстановитьРеквизиты(ЗначенияРеквизитов) Экспорт
	
	Для Каждого ЗначениеРеквизита Из ЗначенияРеквизитов Цикл
		ТекущийОбъект[ЗначениеРеквизита.Ключ] = ЗначениеРеквизита.Значение;
	КонецЦикла;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает фиктивное значение для указанного свойства объекта XDTO.
//
// Особенности генерации фиктивных значений:
// * Для примитивных типов генерируется случайное значение.
// * Для объектных типов создается новый объект XDTO и рекурсивно заполняется фиктивными значениями.
// * Для коллекций генерируется случайное количество элементов (на основании типа коллекции)
//   и каждый элемент заполняется фиктивными значениями.
//
// Параметры:
//  ИмяРеквизита - Строка - Имя свойства объекта XDTO.
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторОбъектаXDTO - Текущий конструктор для цепочки вызовов.
//
// Пример:
//  Конструктор.Фикция("Адрес");
//
Функция Фикция(ИмяРеквизита) Экспорт
	
	Свойство = Свойство(ИмяРеквизита);
	Значение = СлучайноеЗначениеСвойства(Свойство, 0);
	Установить(ИмяРеквизита, Значение);
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает фиктивные значения для указанных свойств объекта XDTO.
//
// Особенности генерации фиктивных значений см. ЮТКонструкторОбъектаXDTO.Фикция
//
// Параметры:
//  ИменаРеквизитов - Строка - Имена свойств объекта XDTO, разделенные запятыми.
//                  - Массив из Строка - Массив имен свойств объекта XDTO.
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторОбъектаXDTO - Текущий конструктор для цепочки вызовов.
//
// Пример:
//  Конструктор.ФикцияРеквизитов("Имя,Фамилия,Возраст");
//  Конструктор.ФикцияРеквизитов(Новый Массив().Добавить("Телефон").Добавить("Email"));
//
Функция ФикцияРеквизитов(ИменаРеквизитов) Экспорт
	
	Если ТипЗнч(ИменаРеквизитов) = Тип("Строка") Тогда
		КоллекцияИменРеквизитов = ЮТСтроки.РазделитьСтроку(ИменаРеквизитов, ",");
	Иначе
		КоллекцияИменРеквизитов = ИменаРеквизитов;
	КонецЕсли;
	
	Для Каждого ИмяРеквизита Из КоллекцияИменРеквизитов Цикл
		Фикция(ИмяРеквизита);
	КонецЦикла;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Заполняет обязательные свойства объекта XDTO фиктивными значениями.
//
// Обязательные свойства определяются на основании метаданных XDTO (свойство.ВозможноПустое = Ложь).
// Особенности генерации фиктивных значений см. ЮТКонструкторОбъектаXDTO.Фикция
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторОбъектаXDTO - Текущий конструктор для цепочки вызовов.
//
// Пример:
//  Конструктор.ФикцияОбязательныхПолей();
//
Функция ФикцияОбязательныхПолей() Экспорт
	
	Для Каждого Свойство Из ТекущийТип.Свойства Цикл
		
		Если НЕ Свойство.ВозможноПустое И НеЗаполнено(Свойство, ТекущийОбъект[Свойство.Имя]) Тогда
			УстановитьСлучайноеЗначениеСвойства(ТекущийОбъект, Свойство, 0);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Заполняет все незаполненные свойства объекта XDTO фиктивными значениями.
//
// Особенности генерации фиктивных значений см. ЮТКонструкторОбъектаXDTO.Фикция
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторОбъектаXDTO - Текущий конструктор для цепочки вызовов.
//
// Пример:
//  Конструктор.ФикцияНезаполненных();
//
Функция ФикцияНезаполненных() Экспорт
	
	Для Каждого Свойство Из ТекущийТип.Свойства Цикл
		
		Если НеЗаполнено(Свойство, ТекущийОбъект[Свойство.Имя]) Тогда
			УстановитьСлучайноеЗначениеСвойства(ТекущийОбъект, Свойство, 0);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Заполняет неустановленные реквизиты объекта фиктивными значениями, исключая указанные
// 
// На основании типа объекта определяются обязательные поля.
// Для них генерируются и устанавливаются фиктивные значение.
// 
// * Для примитивных значение генерируется случайное значение
// * Для объектных типов создается новый объект
// * Для коллекций - генерируется случайно количество случайных элементов (на основании типа)
// 
// Параметры:
//  ИменаИсключений - Строка - Имена исключаемых реквизитов объекта или табличной части разделенные запятыми
//                  - Массив из Строка - Имена исключаемых реквизитов объекта или табличной части
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторОбъектаXDTO - Конструктор
Функция ФикцияНезаполненныхИсключая(ИменаИсключений) Экспорт
	
	// Создаем структуру для регистронезависимого поиска
	СтруктураИсключений = Новый Структура;
	
	Если ТипЗнч(ИменаИсключений) = Тип("Строка") Тогда
		КоллекцияИменИсключений = ЮТСтроки.РазделитьСтроку(ИменаИсключений, ",");
	Иначе
		КоллекцияИменИсключений = ИменаИсключений;
	КонецЕсли;
	
	// Заполняем структуру исключений
	Для Каждого ИмяИсключения Из КоллекцияИменИсключений Цикл
		ИмяИсключения = СокрЛП(ИмяИсключения);
		СтруктураИсключений.Вставить(ВРег(ИмяИсключения), Истина);
	КонецЦикла;
	
	Для Каждого Свойство Из ТекущийТип.Свойства Цикл
		
		Если СтруктураИсключений.Свойство(ВРег(Свойство.Имя)) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НеЗаполнено(Свойство, ТекущийОбъект[Свойство.Имя]) Тогда
			УстановитьСлучайноеЗначениеСвойства(ТекущийОбъект, Свойство, 0);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Возвращает корневой (основной) сконструированный объект XDTO.
//
// Возвращаемое значение:
//  ОбъектXDTO - Сконструированный объект XDTO.
//
// Пример:
//  ОбъектДляТеста = Конструктор.ДанныеОбъекта();
//
Функция ДанныеОбъекта() Экспорт
	
	Возврат СтекОбъектов[0];
	
КонецФункции

// Добавляет новый объект XDTO в свойство-коллекцию текущего объекта XDTO
// и переключает контекст конструктора на добавленный объект.
//
// Параметры:
//  ИмяРеквизита - Строка - Имя свойства-коллекции, в которую будет добавлен новый объект.
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторОбъектаXDTO - Текущий конструктор для цепочки вызовов.
//                                        Контекст конструктора переключен на добавленный объект.
//
// Пример:
//  Конструктор
//      .ДобавитьНовый("Телефоны") // Добавляем новый телефон в коллекцию "Телефоны"
//          .Установить("Номер", "123456") // Устанавливаем номер для добавленного телефона
//      .ПерейтиКВладельцу() // Возвращаемся к родительскому объекту
//      .ДобавитьНовый("Телефоны") // Добавляем еще один телефон
//          .Фикция("Номер"); // Заполняем номер фиктивным значением
//
Функция ДобавитьНовый(ИмяРеквизита) Экспорт
	
	Свойство = Свойство(ИмяРеквизита);
	
	Если НЕ ЭтоТипОбъектаXDTO(Свойство.Тип) Тогда
		ВызватьИсключение СтрШаблон("Метод применяется только для свойств-объектов. Реквизит: %1 имеет тип %2", ИмяРеквизита, Свойство.Тип);
	КонецЕсли;
	
	Коллекция = ТекущийОбъект[Свойство.Имя];
	ДобавитьНовыйОбъектВСтек(Свойство.Тип);
	
	Коллекция.Добавить(ТекущийОбъект);
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Переключает контекст конструктора на родительский объект XDTO в стеке объектов.
// Используется после вызова метода ДобавитьНовый для возврата к конструированию родительского объекта.
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторОбъектаXDTO - Текущий конструктор для цепочки вызовов.
//                                        Контекст конструктора переключен на родительский объект.
//
// Пример:
//  Конструктор
//      .ДобавитьНовый("Документы")
//          .Установить("Серия", "AB")
//          .Установить("Номер", "123456")
//      .ПерейтиКВладельцу() // Контекст переключен на объект, у которого есть свойство "Документы"
//      .Установить("Фамилия", "Иванов");
//
Функция ПерейтиКВладельцу() Экспорт
	
	УдалитьПоследнийИзСтека();
	
	Возврат ЭтотОбъект;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Инициализирует конструктор для указанного типа объекта XDTO.
// Создает корневой объект XDTO и помещает его в стек.
//
// Параметры:
//  ИмяТипаОбъекта - Строка - Имя типа объекта XDTO.
//  ПространствоИмен - Строка - URI пространства имен типа объекта XDTO.
//  ФабрикаОбъектов - ФабрикаXDTO - (необязательный) Фабрика XDTO для создания объектов.
//                               По умолчанию используется глобальная ФабрикаXDTO.
//
// Пример:
//  Конструктор = ЮТест.Данные().КонструкторОбъектаXDTO("Товар", "http://example.com/namespace", Новый ФабрикаXDTO());
//
Процедура Инициализировать(ИмяТипаОбъекта, ПространствоИмен, ФабрикаОбъектов = Неопределено) Экспорт
	
	Если ФабрикаОбъектов = Неопределено Тогда
		Фабрика = ФабрикаXDTO;
	Иначе
		Фабрика = ФабрикаОбъектов;
	КонецЕсли;
	
	СтекОбъектов = Новый Массив();
	
	ТипОбъекта = Фабрика.Тип(ПространствоИмен, ИмяТипаОбъекта);
	Если ТипОбъекта = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Неизвестный тип `%1`; пространство имен: `%2`", ИмяТипаОбъекта, ПространствоИмен);
	КонецЕсли;
	
	ДобавитьНовыйОбъектВСтек(ТипОбъекта);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция Свойство(ИмяСвойства)
	
	Свойство = ТекущийТип.Свойства.Получить(ИмяСвойства);
	
	Если Свойство = Неопределено Тогда
		Сообщение = СтрШаблон("Тип XDTO `%1` не содержит свойство `%2`", ТекущийТип.Имя, ИмяСвойства);
		ВызватьИсключение Сообщение;
	КонецЕсли;
	
	Возврат Свойство;
	
КонецФункции

Процедура ДобавитьНовыйОбъектВСтек(Тип)
	
	Объект = НовыйОбъект(Тип);
	СтекОбъектов.Добавить(Объект);
	ТекущийОбъект = Объект;
	ТекущийТип = Тип;
	
КонецПроцедуры

Процедура УдалитьПоследнийИзСтека()
	
	ИндексПоследнего = СтекОбъектов.ВГраница();
	
	ТекущийОбъект = СтекОбъектов[ИндексПоследнего - 1];
	ТекущийТип = ТекущийОбъект.Тип();
	
	СтекОбъектов.Удалить(ИндексПоследнего);
	
КонецПроцедуры

Функция СлучайноеЗначениеСвойства(Свойство, Уровень = 0)
	
	ТипСвойства = Свойство.Тип;

	Если ТипЗнч(ТипСвойства) = Тип("ТипЗначенияXDTO") Тогда
		Возврат СлучайноеЗначениеПримитива(Свойство);
	ИначеЕсли Уровень < 3 Тогда
		Возврат СлучайноеЗначениеОбъекта(Свойство, Уровень + 1);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СлучайноеЗначениеПримитива(Свойство)
	
	Тип = Свойство.Тип;
	
	Если Тип.Имя = "string" И СтрНайти(НРег(Свойство.Имя), "uid") Тогда
		Возврат ЮТест.Данные().УникальнаяСтрока();
	ИначеЕсли Тип.Имя = "string" Тогда
		Возврат ЮТест.Данные().СлучайнаяСтрока();
	ИначеЕсли Тип.Имя = "boolean" Тогда
		Возврат ЮТест.Данные().СлучайноеБулево();
	ИначеЕсли Тип.Имя = "integer" Тогда
		Возврат ЮТест.Данные().СлучайноеЧисло();
	ИначеЕсли Тип.Имя = "decimal" Тогда
		Возврат ЮТест.Данные().СлучайноеЧисло(, , 3);
	ИначеЕсли Тип.Имя = "time" Тогда
		Возврат ЮТест.Данные().СлучайноеВремя();
	ИначеЕсли Тип.Имя = "date" Тогда
		Возврат НачалоДня(ЮТест.Данные().СлучайнаяДата());
	ИначеЕсли Тип.Имя = "dateTime" Тогда
		Возврат ЮТест.Данные().СлучайнаяДата();
	ИначеЕсли Тип.БазовыйТип.Имя = "AnyRef" Или Тип.БазовыйТип.Имя = "AnyDBRef" Тогда
		Возврат ЮТест.Данные().УникальнаяСтрока();
	ИначеЕсли ЗначениеЗаполнено(Тип.Фасеты) И Тип.Фасеты[0].Вид = ВидФасетаXDTO.Перечисление Тогда
		Возврат СлучайноеЗначениеПеречисления(Тип);
	Иначе
		ВызватьИсключение "Неподдерживаемый тип примитива XDTO: " + Тип;
	КонецЕсли;
	
КонецФункции

Функция СлучайноеЗначениеОбъекта(Свойство, Уровень)
	
	Пакет = НовыйОбъект(Свойство.Тип);
	ЗаполнитьПакетСлучайнымиЗначениями(Пакет, Уровень);
	
	Возврат Пакет;
	
КонецФункции

Процедура ЗаполнитьПакетСлучайнымиЗначениями(Пакет, Уровень = 0)
	
	Тип = Пакет.Тип();
	Для Каждого Свойство Из Тип.Свойства Цикл
		
		Если НеЗаполнено(Свойство, Пакет[Свойство.Имя]) Тогда
			УстановитьСлучайноеЗначениеСвойства(Пакет, Свойство, Уровень);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСлучайноеЗначениеСвойства(Пакет, Свойство, Уровень)
	
	ЭтоСписок = ЭтоСписок(Свойство);
	
	Если ЭтоСписок Тогда
		СписокСлучайныхЗначений(Пакет[Свойство.Имя], Свойство, Уровень);
	Иначе
		Пакет[Свойство.Имя] = СлучайноеЗначениеСвойства(Свойство, Уровень);
	КонецЕсли;
	
КонецПроцедуры

Функция НеЗаполнено(Свойство, Значение)
	
	ЭтоСписок = ЭтоСписок(Свойство);
	
	Если ЭтоСписок И Значение.Количество() Тогда
		Возврат Значение.Количество() = 0;
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Значение);
	КонецЕсли;
	
КонецФункции

Функция ЭтоСписок(Свойство)
	
	Возврат Свойство.ВерхняяГраница = -1 ИЛИ Свойство.ВерхняяГраница > 1;
	
КонецФункции

Процедура СписокСлучайныхЗначений(Список, Свойство, Уровень)
	
	ВерхняяГраница = Свойство.НижняяГраница + 10;
	
	Если Свойство.ВерхняяГраница > 0 Тогда
		ВерхняяГраница = Мин(ВерхняяГраница, Свойство.ВерхняяГраница); // Для больших значений верхней границы
	КонецЕсли;
	
	Количество = ЮТест.Данные().СлучайноеЧисло(Свойство.НижняяГраница, ВерхняяГраница);
	
	Для Инд = 0 По Количество Цикл
		Значение = СлучайноеЗначениеСвойства(Свойство, Уровень);
		Список.Добавить(Значение);
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйОбъект(Тип)
	
	Возврат Фабрика.Создать(Тип);
	
КонецФункции

Функция ЭтоТипОбъектаXDTO(ТипСвойства)
	
	Возврат ТипЗнч(ТипСвойства) = Тип("ТипОбъектаXDTO");
	
КонецФункции

Функция СлучайноеЗначениеПеречисления(Тип)
	
	Значения = Новый Массив();
	
	Для Каждого Фасет Из Тип.Фасеты Цикл
		Если Фасет.Вид = ВидФасетаXDTO.Перечисление Тогда
			Значения.Добавить(Фасет.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЮТест.Данные().СлучайноеЗначениеИзСписка(Значения);
	
КонецФункции

#КонецОбласти

#КонецЕсли
