//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2025 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Если Сервер Тогда

#Область ОписаниеПеременных

//@skip-check object-module-export-variable
Перем HTTPМетод Экспорт;
//@skip-check object-module-export-variable
Перем БазовыйURL Экспорт;
//@skip-check object-module-export-variable
Перем Заголовки Экспорт;
//@skip-check object-module-export-variable
Перем ОтносительныйURL Экспорт;
//@skip-check object-module-export-variable
Перем ПараметрыURL Экспорт;
//@skip-check object-module-export-variable
Перем ПараметрыЗапроса Экспорт;

Перем Тело;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Получает тело HTTP-запроса в виде двоичных данных.
// Если тело не установлено, возвращает пустые двоичные данные.
// Если тело установлено как строка, оно будет сконвертировано в двоичные данные.
//
// Возвращаемое значение:
//   ДвоичныеДанные - Тело HTTP-запроса.
//
// Пример:
//   // Создание мок-объекта HTTP запроса
//   Запрос = ЮТест.Данные().HTTPСервисЗапрос();
//   // Предполагается, что тело уже установлено, например:
//   // Запрос.УстановитьТелоКакСтроку("Пример тела");
//   ДвоичныеДанныеТела = Запрос.ПолучитьТелоКакДвоичныеДанные();
//
Функция ПолучитьТелоКакДвоичныеДанные() Экспорт
	
	ТипТела = ТипЗнч(Тело);
	
	Если Тело = Неопределено Тогда
		Возврат ПолучитьДвоичныеДанныеИзBase64Строки("");
	ИначеЕсли ТипТела = Тип("ДвоичныеДанные") Тогда
		Возврат Тело;
	ИначеЕсли ТипТела = Тип("Строка") Тогда
		Возврат ПолучитьДвоичныеДанныеИзСтроки(Тело);
	КонецЕсли;
	
КонецФункции

// Получает тело HTTP-запроса в виде потока.
// Является оберткой над методом ПолучитьТелоКакДвоичныеДанные().ОткрытьПотокДляЧтения().
//
// Возвращаемое значение:
//   Поток - Поток для чтения тела HTTP-запроса.
//
// Пример:
//   // Создание мок-объекта HTTP запроса
//   Запрос = ЮТест.Данные().HTTPСервисЗапрос();
//   // Предполагается, что тело уже установлено, например:
//   // Запрос.УстановитьТелоКакДвоичныеДанные(ПолучитьДвоичныеДанныеИзСтроки("Тест"));
//   ПотокТела = Запрос.ПолучитьТелоКакПоток();
//
Функция ПолучитьТелоКакПоток() Экспорт
	
	Возврат ПолучитьТелоКакДвоичныеДанные().ОткрытьПотокДляЧтения();
	
КонецФункции

// Получает тело HTTP-запроса в виде строки.
// Если тело не установлено, возвращает пустую строку.
// Если тело установлено как двоичные данные, оно будет сконвертировано в строку с указанной или системной кодировкой.
//
// Параметры:
//   Кодировка - КодировкаТекста, Строка - Кодировка, используемая для преобразования двоичных данных в строку.
//                                         Необязательный. По умолчанию используется системная кодировка.
//
// Возвращаемое значение:
//   Строка - Тело HTTP-запроса.
//
// Пример:
//   // Создание мок-объекта HTTP запроса
//   Запрос = ЮТест.Данные().HTTPСервисЗапрос();
//   // Предполагается, что тело уже установлено, например:
//   // Запрос.УстановитьТелоКакДвоичныеДанные(ПолучитьДвоичныеДанныеИзСтроки("Тест"));
//   СтрокаТела = Запрос.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
//
Функция ПолучитьТелоКакСтроку(Кодировка = Неопределено) Экспорт
	
	ТипТела = ТипЗнч(Тело);
	
	Если Тело = Неопределено Тогда
		Возврат "";
	ИначеЕсли ТипТела = Тип("ДвоичныеДанные") Тогда
		Возврат ПолучитьСтрокуИзДвоичныхДанных(Тело, Кодировка);
	ИначеЕсли ТипТела = Тип("Строка") Тогда
		Возврат Тело;
	КонецЕсли;
	
КонецФункции

// Устанавливает тело HTTP-запроса из двоичных данных.
//
// Параметры:
//   Данные - ДвоичныеДанные - Двоичные данные для установки в качестве тела запроса.
//
// Возвращаемое значение:
//   ОбработкаОбъект.ЮТHTTPСервисЗапрос - Текущий объект запроса для возможности выстраивания цепочки вызовов.
//
// Пример:
//   Запрос = ЮТест.Данные().HTTPСервисЗапрос();
//   ДвоичныеДанныеФайла = ПолучитьДвоичныеДанныеИзСтроки("Тестовые данные", КодировкаТекста.UTF8);
//   Запрос.УстановитьТелоКакДвоичныеДанные(ДвоичныеДанныеФайла);
//
Функция УстановитьТелоКакДвоичныеДанные(Данные) Экспорт
	
	Тело = Данные;
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает тело HTTP-запроса из строки.
//
// Параметры:
//   Строка - Строка - Строковое значение для установки в качестве тела запроса.
//
// Возвращаемое значение:
//   ОбработкаОбъект.ЮТHTTPСервисЗапрос - Текущий объект запроса для возможности выстраивания цепочки вызовов.
//
// Пример:
//   Запрос = ЮТест.Данные().HTTPСервисЗапрос();
//   Запрос.УстановитьТелоКакСтроку("Это тело запроса");
//
Функция УстановитьТелоКакСтроку(Строка) Экспорт
	
	Тело = Строка;
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает тело HTTP-запроса как строку JSON.
// Сериализует переданные данные в строку JSON и устанавливает ее в качестве тела запроса.
//
// Параметры:
//   Данные - Произвольный - Данные для сериализации в JSON.
//
// Возвращаемое значение:
//   ОбработкаОбъект.ЮТHTTPСервисЗапрос - Текущий объект запроса для возможности выстраивания цепочки вызовов.
//
// Пример:
//   Запрос = ЮТест.Данные().HTTPСервисЗапрос();
//   СтруктураДанных = Новый Структура("Поле1, Поле2", "Значение1", 123);
//   Запрос.УстановитьТелоКакСтрокуJSON(СтруктураДанных);
//
Функция УстановитьТелоКакСтрокуJSON(Данные) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные);
	
	Тело = ЗаписьJSON.Закрыть();
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Добавляет заголовок HTTP-запроса.
// Если заголовок с таким именем уже существует, его значение будет перезаписано.
//
// Параметры:
//   ИмяЗаголовка - Строка - Имя HTTP-заголовка.
//   Значение - Строка - Значение HTTP-заголовка.
//
// Возвращаемое значение:
//   ОбработкаОбъект.ЮТHTTPСервисЗапрос - Текущий объект запроса для возможности выстраивания цепочки вызовов.
//
// Пример:
//   Запрос = ЮТест.Данные().HTTPСервисЗапрос();
//   Запрос.ДобавитьЗаголовок("Content-Type", "application/json");
//
Функция ДобавитьЗаголовок(ИмяЗаголовка, Значение) Экспорт
	
	Заголовки.Вставить(ИмяЗаголовка, Значение);
	Возврат ЭтотОбъект;
	
КонецФункции

// Добавляет параметр запроса (query parameter).
// Параметры запроса обычно используются в URL после знака вопроса (?).
// Если параметр с таким именем уже существует, его значение будет перезаписано.
//
// Параметры:
//   ИмяПараметра - Строка - Имя параметра запроса.
//   Значение - Строка - Значение параметра запроса.
//
// Возвращаемое значение:
//   ОбработкаОбъект.ЮТHTTPСервисЗапрос - Текущий объект запроса для возможности выстраивания цепочки вызовов.
//
// Пример:
//   Запрос = ЮТест.Данные().HTTPСервисЗапрос();
//   Запрос.ДобавитьПараметрЗапроса("id", "123");
//
Функция ДобавитьПараметрЗапроса(ИмяПараметра, Значение) Экспорт
	
	ПараметрыЗапроса.Вставить(ИмяПараметра, Значение);
	Возврат ЭтотОбъект;
	
КонецФункции

// Добавляет параметр URL.
// Параметры URL используются для построения динамических URL и обычно являются частью пути.
// Если параметр с таким именем уже существует, его значение будет перезаписано.
//
// Параметры:
//   ИмяПараметра - Строка - Имя параметра URL.
//   Значение - Строка - Значение параметра URL.
//
// Возвращаемое значение:
//   ОбработкаОбъект.ЮТHTTPСервисЗапрос - Текущий объект запроса для возможности выстраивания цепочки вызовов.
//
// Пример:
//   Запрос = ЮТест.Данные().HTTPСервисЗапрос();
//   Запрос.ДобавитьПараметрURL("userId", "456");
//
Функция ДобавитьПараметрURL(ИмяПараметра, Значение) Экспорт
	
	ПараметрыURL.Вставить(ИмяПараметра, Значение);
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает HTTP-метод для запроса.
// Например, "GET", "POST", "PUT", "DELETE".
//
// Параметры:
//   Значение - Строка - Имя HTTP-метода.
//
// Возвращаемое значение:
//   ОбработкаОбъект.ЮТHTTPСервисЗапрос - Текущий объект запроса для возможности выстраивания цепочки вызовов.
//
// Пример:
//   Запрос = ЮТест.Данные().HTTPСервисЗапрос();
//   Запрос.Метод("POST");
//
Функция Метод(Значение) Экспорт
	
	HTTPМетод = Значение;
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает базовый URL для запроса.
// Например, "http://localhost:8080".
//
// Параметры:
//   Значение - Строка - Базовый URL.
//
// Возвращаемое значение:
//   ОбработкаОбъект.ЮТHTTPСервисЗапрос - Текущий объект запроса для возможности выстраивания цепочки вызовов.
//
// Пример:
//   Запрос = ЮТест.Данные().HTTPСервисЗапрос();
//   Запрос.БазовыйURL("https://api.example.com");
//
Функция БазовыйURL(Значение) Экспорт
	
	БазовыйURL = Значение;
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает относительный URL для запроса.
// Например, "/api/users".
//
// Параметры:
//   Значение - Строка - Относительный URL.
//
// Возвращаемое значение:
//   ОбработкаОбъект.ЮТHTTPСервисЗапрос - Текущий объект запроса для возможности выстраивания цепочки вызовов.
//
// Пример:
//   Запрос = ЮТест.Данные().HTTPСервисЗапрос();
//   Запрос.ОтносительныйURL("/v1/orders");
//
Функция ОтносительныйURL(Значение) Экспорт
	
	ОтносительныйURL = Значение;
	Возврат ЭтотОбъект;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура Инициализировать()
	
	HTTPМетод = "GET";
	БазовыйURL = "";
	Заголовки = Новый Соответствие();
	ОтносительныйURL = "";
	ПараметрыURL = Новый Соответствие();
	ПараметрыЗапроса = Новый Соответствие();
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

Инициализировать();

#КонецОбласти

#КонецЕсли
