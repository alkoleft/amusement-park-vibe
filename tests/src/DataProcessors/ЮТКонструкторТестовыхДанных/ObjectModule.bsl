//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2025 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Тогда

#Область ОписаниеПеременных

// см. ЮТКонструкторТестовыхДанныхСлужебный.НовыйКонтекстКонструктора
Перем Контекст;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Устанавливает значение реквизита создаваемого объекта.
// 
// Если метод вызывается после вызова см. ТабличнаяЧасть, то устанавливается значение реквизита строки табличной части.
// 
// Параметры:
//  ИмяРеквизита - Строка - Имя реквизита объекта или табличной части.
//  Значение - Произвольный - Значение реквизита объекта или табличной части.
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторТестовыхДанных - Конструктор.
//
// Пример:
//  Конструктор = ЮТест.Данные().КонструкторОбъекта();
//  Конструктор.Инициализировать(Справочники.Номенклатура);
//  Конструктор.Установить("Наименование", "Тестовая Номенклатура");
//  НоменклатураСсылка = Конструктор.Записать();
//
Функция Установить(ИмяРеквизита, Значение) Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.Установить(Контекст, ИмяРеквизита, Значение);
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает значения реквизитов создаваемого объекта.
// 
// Если метод вызывается после вызова см. ТабличнаяЧасть, то устанавливаются значения реквизитов строки табличной части.
// 
// Параметры:
//  ЗначенияРеквизитов - Структура - Устанавливаемые значения реквизитов. Ключ структуры - имя реквизита, Значение - значение реквизита.
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторТестовыхДанных - Конструктор.
//
// Пример:
//  Конструктор = ЮТест.Данные().КонструкторОбъекта();
//  Конструктор.Инициализировать(Документы.РеализацияТоваровУслуг);
//  РеквизитыШапки = Новый Структура("Контрагент, Организация", МойКонтрагент, МояОрганизация);
//  Конструктор.УстановитьРеквизиты(РеквизитыШапки);
//  ДокументСсылка = Конструктор.Записать();
//
Функция УстановитьРеквизиты(ЗначенияРеквизитов) Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.УстановитьРеквизиты(Контекст, ЗначенияРеквизитов);
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает фиктивное значение реквизита создаваемого объекта.
// 
// Если метод вызывается после вызова см. ТабличнаяЧасть, то устанавливается значение реквизита строки табличной части.
// 
// На основании менеджера и имени реквизита вычисляется его тип, а по типу генерируется фиктивное значение:
// * Для примитивных значение генерируется случайное значение.
// * Для ссылочных типов создается новый объект.
// * Для перечислений (в том числе системных) выбирается случайно значение перечисления.
// 
// Параметры:
//  ИмяРеквизита - Строка - Имя реквизита объекта или табличной части.
//  РеквизитыЗаполнения - Структура - Значения реквизитов заполнения создаваемого объекта базы.
//                      - Неопределено - Новый объект будет создан с пустыми или фиктивными реквизитами по умолчанию.
//  ОграничениеТипа - Тип - Используется для ограничения типа составного реквизита, будет сгенерировано значение указанного типа.
//                  - ОписаниеТипов - Используется для ограничения типа составного реквизита.
//                  - Неопределено - Будет сгенерировано значение на основании типа реквизита,
//                                   если реквизит составной, то будет использован случайный тип.
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторТестовыхДанных - Конструктор.
//
// Пример:
//  Конструктор = ЮТест.Данные().КонструкторОбъекта();
//  Конструктор.Инициализировать(Справочники.ДоговорыКонтрагентов);
//  Конструктор.Фикция("Номер"); // Сгенерирует случайный номер договора
//  Конструктор.Фикция("Владелец", Новый Структура("Наименование", "Основной Контрагент")); // Создаст контрагента с именем
//  ДоговорСсылка = Конструктор.Записать();
//
Функция Фикция(ИмяРеквизита, РеквизитыЗаполнения = Неопределено, ОграничениеТипа = Неопределено) Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.Фикция(Контекст, ИмяРеквизита, РеквизитыЗаполнения, ОграничениеТипа);
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает фиктивные значения реквизитов создаваемого объекта.
// 
// Если метод вызывается после вызова см. ТабличнаяЧасть, то устанавливаются значения реквизитов строки табличной части.
// 
// На основании менеджера и имени реквизита вычисляется его тип, а по типу генерируется фиктивное значение:
// * Для примитивных значение генерируется случайное значение.
// * Для ссылочных типов создается новый объект.
// * Для перечислений (в том числе системных) выбирается случайно значение перечисления.
// 
// Параметры:
//  ИменаРеквизитов - Строка - Имена реквизитов объекта или табличной части, разделенные запятыми.
//                  - Массив из Строка - Массив имен реквизитов объекта или табличной части.
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторТестовыхДанных - Конструктор.
//
// Пример:
//  Конструктор = ЮТест.Данные().КонструкторОбъекта();
//  Конструктор.Инициализировать(РегистрыСведений.КурсыВалют);
//  Конструктор.ФикцияРеквизитов("Валюта, Курс, Кратность");
//  Конструктор.Записать();
//
Функция ФикцияРеквизитов(ИменаРеквизитов) Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.ФикцияРеквизитов(Контекст, ИменаРеквизитов, Ложь);
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает фиктивные значения незаполненных реквизитов создаваемого объекта.
// 
// Если метод вызывается после вызова см. ТабличнаяЧасть, то устанавливаются значения реквизитов строки табличной части.
// 
// На основании менеджера и имени реквизита вычисляется его тип, а по типу генерируется фиктивное значение:
// * Для примитивных значение генерируется случайное значение.
// * Для ссылочных типов создается новый объект.
// * Для перечислений (в том числе системных) выбирается случайно значение перечисления.
// 
// Параметры:
//  ИменаРеквизитов - Строка - Имена реквизитов объекта или табличной части, разделенные запятыми.
//                  - Массив из Строка - Массив имен реквизитов объекта или табличной части.
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторТестовыхДанных - Конструктор.
//
// Пример:
//  Конструктор = ЮТест.Данные().КонструкторОбъекта();
//  Конструктор.Инициализировать(Документы.ПоступлениеТоваровУслуг);
//  Конструктор.Установить("Контрагент", МойПоставщик);
//  Конструктор.ФикцияНезаполненных("Склад, Организация, Ответственный"); // Заполнит только те, что не были установлены
//  Конструктор.Записать();
//
Функция ФикцияНезаполненных(ИменаРеквизитов) Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.ФикцияРеквизитов(Контекст, ИменаРеквизитов, Истина);
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает фиктивные значения незаполненных реквизитов создаваемого объекта, исключая указанные.
// 
// Если метод вызывается после вызова см. ТабличнаяЧасть, то устанавливается значения реквизитов строки табличной части.
// 
// На основании менеджера и имени реквизита вычисляется его тип, а по типу генерируется фиктивное значение.
// 
// * Для примитивных значение генерируется случайное значение
// * Для ссылочных типов создается новый объект
// * Для перечислений (в том числе системных) выбирается случайно значение перечисления
// 
// Параметры:
//  ИменаИсключений - Строка - Имена исключаемых реквизитов объекта или табличной части разделенные запятыми
//                  - Массив из Строка - Имена исключаемых реквизитов объекта или табличной части
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторТестовыхДанных - Конструктор
Функция ФикцияНезаполненныхИсключая(ИменаИсключений) Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.ФикцияРеквизитов(Контекст, ИменаИсключений, Истина, Истина);
	Возврат ЭтотОбъект;
	
КонецФункции

// Заполняет обязательные поля объекта фиктивными значениями.
// 
// Если метод вызывается после вызова см. ТабличнаяЧасть, то устанавливаются значения реквизитов строки табличной части.
// 
// На основании метаданных определяются обязательные поля (Проверка заполнения = Выдавать ошибку),
// для них генерируются и устанавливаются фиктивные значения:
// * Для примитивных значение генерируется случайное значение.
// * Для ссылочных типов создается новый объект.
// * Для перечислений (в том числе системных) выбирается случайно значение перечисления.
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторТестовыхДанных - Конструктор.
//
// Пример:
//  Конструктор = ЮТест.Данные().КонструкторОбъекта();
//  Конструктор.Инициализировать(Справочники.Пользователи);
//  Конструктор.ФикцияОбязательныхПолей(); // Заполнит, например, "Наименование", если оно обязательно
//  ПользовательСсылка = Конструктор.Записать();
//
Функция ФикцияОбязательныхПолей() Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.ФикцияОбязательныхПолей(Контекст);
	Возврат ЭтотОбъект;
	
КонецФункции

// Переключает конструктор на заполнение табличной части объекта.
// 
// Параметры:
//  ИмяТабличнойЧасти - Строка - Имя табличной части.
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторТестовыхДанных - Конструктор.
//
// Пример:
//  Конструктор = ЮТест.Данные().КонструкторОбъекта();
//  Конструктор.Инициализировать(Документы.РеализацияТоваровУслуг);
//  Конструктор.ТабличнаяЧасть("Товары"); // Переключение на ТЧ "Товары"
//  Конструктор.ДобавитьСтроку(Новый Структура("Номенклатура, Количество, Цена", Товар1, 2, 150));
//  Конструктор.ДобавитьСтроку(Новый Структура("Номенклатура, Количество, Цена", Товар2, 5, 100));
//  ДокументСсылка = Конструктор.Записать();
//
Функция ТабличнаяЧасть(ИмяТабличнойЧасти) Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.ТабличнаяЧасть(Контекст, ИмяТабличнойЧасти);
	Возврат ЭтотОбъект;
	
КонецФункции

// Переключает конструктор на заполнение объекта (шапки документа/элемента справочника).
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторТестовыхДанных - Конструктор.
//
// Пример:
//  Конструктор = ЮТест.Данные().КонструкторОбъекта();
//  Конструктор.Инициализировать(Документы.РеализацияТоваровУслуг);
//  Конструктор.ТабличнаяЧасть("Товары").ДобавитьСтроку(); // Заполняем ТЧ
//  Конструктор.Объект(); // Возвращаемся к заполнению шапки
//  Конструктор.Установить("Комментарий", "Сначала заполнили ТЧ, потом шапку");
//  Конструктор.Записать();
//
Функция Объект() Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.ТабличнаяЧасть(Контекст, Неопределено);
	Возврат ЭтотОбъект;
	
КонецФункции

// Добавляет новую строку табличной части объекта.
// Актуально после вызова см. ТабличнаяЧасть.
// При необходимости можно выполнить установку реквизитов новой строки.
// 
// Параметры:
//  ЗначенияРеквизитов - Структура - Устанавливаемые значения реквизитов новой строки.
//                     - Неопределено - Строка добавляется с пустыми значениями.
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторТестовыхДанных - Конструктор.
//
// Пример:
//  Конструктор = ЮТест.Данные().КонструкторОбъекта();
//  Конструктор.Инициализировать(Документы.ЗаказКлиента);
//  Конструктор.ТабличнаяЧасть("Товары");
//  Конструктор.ДобавитьСтроку(Новый Структура("Товар, Количество", МойТовар, 10));
//  Конструктор.ДобавитьСтроку(); // Добавит пустую строку, можно заполнить через Установить() или Фикция()
//  Конструктор.Установить("Цена", 1000); // Установит цену для последней добавленной строки
//  Конструктор.Записать();
//
Функция ДобавитьСтроку(ЗначенияРеквизитов = Неопределено) Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.ДобавитьСтроку(Контекст, ЗначенияРеквизитов);
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает дополнительное свойство объекта.
// Эти свойства используются при записи объекта через ОбменДанными.Загрузка = Истина
// или для специальных случаев платформы.
// 
// Параметры:
//  ИмяСвойства - Строка - Имя дополнительного свойства (например, "ОбменДаннымиЗагрузка", "ДополнительныеСвойства").
//  Значение - Произвольный - Значение дополнительного свойства.
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторТестовыхДанных - Конструктор.
//
// Пример:
//  Конструктор = ЮТест.Данные().КонструкторОбъекта();
//  Конструктор.Инициализировать(Справочники.Валюты);
//  Конструктор.Установить("Наименование", "Доллар США");
//  Конструктор.УстановитьДополнительноеСвойство("ЗагрузитьИзКлассификатора", Истина);
//  Конструктор.Записать();
//
Функция УстановитьДополнительноеСвойство(ИмяСвойства, Значение = Неопределено) Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.УстановитьДополнительноеСвойство(Контекст, ИмяСвойства, Значение);
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает предопределенный уникальный идентификатор для создаваемого объекта.
// Полезно, когда нужно создать объект с известным заранее GUID.
// 
// Параметры:
//  Значение - УникальныйИдентификатор - Уникальный идентификатор для нового объекта.
//           - Строка - Строковое представление уникального идентификатора для нового объекта.
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторТестовыхДанных - Конструктор.
//
// Пример:
//  Конструктор = ЮТест.Данные().КонструкторОбъекта();
//  Конструктор.Инициализировать(Справочники.Организации);
//  ИзвестныйGUID = "guid-guid-guid-guid";
//  Конструктор.УстановитьСсылкуНового(ИзвестныйGUID);
//  Конструктор.Установить("Наименование", "Наша Организация");
//  СсылкаНаОрганизацию = Конструктор.Записать();
//  Сообщить(СсылкаНаОрганизацию.УникальныйИдентификатор()); // Будет равно ИзвестныйGUID
//
Функция УстановитьСсылкуНового(Значение) Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.УстановитьСсылкуНового(Контекст, Значение);
	Возврат ЭтотОбъект;
	
КонецФункции

// Создает новый объект и возвращает его или ссылку.
// 
// Важно: после создания объекта данные в конструкторе не очищаются. 
// Многократный вызов этого метода создаст несколько идентичных объектов (если УстановитьСсылкуНового() не вызывался).
// Для создания полностью нового, независимого объекта, необходимо заново инициализировать конструктор 
// (вызвать `DataProcessors.ЮТКонструкторТестовыхДанных.Создать()` и `Инициализировать()`).
// 
// Параметры:
//  ВернутьОбъект - Булево - Если Истина, будет возвращен объект метаданных (например, СправочникОбъект), 
//                           иначе будет возвращена ссылка (например, СправочникСсылка). По умолчанию Ложь.
//  ОбменДаннымиЗагрузка - Булево - Если Истина, объект будет записан с `ОбменДанными.Загрузка = Истина`.
//                       - Неопределено - Используется значение по умолчанию из настроек конструктора 
//                                        (см. ЮТКонтекст.ОпцииДвижка().ОбменДаннымиЗагрузкаПриСозданииДанных).
// 
// Возвращаемое значение:
//  Произвольный - Созданный объект или ссылка на него, в зависимости от параметра ВернутьОбъект.
//
// Пример:
//  Конструктор = ЮТест.Данные().КонструкторОбъекта();
//  Конструктор.Инициализировать(Справочники.Контрагенты);
//  Конструктор.Установить("Наименование", "Тестовый Контрагент");
//  СсылкаКонтрагента = Конструктор.Записать(); // Вернет СправочникСсылка.Контрагенты
//  ОбъектКонтрагента = Конструктор.Записать(Истина); // Вернет СправочникОбъект.Контрагенты (тот же самый, но как объект)
//
Функция Записать(ВернутьОбъект = Ложь, ОбменДаннымиЗагрузка = Неопределено) Экспорт
	
	Возврат ЮТКонструкторТестовыхДанныхСлужебный.Записать(Контекст, ВернутьОбъект, ОбменДаннымиЗагрузка);
	
КонецФункции

// Записывает новый объект и возвращает конструктор для продолжения цепочки вызовов.
// Отличается от см. Записать тем, что не возвращает созданный объект/ссылку, а текущий экземпляр конструктора.
// 
// Важно: после создания объекта данные в конструкторе не очищаются. 
// Многократный вызов этого метода создаст несколько идентичных объектов.
// Для создания полностью нового, независимого объекта, необходимо заново инициализировать конструктор.
// 
// Параметры:
//  ОбменДаннымиЗагрузка - Булево - Если Истина, объект будет записан с `ОбменДанными.Загрузка = Истина`.
//                       - Неопределено - Используется значение по умолчанию из настроек конструктора.
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторТестовыхДанных - Конструктор.
//
// Пример:
//  Конструктор = ЮТест.Данные().КонструкторОбъекта();
//  Конструктор.Инициализировать(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные);
//  Конструктор.Установить("Наименование", "Субконто1").ДобавитьЗапись();
//  Конструктор.Установить("Наименование", "Субконто2").ДобавитьЗапись(Истина); // С ОбменДанными.Загрузка = Истина
//
Функция ДобавитьЗапись(ОбменДаннымиЗагрузка = Неопределено) Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.Записать(Контекст, Ложь, ОбменДаннымиЗагрузка);
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Создает и возвращает новый объект метаданных (не записывая его в базу данных).
// Полезно для подготовки объекта и его последующей передачи в другие методы или для проверок.
// 
// Важно: после вызова этого метода данные в конструкторе не очищаются. 
// Для создания нового, независимого объекта, необходимо заново инициализировать конструктор.
// 
// Возвращаемое значение:
//  Произвольный - Созданный объект метаданных (например, СправочникОбъект.Номенклатура).
//
// Пример:
//  Конструктор = ЮТест.Данные().КонструкторОбъекта();
//  Конструктор.Инициализировать(Документы.СчетНаОплатуПокупателю);
//  Конструктор.Установить("Номер", "СЧ-001").Установить("Дата", ТекущаяДата());
//  НовыйСчетОбъект = Конструктор.НовыйОбъект();
//  // НовыйСчетОбъект теперь содержит заполненный, но не записанный документ.
//  // Его можно передать, например, в функцию для дальнейшего заполнения или печати.
//  // ПечатьДокумента(НовыйСчетОбъект); 
//
Функция НовыйОбъект() Экспорт
	
	Возврат ЮТКонструкторТестовыхДанныхСлужебный.НовыйОбъект(Контекст);
	
КонецФункции

// Создает и проводит новый документ. Возвращает объект или ссылку на него.
// 
// Важно: после создания и проведения документа данные в конструкторе не очищаются. 
// Многократный вызов этого метода создаст и проведет несколько идентичных документов.
// Для создания нового, независимого документа, необходимо заново инициализировать конструктор.
// 
// Параметры:
//  ВернутьОбъект - Булево - Если Истина, будет возвращен проведенный объект документа, 
//                           иначе будет возвращена ссылка на проведенный документ. По умолчанию Ложь.
// 
// Возвращаемое значение:
//  Произвольный - Проведенный документ (объект или ссылка) в зависимости от параметра ВернутьОбъект.
//
// Пример:
//  Конструктор = ЮТест.Данные().КонструкторОбъекта();
//  Конструктор.Инициализировать(Документы.РасходнаяНакладная);
//  Конструктор.Установить("Клиент", МойКлиент).Установить("СуммаДокумента", 1000);
//  СсылкаНаДокумент = Конструктор.Провести();
//  // Документ создан и проведен
//  ОбъектДокумента = Конструктор.Провести(Истина); // Тот же документ, но как объект
//
Функция Провести(ВернутьОбъект = Ложь) Экспорт
	
	Возврат ЮТКонструкторТестовыхДанныхСлужебный.Провести(Контекст, ВернутьОбъект);
	
КонецФункции

// Возвращает данные текущей строки табличной части объекта, если конструктор находится в режиме заполнения ТЧ.
// 
// Возвращаемое значение:
//  - Структура - Данные текущей заполняемой строки табличной части. Ключи - имена реквизитов ТЧ, значения - их значения.
//  - Неопределено - Если конструктор не находится в режиме заполнения табличной части (т.е. заполняется шапка объекта).
//
// Пример:
//  Конструктор = ЮТест.Данные().КонструкторОбъекта();
//  Конструктор.Инициализировать(Документы.ПоступлениеТоваровУслуг);
//  Конструктор.ТабличнаяЧасть("Товары");
//  Конструктор.ДобавитьСтроку().Установить("Номенклатура", ТоварА).Установить("Количество", 5);
//  ДанныеТекущейСтроки = Конструктор.ДанныеСтроки();
//  // ДанныеТекущейСтроки будет содержать: Структура("Номенклатура, Количество", ТоварА, 5)
//
Функция ДанныеСтроки() Экспорт
	
	Возврат ЮТКонструкторТестовыхДанныхСлужебный.ДанныеСтрокиТабличнойЧасти(Контекст);
	
КонецФункции

// Возвращает данные создаваемого объекта (шапки и всех табличных частей).
// 
// Возвращаемое значение:
//  Структура - Данные объекта. Содержит реквизиты шапки. 
//              Если есть табличные части, они представлены как вложенные массивы структур.
//
// Пример:
//  Конструктор = ЮТест.Данные().КонструкторОбъекта();
//  Конструктор.Инициализировать(Документы.ЗаказПокупателя);
//  Конструктор.Установить("Контрагент", Клиент).Установить("Дата", '20230115');
//  Конструктор.ТабличнаяЧасть("Товары");
//  Конструктор.ДобавитьСтроку(Новый Структура("Товар, Цена", Товар1, 100));
//  Конструктор.ДобавитьСтроку(Новый Структура("Товар, Цена", Товар2, 200));
//  ВсеДанныеОбъекта = Конструктор.ДанныеОбъекта();
//  // ВсеДанныеОбъекта.Контрагент = Клиент
//  // ВсеДанныеОбъекта.Товары[0].Товар = Товар1
//
Функция ДанныеОбъекта() Экспорт
	
	Возврат ЮТКонструкторТестовыхДанныхСлужебный.ДанныеОбъекта(Контекст);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура Инициализировать(Менеджер) Экспорт
	
	Контекст = ЮТКонструкторТестовыхДанныхСлужебный.НовыйКонтекстКонструктора(Менеджер);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
