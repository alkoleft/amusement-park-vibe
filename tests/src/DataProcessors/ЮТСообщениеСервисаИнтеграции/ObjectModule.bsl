//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2025 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Если Сервер Тогда

#Область ОписаниеПеременных

// BSLLS:ExportVariables-off
//@skip-check object-module-export-variable
Перем ДатаОтправки Экспорт;
//@skip-check object-module-export-variable
Перем ДатаУстаревания Экспорт;
//@skip-check object-module-export-variable
Перем Идентификатор Экспорт;
//@skip-check object-module-export-variable
Перем ИдентификаторСообщенияЗапроса Экспорт;
//@skip-check object-module-export-variable
Перем КодОтправителя Экспорт;
//@skip-check object-module-export-variable
Перем КодПолучателя Экспорт;
//@skip-check object-module-export-variable
Перем Параметры Экспорт;
//@skip-check object-module-export-variable
Перем РазмерТела Экспорт;
// BSLLS:ExportVariables-on

Перем Тело; // переменная для хранения тела в рамках существования объекта

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Возвращает тело как поток.
// 
// Возвращаемое значение:
//  Поток - Тело сообщения в виде потока данных.
//
// Пример:
//  Сообщение = ЮТест.Данные().СообщениеСервисаИнтеграции();
//  Сообщение.УстановитьТелоКакСтроку("Тестовые данные");
//  ПотокДанных = Сообщение.ПолучитьТелоКакПоток();
//  // Чтение данных из потока...
//
Функция ПолучитьТелоКакПоток() Экспорт
	
	Возврат ПолучитьТелоКакДвоичныеДанные().ОткрытьПотокДляЧтения();
	
КонецФункции

// Устанавливает тело как двоичные данные.
// При получении тела в другом формате происходит конвертация.
// 
// Параметры:
//  Данные - ДвоичныеДанные - Двоичные данные для установки в качестве тела сообщения.
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТСообщениеСервисаИнтеграции - Текущий объект для цепочки вызовов.
//
// Пример:
//  Сообщение = ЮТест.Данные().СообщениеСервисаИнтеграции();
//  ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки("Это бинарные данные");
//  Сообщение.УстановитьТелоКакДвоичныеДанные(ДвоичныеДанные);
//
Функция УстановитьТелоКакДвоичныеДанные(Данные) Экспорт
	
	Тело = Данные;
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает тело как строку.
// При получении тела в другом формате происходит конвертация.
// 
// Параметры:
//  Строка - Строка - Строковые данные для установки в качестве тела сообщения.
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТСообщениеСервисаИнтеграции - Текущий объект для цепочки вызовов.
//
// Пример:
//  Сообщение = ЮТест.Данные().СообщениеСервисаИнтеграции();
//  Сообщение.УстановитьТелоКакСтроку("Это тестовая строка");
//
Функция УстановитьТелоКакСтроку(Строка) Экспорт
	
	Тело = Строка;
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает тело как строку JSON.
// Сериализует переданный объект в строку JSON и сохраняет в тело.
// При получении тела в другом формате происходит конвертация.
// 
// Параметры:
//  Данные - Произвольный - Данные для сериализации в JSON и установки в качестве тела сообщения.
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТСообщениеСервисаИнтеграции - Текущий объект для цепочки вызовов.
//
// Пример:
//  Сообщение = ЮТест.Данные().СообщениеСервисаИнтеграции();
//  СтруктураДанных = Новый Структура("Ключ, Значение", "Тест1", 123);
//  Сообщение.УстановитьТелоКакСтрокуJSON(СтруктураДанных);
//
Функция УстановитьТелоКакСтрокуJSON(Данные) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные);
	
	Тело = ЗаписьJSON.Закрыть();
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Добавляет параметр.
// 
// Параметры:
//  ИмяПараметра - Строка - Имя добавляемого параметра.
//  Значение - Строка - Значение добавляемого параметра.
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТСообщениеСервисаИнтеграции - Текущий объект для цепочки вызовов.
//
// Пример:
//  Сообщение = ЮТест.Данные().СообщениеСервисаИнтеграции();
//  Сообщение.ДобавитьПараметр("ИмяЗаголовка", "ЗначениеЗаголовка");
//
Функция ДобавитьПараметр(ИмяПараметра, Значение) Экспорт
	
	Параметры.Вставить(ИмяПараметра, Значение);
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает дату отправки.
// 
// Параметры:
//  Значение - Дата - Устанавливаемая дата отправки сообщения.
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТСообщениеСервисаИнтеграции - Текущий объект для цепочки вызовов.
//
// Пример:
//  Сообщение = ЮТест.Данные().СообщениеСервисаИнтеграции();
//  Сообщение.ДатаОтправки(ТекущаяДата());
//
Функция ДатаОтправки(Значение) Экспорт
	
	ДатаОтправки = Значение;
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает дату устаревания.
// 
// Параметры:
//  Значение - Дата - Устанавливаемая дата устаревания сообщения.
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТСообщениеСервисаИнтеграции - Текущий объект для цепочки вызовов.
//
// Пример:
//  Сообщение = ЮТест.Данные().СообщениеСервисаИнтеграции();
//  Сообщение.ДатаУстаревания(ТекущаяДата() + 3600); // Устареет через час
//
Функция ДатаУстаревания(Значение) Экспорт
	
	ДатаУстаревания = Значение;
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает идентификатор сообщения.
// 
// Параметры:
//  Значение - УникальныйИдентификатор - Устанавливаемый идентификатор сообщения.
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТСообщениеСервисаИнтеграции - Текущий объект для цепочки вызовов.
//
// Пример:
//  Сообщение = ЮТест.Данные().СообщениеСервисаИнтеграции();
//  НовыйИД = Новый УникальныйИдентификатор();
//  Сообщение.Идентификатор(НовыйИД);
//
Функция Идентификатор(Значение) Экспорт
	
	Идентификатор = Значение;
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает идентификатор сообщения запроса.
// Используется для связывания ответного сообщения с исходным запросом.
// 
// Параметры:
//  Значение - УникальныйИдентификатор - Устанавливаемый идентификатор сообщения запроса.
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТСообщениеСервисаИнтеграции - Текущий объект для цепочки вызовов.
//
// Пример:
//  Сообщение = ЮТест.Данные().СообщениеСервисаИнтеграции();
//  ИДЗапроса = ПолучитьИдентификаторПредыдущегоСообщения();
//  Сообщение.ИдентификаторСообщенияЗапроса(ИДЗапроса);
//
Функция ИдентификаторСообщенияЗапроса(Значение) Экспорт
	
	ИдентификаторСообщенияЗапроса = Значение;
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает код отправителя.
// 
// Параметры:
//  Значение - Строка - Устанавливаемый код отправителя сообщения.
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТСообщениеСервисаИнтеграции - Текущий объект для цепочки вызовов.
//
// Пример:
//  Сообщение = ЮТест.Данные().СообщениеСервисаИнтеграции();
//  Сообщение.КодОтправителя("СистемаИсточник");
//
Функция КодОтправителя(Значение) Экспорт
	
	КодОтправителя = Значение;
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает код получателя.
// 
// Параметры:
//  Значение - Строка - Устанавливаемый код получателя сообщения.
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТСообщениеСервисаИнтеграции - Текущий объект для цепочки вызовов.
//
// Пример:
//  Сообщение = ЮТест.Данные().СообщениеСервисаИнтеграции();
//  Сообщение.КодПолучателя("СистемаПриемник");
//
Функция КодПолучателя(Значение) Экспорт
	
	КодПолучателя = Значение;
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает размер тела.
// 
// Параметры:
//  Значение - Число - Устанавливаемый размер тела сообщения в байтах.
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТСообщениеСервисаИнтеграции - Текущий объект для цепочки вызовов.
//
// Пример:
//  Сообщение = ЮТест.Данные().СообщениеСервисаИнтеграции();
//  Сообщение.УстановитьТелоКакСтроку("Пример тела");
//  Размер = СтрДлина("Пример тела"); // В реальном случае нужно получать байты
//  Сообщение.РазмерТела(Размер);
//
Функция РазмерТела(Значение) Экспорт
	
	РазмерТела = Значение;
	Возврат ЭтотОбъект;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТелоКакДвоичныеДанные()
	
	ТипТела = ТипЗнч(Тело);
	
	Если Тело = Неопределено Тогда
		Возврат ПолучитьДвоичныеДанныеИзBase64Строки("");
	ИначеЕсли ТипТела = Тип("ДвоичныеДанные") Тогда
		Возврат Тело;
	ИначеЕсли ТипТела = Тип("Строка") Тогда
		Возврат ПолучитьДвоичныеДанныеИзСтроки(Тело);
	Иначе
		ВызватьИсключение СтрШаблон("Установленный тип тела %1 не поддерживается.", ТипТела);
	КонецЕсли;
	
КонецФункции

Процедура Инициализировать()
	
	ДатаОтправки = Дата(1, 1, 1);
	ДатаУстаревания = Дата(1, 1, 1);
	Идентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	ИдентификаторСообщенияЗапроса = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	КодОтправителя = "";
	КодПолучателя = "";
	РазмерТела = 0;
	Параметры = Новый Соответствие();
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

Инициализировать();

#КонецОбласти

#КонецЕсли
