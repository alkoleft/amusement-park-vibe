
#Область ПрограммныйИнтерфейс

// Функция - Подготовленные данные для создания тестового объекта
//
// Параметры:
//  СсылкаНаОбъект		 - ЛюбаяСсылка	 - Ссылка на объект БД
//  ОтобранныеДвижения	 - 	Массив - Массив с именами регистров движений
// 
// Возвращаемое значение:
//  Структура
//		* КодТестовогоМодуля - код создания объектов
//		* КодМодуляМенеджераОбработки - Код загрузки эталон в таблицы значений
//		* МакетыЭталонов - Массив - Табличные документы с движениями документов
//
Функция ПодготовленныеДанныеДляСозданияТестовогоОбъекта(СсылкаНаОбъект, ОтобранныеДвижения) Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("КодТестовогоМодуля", "");
	Результат.Вставить("КодМодуляМенеджераОбработки", "");
	Результат.Вставить("МакетыЭталонов", Новый Массив);
	
	ДанныеОбъекта = Новый Структура;
	ПодготовитьДанныеОбъекта(СсылкаНаОбъект, ДанныеОбъекта, ОтобранныеДвижения);
	
	Переменные = Переменные();
	
	Конструктор = 
		ЮТРаботаСТекстом.КонструкторТекста()
			.НоваяСтрокаПоШаблону(ШаблонВызоваКонструктораОбъекта(), ДанныеОбъекта.ТипОбъекта);
		
	СформироватьКодРеквизитов(ДанныеОбъекта, Конструктор, Переменные);
	СформироватьКодТабличныхЧастей(ДанныеОбъекта.ТабличныеЧасти, Конструктор, Переменные);

	Если ДанныеОбъекта.ЭтоДокумент Тогда
		ПодготовитьДанныеДвижений(ДанныеОбъекта, ОтобранныеДвижения, Результат, Переменные);
		СформироватьКодУстановкиЗаменяемыхЗначений(Конструктор, Переменные);
	КонецЕсли;
	
	СформироватьКодПеременных(Конструктор, Переменные);
				
	Результат.КодТестовогоМодуля = Конструктор.Текст();	
	
	Возврат Результат;
	
КонецФункции 

// Функция - Подготовленные данные для создания тестового объекта
//
// Параметры:
//  СсылкаНаОбъект		 - ЛюбаяСсылка	 - Ссылка на объект БД
//  ОтобранныеДвижения	 - 	Массив - Массив с именами регистров движений
// 
// Возвращаемое значение:
//  Структура
//		* КодЗаполненияДвижений - код создания объектов
//
Функция ПодготовленныеДанныеДляЗагрузкиДвижений(СсылкаНаОбъект, ОтобранныеДвижения)Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("КодЗаполненияДвижений", "");	
	
	ДанныеОбъекта = Новый Структура;
	ПодготовитьДанныеОбъекта(СсылкаНаОбъект, ДанныеОбъекта, ОтобранныеДвижения);
	
	Переменные = Переменные();
	
	Регистратор = ПодготовленныеДанныеРеквизита("Регистратор", СсылкаНаОбъект);
	ДобавитьНовуюПеременную(Переменные, Регистратор);
	
	
	Конструктор = 
		ЮТРаботаСТекстом.КонструкторТекста();
		
	Для Каждого НаборДвижений Из ДанныеОбъекта.ДанныеДвиженийОбъекта Цикл
		Конструктор
			.НоваяСтрокаПоШаблону(ШаблонВызоваКонструктораДвижений(), СсылкаНаОбъект, "Регистратор", НаборДвижений.Имя);

		Для Каждого СтрокаНабора Из НаборДвижений.Строки Цикл
			
			Конструктор.НоваяСтрока(".ДобавитьСтроку()").Табуляция(1);
			
			Для Каждого Колонка Из СтрокаНабора Цикл
				ОбогащенныйРеквизит = Колонка.Значение;
				
				Если ОбогащенныйРеквизит.ЭтоПримитивныйТип Тогда	
					Конструктор
						.НоваяСтрокаПоШаблону(".Установить(""%1"", %2)", 
												ОбогащенныйРеквизит.Имя, 
												ОбогащенныйРеквизит.КодИнициализации)
						.Табуляция(3);
				
				Иначе	
					НайденноеЗначение = Переменные.Найти(ОбогащенныйРеквизит.Значение, "Значение");
					
					Если НайденноеЗначение = Неопределено Тогда
						ДобавитьНовуюПеременную(Переменные, ОбогащенныйРеквизит);
						
						ИмяПеременной = ОбогащенныйРеквизит.ИмяПеременной;
					Иначе
						ИмяПеременной = НайденноеЗначение.ИмяПеременной;
					КонецЕсли;
					
					Конструктор
						.НоваяСтрокаПоШаблону(".Установить(""%1"", %2)", 
											ОбогащенныйРеквизит.Имя, 
											ИмяПеременной)
						.Табуляция(3);	
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
		
		Конструктор
			.НоваяСтрока(".Записать();")
			.ПереносСтроки();
	КонецЦикла;
		
	СформироватьКодПеременных(Конструктор, Переменные);
				
	Результат.КодЗаполненияДвижений = Конструктор.Текст();	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПодготовитьДанныеДвижений(ДанныеОбъекта, ОтобранныеДвижения, Результат, Переменные)
	
	Конструктор = 
		ЮТРаботаСТекстом.КонструкторТекста();
	
	ЭталоныДвижений = ЭталоныДвиженийДокумента(ДанныеОбъекта.ДвиженияОбъекта, Переменные);
	
	СформироватьКодПодготовкиЭталонов(ЭталоныДвижений, Переменные, Конструктор);
	МакетыЭталонов = СформироватьМакетыЭталонов(ЭталоныДвижений);

	Результат.КодМодуляМенеджераОбработки = Конструктор.Текст();
	Результат.МакетыЭталонов = МакетыЭталонов;
	
КонецПроцедуры

Процедура ПодготовитьДанныеОбъекта(СсылкаНаОбъект, ДанныеОбъекта, ОтобранныеДвижения)
	
	ПолученныйОбъект  = СсылкаНаОбъект.ПолучитьОбъект();
	ДанныеОбъекта = ЗначенияЗаполненныхРеквизитовОбъекта(ПолученныйОбъект);
	
	Если ДанныеОбъекта.ЭтоДокумент Тогда
		ДвиженияОбъекта = ПодговитьДвиженияДокумента(ПолученныйОбъект, ОтобранныеДвижения);
		ДанныеОбъекта.Вставить("ДвиженияОбъекта", ДвиженияОбъекта);
		
		ДанныеДвиженийОбъекта = ПодготовитьДанныеДвиженийДокумента(ДвиженияОбъекта);
		ДанныеОбъекта.Вставить("ДанныеДвиженийОбъекта", ДанныеДвиженийОбъекта);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначенияЗаполненныхРеквизитовОбъекта(ДанныеОбъекта)
	
	МетаданныеОбъекта = ДанныеОбъекта.Метаданные();	
	ПолноеИмяМД = МетаданныеОбъекта.ПолноеИмя();
	
	ЗначенияРеквизитов = Новый Структура;
	ЗначенияРеквизитов.Вставить("ТипОбъекта", ПолноеИмяМД); // заменить на получение имя объекта из дерева МД
	
	ЭтоДокумент = СтрНайти(ПолноеИмяМД, "Документ") <> 0;
	ЗначенияРеквизитов.Вставить("ЭтоДокумент", ЭтоДокумент);
	
	Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		Если ЭтоРеквизитИсключен(Реквизит) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьЗначениеРеквизитаВСтруктуру(ДанныеОбъекта, ЗначенияРеквизитов, Реквизит.Имя);
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		ДобавитьЗначениеРеквизитаВСтруктуру(ДанныеОбъекта, ЗначенияРеквизитов, Реквизит.Имя);
	КонецЦикла;
	
	ТабличныеЧасти = Новый Массив;
	
	Для Каждого ТЧ Из МетаданныеОбъекта.ТабличныеЧасти Цикл	
		ДанныеТЧ = Неопределено;	
		
		Выполнить("ДанныеТЧ = ДанныеОбъекта." + ТЧ.Имя);
		
		РеквизитыТЧ = ТЧ.Реквизиты;
		ДанныеСтрокТЧ = Новый Массив;
		
		Для Каждого СтрТЧ Из ДанныеТЧ Цикл
			ДанныеСтрокиТЧ = Новый Структура;
			
			Для Каждого РеквизитТЧ Из РеквизитыТЧ Цикл
				ДобавитьЗначениеРеквизитаВСтруктуру(СтрТЧ, ДанныеСтрокиТЧ, РеквизитТЧ.Имя, СтрТЧ.НомерСтроки);
			КонецЦикла;	
			
			ДанныеСтрокТЧ.Добавить(ДанныеСтрокиТЧ);
		КонецЦикла;
		
		Если ДанныеСтрокТЧ.Количество() Тогда
			ТабличныеЧасти.Добавить(ПодготовленныеДанныеТЧ(ТЧ.Имя, ДанныеСтрокТЧ));	
		КонецЕсли;
	КонецЦикла;
	
	ЗначенияРеквизитов.Вставить("ТабличныеЧасти", ТабличныеЧасти);
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

Процедура ДобавитьЗначениеРеквизитаВСтруктуру(ДанныеОбъекта, ЗначенияРеквизитов, ИмяРеквизита, НомерСтроки = "")
	
	ЗначениеРеквизита = ДанныеОбъекта[ИмяРеквизита];
	
	Если ЗначениеРеквизитаЗаполнено(ЗначениеРеквизита) Тогда
		
		ПодготовленныеДанныеРеквизита = ПодготовленныеДанныеРеквизита(ИмяРеквизита, ЗначениеРеквизита, НомерСтроки);
		
		Если ПодготовленныеДанныеРеквизита.ЭтоПримитивныйТип Тогда
			ПодготовленныеДанныеРеквизита.КодИнициализации = КодДляЗначенияПримитивногоТипа(ЗначениеРеквизита); 
		Иначе
			ПодготовленныеДанныеРеквизита.КодИнициализации = КодИнициализацииПоЗначению(ЗначениеРеквизита);
		КонецЕсли;
		
		ЗначенияРеквизитов.Вставить(ИмяРеквизита, ПодготовленныеДанныеРеквизита);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодговитьДвиженияДокумента(ДанныеОбъекта, ОтобранныеДвижения)
	
	МетаданныеОбъекта = ДанныеОбъекта.Метаданные();	
	
	КоллекцияДвижения = Новый Структура;
	
	Для Каждого МДДвижения Из МетаданныеОбъекта.Движения Цикл
		Если ОтобранныеДвижения.Найти(МДДвижения.Имя) <> Неопределено Тогда
			КоллекцияДвижения.Вставить(МДДвижения.Имя);	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Движения Из КоллекцияДвижения Цикл
		ДвиженияПоРегистру = ДанныеОбъекта.Движения[Движения.Ключ];
		ДвиженияПоРегистру.Прочитать();
		
		Если ДвиженияПоРегистру.Количество() Тогда
			КоллекцияДвижения[Движения.Ключ] = ТаблицаДвиженийРегистра(ДвиженияПоРегистру);
		Иначе
			КоллекцияДвижения.Удалить(Движения.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоллекцияДвижения;
	
КонецФункции

Функция ПодготовитьДанныеДвиженийДокумента(КоллекцияДвижений)
	
	ДанныеДвиженийОбъекта = Новый Массив;
	
	Для Каждого Движения Из КоллекцияДвижений Цикл		
		ДанныеДвижения = Новый Массив;
		
		Для Каждого Стр Из Движения.Значение Цикл
			ДанныеСтрокиТЧ = Новый Структура;
			
			Для Каждого РеквизитТЧ Из Движения.Значение.Колонки Цикл
				ДобавитьЗначениеРеквизитаВСтруктуру(Стр, ДанныеСтрокиТЧ, РеквизитТЧ.Имя, Стр.НомерСтроки);
			КонецЦикла;	
			
			ДанныеДвижения.Добавить(ДанныеСтрокиТЧ);
		КонецЦикла;
		
		Если ДанныеДвижения.Количество() Тогда
			ДанныеДвиженийОбъекта.Добавить(ПодготовленныеДанныеТЧ(Движения.Ключ, ДанныеДвижения));	
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеДвиженийОбъекта;
		
КонецФункции

Функция ТаблицаДвиженийРегистра(ДвиженияПоРегистру)
	МетаданныеРегистра = ДвиженияПоРегистру.Метаданные();
	
	Если ЮТМетаданные.ЭтоРегистрБухгалтерии(МетаданныеРегистра) Тогда
		ТаблицаДвижений = ДвиженияПоРегистру.Выгрузить();
		ТаблицаДвижений = ТаблицаДвижений.СкопироватьКолонки();
		
		Для Каждого Движение Из ДвиженияПоРегистру Цикл
			НоваяСтрока = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Движение); 
			
			Для Каждого СубконтоДт Из Движение.СчетДт.ВидыСубконто Цикл
				НоваяСтрока["СубконтоДт" + СубконтоДт.НомерСтроки] = Движение.СубконтоДт[СубконтоДт.ВидСубконто];
			КонецЦикла;
			
			Для Каждого СубконтоКт Из Движение.СчетКт.ВидыСубконто Цикл
				НоваяСтрока["СубконтоКт" + СубконтоКт.НомерСтроки] = Движение.СубконтоКт[СубконтоКт.ВидСубконто];
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		ТаблицаДвижений = ДвиженияПоРегистру.Выгрузить();
	КонецЕсли;
	
	Возврат ТаблицаДвижений;

КонецФункции

#Область ФормированиеКода

Процедура СформироватьКодРеквизитов(ЗначенияРеквизитов, Конструктор, Переменные)
	
	Для Каждого Реквизит Из ЗначенияРеквизитов Цикл	
		ОбогащенныйРеквизит = Реквизит.Значение;
		
		ПропускаемыеСвойства = СтрРазделить("ТипОбъекта,ЭтоДокумент,ДвиженияОбъекта", ",");
		
		Если ПропускаемыеСвойства.Найти(Реквизит.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ОбогащенныйРеквизит) = Тип("Массив") Тогда
			Продолжить;
		КонецЕсли;
	
		Если ОбогащенныйРеквизит.ЭтоПримитивныйТип Тогда
			Конструктор
				.НоваяСтрокаПоШаблону(".Установить(""%1"", %2)", 
										ОбогащенныйРеквизит.Имя, 
										ОбогащенныйРеквизит.КодИнициализации)
				.Табуляция(3);	
		Иначе
			Конструктор
				.НоваяСтрокаПоШаблону(".Установить(""%1"", %2)", 
										ОбогащенныйРеквизит.Имя, 
										ОбогащенныйРеквизит.ИмяПеременной)
				.Табуляция(3);
				
			ДобавитьНовуюПеременную(Переменные, ОбогащенныйРеквизит);	
		КонецЕсли;
		
	КонецЦикла;
	
	Конструктор.НоваяСтрока(";");
	
КонецПроцедуры

Процедура СформироватьКодТабличныхЧастей(ТабличныеЧасти, Конструктор, Переменные)
	
	Для Каждого ТЧ Из ТабличныеЧасти Цикл
		
		Конструктор.НоваяСтрокаПоШаблону(ШаблонПереходНаКонтекстТЧ(), ТЧ.Имя);
		
		Если ТЧ.Строки.Количество() Тогда
			Конструктор.НоваяСтрока("ТЧ");	
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из ТЧ.Строки Цикл
			
			Конструктор.НоваяСтрока(".ДобавитьСтроку()").Табуляция(1);
			
			Для Каждого РеквизитТЧ Из СтрокаТЧ Цикл
				ОбогащенныйРеквизит = РеквизитТЧ.Значение;
				
				Если ОбогащенныйРеквизит.ЭтоПримитивныйТип Тогда	
					Конструктор
						.НоваяСтрокаПоШаблону(".Установить(""%1"", %2)", 
												ОбогащенныйРеквизит.Имя, 
												ОбогащенныйРеквизит.КодИнициализации)
						.Табуляция(2);
				
				Иначе	
					НайденноеЗначение = Переменные.Найти(ОбогащенныйРеквизит.Значение, "Значение");
					
					Если НайденноеЗначение = Неопределено Тогда
						ДобавитьНовуюПеременную(Переменные, ОбогащенныйРеквизит);
						
						ИмяПеременной = ОбогащенныйРеквизит.ИмяПеременной;
					Иначе
						ИмяПеременной = НайденноеЗначение.ИмяПеременной;
					КонецЕсли;
					
					Конструктор
						.НоваяСтрокаПоШаблону(".Установить(""%1"", %2)", 
											ОбогащенныйРеквизит.Имя, 
											ИмяПеременной)
						.Табуляция(2);	
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		Конструктор.НоваяСтрока(";");
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьКодПеременных(Конструктор, Переменные, ШагСдвига = 0)
	
	Конструктор.ВставитьПервуюСтроку(Символы.ПС);
	
	Переменные.Свернуть("Порядок, ИмяПеременной,Имя,Тип,Значение,КодИнициализации,НомерСтроки");	
	Переменные.Сортировать("Порядок УБЫВ, НомерСтроки");
	
	Для Каждого Переменная Из Переменные Цикл
		КодУстановкиЗначения = СтрШаблон("%1 = %2", Переменная.ИмяПеременной, Переменная.КодИнициализации);
		Конструктор.ВставитьПервуюСтроку(КодУстановкиЗначения).Табуляция(ШагСдвига);
	КонецЦикла;
		
	Конструктор.ВставитьПервуюСтроку("// Переменные");
	
КонецПроцедуры

Процедура СформироватьКодУстановкиЗаменяемыхЗначений(Конструктор, Переменные)
	
	Конструктор
		.ПереносСтроки()
		.НоваяСтрока("// Заменяемые значения")
		.НоваяСтрока("ЗаменяемыеЗначения = Новый Соответствие;")
	;
	
	Для Каждого Переменная Из Переменные Цикл
		Конструктор
			.НоваяСтрокаПоШаблону("ЗаменяемыеЗначения.Вставить(""%1"", %2);", Переменная.ИмяПеременной, Переменная.ИмяПеременной);
	КонецЦикла;

КонецПроцедуры

Функция ИмяПеременной(Реквизит)
	
	Если Реквизит.НомерСтроки = "" Тогда
		ИмяПеременной = СтрШаблон("%1%2", Реквизит.Имя, Реквизит.НомерСтроки);
	Иначе
		ИмяПеременной = СтрШаблон("%1Стр%2", Реквизит.Имя, Реквизит.НомерСтроки);
	КонецЕсли;

	Возврат ИмяПеременной;
	
КонецФункции

Функция ЭтоРеквизитИсключен(Знач Реквизит)
	
	Возврат СтрНайти("Проведен,Ссылка,ПометкаУдаления,Предопределенный,ЭтоГруппа,ИмяПредопределенныхДанных", Реквизит.Имя) <> 0;
	
КонецФункции

#КонецОбласти

#Область ЭталоныДвижений

Функция ЭталоныДвиженийДокумента(ДвиженияОбъекта, Переменные)
	
	ЭталоныДвижений = Новый Структура;
	
	Для Каждого Движения Из ДвиженияОбъекта Цикл			
		ЭталонДвижений = ПодготовитьЭталонТаблицыЗначений(Движения.Значение, Переменные);
		ЭталоныДвижений.Вставить(Движения.Ключ, ЭталонДвижений);
	КонецЦикла;
	
	Возврат ЭталоныДвижений;

КонецФункции

Функция ПодготовитьЭталонТаблицыЗначений(ТаблицаДляЗагрузки, Переменные)
	
	ДанныеЭталона = Новый Структура;
	ДанныеЭталона.Вставить("ТипыКолонок");
	ДанныеЭталона.Вставить("ТаблицаДляМакета");
	
	ТипыКолонок = Новый Структура;
	ТаблицаДляМакета = Новый ТаблицаЗначений;
	
	Для Каждого Колонка Из ТаблицаДляЗагрузки.Колонки Цикл
		Если Колонка.Имя = "Регистратор"
			ИЛИ Колонка.Имя = "МоментВремени"
			ИЛИ СтрНачинаетсяС(Колонка.Имя, "ВидСубконто") Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаДляМакета.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Для Каждого Стр Из ТаблицаДляЗагрузки Цикл
		НоваяСтрока = ТаблицаДляМакета.Добавить();
		
		Для Каждого Колонка Из ТаблицаДляЗагрузки.Колонки Цикл
			
			Если Колонка.Имя = "Регистратор"
				ИЛИ Колонка.Имя = "МоментВремени"
				ИЛИ СтрНачинаетсяС(Колонка.Имя, "ВидСубконто") Тогда
				Продолжить;
			КонецЕсли;
			
			Значение = Стр[Колонка.Имя];

			Если Не ЗначениеРеквизитаЗаполнено(Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭтоПримитивныйТип(Значение) Тогда
				НоваяСтрока[Колонка.Имя] = Значение;
			Иначе
				НайденноеЗначение = Переменные.Найти(Значение, "Значение");
				
				Если НайденноеЗначение = Неопределено Тогда
					ОбогащенноеЗначение = ПодготовленныеДанныеРеквизита(Колонка.Имя, Значение, Стр.НомерСтроки);
					ДобавитьНовуюПеременную(Переменные, ОбогащенноеЗначение);
					
					НоваяСтрока[Колонка.Имя] = ОбогащенноеЗначение.ИмяПеременной;
				Иначе
					НоваяСтрока[Колонка.Имя] = НайденноеЗначение.ИмяПеременной;
				КонецЕсли;
			КонецЕсли;
			
			Если ТипыКолонок.Свойство(Колонка.Имя) Тогда
				МассивТипов = ТипыКолонок[Колонка.Имя].Типы();
				МассивТипов.Добавить(ТипЗнч(Значение));
			Иначе
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(ТипЗнч(Значение));
			КонецЕсли; 
			
			ТипыКолонок.Вставить(Колонка.Имя, Новый ОписаниеТипов(МассивТипов));
		КонецЦикла;
		
	КонецЦикла;

	ДанныеЭталона.ТипыКолонок = ТипыКолонок;
	ДанныеЭталона.ТаблицаДляМакета = ТаблицаДляМакета;

	Возврат ДанныеЭталона;
	
КонецФункции

Процедура СформироватьКодПодготовкиЭталонов(ЭталоныДвижений, Переменные, Конструктор)
				
	КэшТипов = Новый Соответствие;
	
	Для Каждого Эталон Из ЭталоныДвижений Цикл
		
		ДанныеЭталона = Эталон.Значение;
		
		Конструктор
			.НоваяСтрокаПоШаблону("Функция ДанныеДвижений%1(ИмяМакета, ЗаменяемыеЗначения) Экспорт",  Эталон.Ключ).ПереносСтроки()
			.НоваяСтрока("// Соответствие типов")
				.Табуляция(1)
			.НоваяСтрока("СоответствиеТипов = Новый Соответствие;")
				.Табуляция(1)
				.ПереносСтроки()
		;
		
		Для Каждого ТипыКолонки Из ДанныеЭталона.ТипыКолонок Цикл	
			Конструктор
				.НоваяСтрока("// " + ТипыКолонки.Ключ)
					.Табуляция(1)	
				.НоваяСтрока("МассивТипов = Новый Массив;")
					.Табуляция(1);
				
				ВозможныеТипыОбъекта = ТипыКолонки.Значение.Типы();

				Для Каждого ТипОбъекта Из ВозможныеТипыОбъекта Цикл
					ТипСтрокой = КэшТипов[ТипОбъекта];
					
					Если ТипСтрокой = Неопределено Тогда
						ТипСтрокой = СтроковоеПредставлениеТипа(ТипОбъекта);
						КэшТипов[ТипОбъекта] = ТипСтрокой;
					КонецЕсли;

					Конструктор.НоваяСтрокаПоШаблону("МассивТипов.Добавить(%1);", ТипСтрокой).Табуляция(1);
				КонецЦикла;
				
			Конструктор
				.НоваяСтрока("ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);")
					.Табуляция(1)
				.НоваяСтрокаПоШаблону("СоответствиеТипов.Вставить(""%1"", ОписаниеТипов);", ТипыКолонки.Ключ)
					.Табуляция(1)
					.ПереносСтроки()
			;
		КонецЦикла;
		
		Конструктор
			.НоваяСтрока("Макет = ПолучитьМакет(ИмяМакета);")
				.Табуляция(1)
			.НоваяСтрока("ПараметрыСозданияОбъектов = Новый Структура(""ФикцияОбязательныхПолей,ОбменДаннымиЗагрузка"", Истина, Истина);")
				.Табуляция(1)
			.НоваяСтрока("ДанныеДляЗаписи = Ютест.Данные().ЗагрузитьИзМакета(Макет, СоответствиеТипов,, ЗаменяемыеЗначения, ПараметрыСозданияОбъектов);")
				.Табуляция(1)
				.ПереносСтроки()
			.НоваяСтрока("Возврат ДанныеДляЗаписи;")
				.Табуляция(1)
				.ПереносСтроки()
			.НоваяСтрока("КонецФункции");	
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьМакетыЭталонов(ЭталоныДвижений)
		
	МакетыЭталонов = Новый Структура;
	
	Для Каждого Эталон Из ЭталоныДвижений Цикл
		МакетыЭталонов.Вставить(Эталон.Ключ, ТабличныйДокументИзТаблицы (Эталон.Значение.ТаблицаДляМакета));	
	КонецЦикла;	
	
	Возврат МакетыЭталонов;
	
КонецФункции

#КонецОбласти

#Область Конструкторы

Функция Переменные()
	
	Переменные = Новый ТаблицаЗначений;
	Переменные.Колонки.Добавить("ИмяПеременной");
	Переменные.Колонки.Добавить("Имя");
	Переменные.Колонки.Добавить("Тип");
	Переменные.Колонки.Добавить("Значение");
	Переменные.Колонки.Добавить("КодИнициализации");
	Переменные.Колонки.Добавить("НомерСтроки");
	Переменные.Колонки.Добавить("Порядок");
	
	Возврат Переменные;
	
КонецФункции

Процедура ДобавитьНовуюПеременную(Переменные, ОбогащенныйРеквизит)
	
	НоваяПеременная = Переменные.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяПеременная, ОбогащенныйРеквизит);
		
	ПорядокСортировкиПеременных = ЮТТестовыеДанныеПереопределяемый.ПорядокСортировкиПеременных();
	
	Порядок = ПорядокСортировкиПеременных[НоваяПеременная.Тип];
	НоваяПеременная.Порядок = ?(Порядок = Неопределено, 99, Порядок);
	
	Если ЗначениеЗаполнено(НоваяПеременная.КодИнициализации) Тогда
		Возврат;
	КонецЕсли;
	
	КодИнициализацииПоЗначению = КодИнициализацииПоЗначению(ОбогащенныйРеквизит.Значение);
	НоваяПеременная.КодИнициализации = КодИнициализацииПоЗначению;

КонецПроцедуры

Функция ПодготовленныеДанныеРеквизита(ИмяРеквизита, Значение, НомерСтроки = "", КодИнициализации = "")
	
	ДанныеРеквизита = Новый Структура;
	ДанныеРеквизита.Вставить("Имя", ИмяРеквизита);
	ДанныеРеквизита.Вставить("Значение", Значение);
	ДанныеРеквизита.Вставить("Тип",ТипЗнч(Значение));
	ДанныеРеквизита.Вставить("ЭтоПримитивныйТип", ЭтоПримитивныйТип(Значение));
	ДанныеРеквизита.Вставить("НомерСтроки", НомерСтроки);
	ДанныеРеквизита.Вставить("КодИнициализации", КодИнициализации);
	ДанныеРеквизита.Вставить("ИмяПеременной", ИмяПеременной(ДанныеРеквизита));
	
	Возврат ДанныеРеквизита;
	
КонецФункции

Функция ПодготовленныеДанныеТЧ(Имя, Строки)
	
	ДанныеРеквизита = Новый Структура;
	ДанныеРеквизита.Вставить("Имя", Имя);
	ДанныеРеквизита.Вставить("Строки", Строки);
	
	Возврат ДанныеРеквизита;
	
КонецФункции

#КонецОбласти

#Область ШаблоныКода

Функция ОсновнаяПеременная()

	Возврат "ТестовыйОбъект";
	
КонецФункции

Функция ШаблонВызоваКонструктораОбъекта()

	Шаблон = СтрШаблон("// Конструктор объекта '%2'
							|%1 = Ютест.Данные()
							|		.КонструкторОбъекта(""%2"")", ОсновнаяПеременная(), "%1");

	Возврат Шаблон;

КонецФункции

Функция ШаблонВызоваКонструктораДвижений()

	Шаблон = "// Конструктор Движений документа %1 по регистру '%3'
							|Движения%2 = Ютест.Данные()
							|	.КонструкторДвижений(%2, ""%3"")";

	Возврат Шаблон;

КонецФункции

Функция ШаблонПереходНаКонтекстТЧ()

	Шаблон = СтрШаблон("// ТЧ '%2'
							|ТЧ = %1
							|	.ТабличнаяЧасть(""%2"")
							|;", ОсновнаяПеременная(), "%1");
	
	Возврат Шаблон;

КонецФункции

Функция КодИнициализацииПоТипам()
	
	КодИнициализации = Новый Соответствие;
	
	ЮТТестовыеДанныеПереопределяемый.КодИнициализацииПоТипам(КодИнициализации);
	
	Возврат КодИнициализации;
		
КонецФункции

Функция КодИнициализацииПоЗначению(Значение)

	Если ЭтоПримитивныйТип(Значение) Тогда
		Возврат КодДляЗначенияПримитивногоТипа(Значение);
	КонецЕсли;
	
	МетаданныеЗначения = Значение.Метаданные();
	ШаблонКодаИнициализации = "ПредопределенноеЗначение(""%1.%2"");";
	
	Если ЮТМетаданные.ЭтоПеречисление(МетаданныеЗначения) Тогда
		Возврат СтрШаблон(ШаблонКодаИнициализации, МетаданныеЗначения.ПолноеИмя(), XMLСтрока(Значение)); 
		
	ИначеЕсли ЮТМетаданные.ЭтоСправочник(МетаданныеЗначения) 
			Или ЮТМетаданные.ЭтоПланСчетов(МетаданныеЗначения) 
			Или ЮТМетаданные.ЭтоПланВидовХарактеристик(МетаданныеЗначения) Тогда
			
		Если Значение.Предопределенный Тогда
			Возврат СтрШаблон(ШаблонКодаИнициализации, МетаданныеЗначения.ПолноеИмя(), Значение.ИмяПредопределенныхДанных); 
		Иначе
			ПостоянныеДанные = ЮТТестовыеДанныеПереопределяемый.ПостоянныеДанные();
			ТипЗначения = ТипЗнч(Значение);
			
			ПолеПоиска = ПостоянныеДанные[ТипЗначения];
			
			Если Не ПолеПоиска = Неопределено Тогда
				ОписаниеОбъектаМетаданных = ЮТМетаданные.ОписаниеОбъектаМетаданных(Значение.Метаданные());
				
				Если ПолеПоиска = "Код" Тогда
					Возврат СтрШаблон("%1.%2.НайтиПоКоду(""%3""); // %4", ОписаниеОбъектаМетаданных.ОписаниеТипа.ИмяКоллекции, ОписаниеОбъектаМетаданных.Имя, Значение.Код, Значение.Наименование);
				ИначеЕсли ПолеПоиска = "Наименование" Тогда
					Возврат СтрШаблон("%1.%2.НайтиПоНаименованию(""%3"");", ОписаниеОбъектаМетаданных.ОписаниеТипа.ИмяКоллекции, ОписаниеОбъектаМетаданных.Имя, Значение.Наименование);
				КонецЕсли;
			КонецЕсли;
			
			КодИнициализацииПоТипам = КодИнициализацииПоТипам();
			КодИнициализацииПоТипу = КодИнициализацииПоТипам[ТипЗначения];
			
			Если ЗначениеЗаполнено(КодИнициализацииПоТипу) Тогда
				Возврат СтрШаблон(КодИнициализацииПоТипу, Строка(Значение));
			Иначе
				ПолноеИмяПоЗначению =  Значение.Метаданные().ПолноеИмя();	
				Возврат СтрШаблон("Ютест.Данные().СоздатьЭлемент(""%1"", ""%2""); // %2", ПолноеИмяПоЗначению, Строка(Значение));
			КонецЕсли;
	
		КонецЕсли;
	ИначеЕсли ЮТМетаданные.ЭтоДокумент(МетаданныеЗначения) Тогда
		ПолноеИмяПоЗначению =  Значение.Метаданные().ПолноеИмя();	
		Возврат СтрШаблон("Ютест.Данные().СоздатьДокумент(""%1""); // %2", ПолноеИмяПоЗначению, Строка(Значение));
	Иначе
		Возврат "Неопределено;";
	КонецЕсли;	
		
КонецФункции

Функция ЭтоПримитивныйТип(Значение)
	
	Возврат ТипЗнч(Значение) = Тип("Булево") 
		Или ТипЗнч(Значение) = Тип("Строка") 
		Или ТипЗнч(Значение) = Тип("Дата")
		Или ТипЗнч(Значение) = Тип("МоментВремени")
		Или ТипЗнч(Значение) = Тип("Число")
		Или ТипЗнч(Значение) = Тип("Неопределено")
		Или ТипЗнч(Значение) = Тип("Null");

КонецФункции

Функция КодДляЗначенияПримитивногоТипа(Значение)
	
	Возврат СтрШаблон("XMLЗначение(Тип(""%1""), ""%2"")", ТипЗнч(Значение), XMLСтрока(Значение));

КонецФункции

Функция СтроковоеПредставлениеТипа(Тип) 
	
	Представление = "";
	
	Если ЭтоСсылка(Тип) Тогда
	
		ПолноеИмя = Метаданные.НайтиПоТипу(Тип).ПолноеИмя();
		ИмяОбъекта = СтрРазделить(ПолноеИмя, ".")[1];
		
		Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "СправочникСсылка";
		
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ДокументСсылка";
		
		ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "БизнесПроцессСсылка";
		
		ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланВидовХарактеристикСсылка";
		
		ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланСчетовСсылка";
		
		ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланВидовРасчетаСсылка";
		
		ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ЗадачаСсылка";
		
		ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланОбменаСсылка";
		
		ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПеречислениеСсылка";
		
		КонецЕсли;
		
		Представление = ?(Представление = "", Представление, Представление + "." + ИмяОбъекта);
		
	Иначе
		
		Представление = Строка(Тип);
		
	КонецЕсли;
	
	Результат = СтрШаблон("Тип(""%1"")", Представление);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбщегоНазначения

Функция ЗначениеРеквизитаЗаполнено(Знач ЗначениеРеквизита)
	
	Возврат ЗначениеЗаполнено(ЗначениеРеквизита) И ЗначениеРеквизита <> Ложь;
	
КонецФункции

Функция ТабличныйДокументИзТаблицы(Таблица)
	
	ТабДокумент	= Новый ТабличныйДокумент;
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	// Выводим заголовок таблицы
	КолонкаИндекс = 0;
	Пока КолонкаИндекс < Таблица.Колонки.Количество() Цикл
		Колонка = Таблица.Колонки[КолонкаИндекс];
		Ячейка = ТабДокумент.Область(1, КолонкаИндекс + 1, 1, КолонкаИндекс + 1);
		Ячейка.Текст = Колонка.Имя; 
		
		Ячейка.ГраницаСверху = Линия;
		Ячейка.ГраницаСлева = Линия;
		Ячейка.ГраницаСправа= Линия;
		Ячейка.ГраницаСнизу = Линия;

		КолонкаИндекс = КолонкаИндекс + 1;
	КонецЦикла;
	
	// Выводим строки таблицы
	СтрокаИндекс = 0;
	Пока СтрокаИндекс < Таблица.Количество() Цикл
		Таблица_Строка = Таблица[СтрокаИндекс];
		КолонкаИндекс = 0;
		Пока КолонкаИндекс < Таблица.Колонки.Количество() Цикл
			Колонка = Таблица.Колонки[КолонкаИндекс];
			Ячейка = ТабДокумент.Область(СтрокаИндекс + 2, КолонкаИндекс + 1, СтрокаИндекс + 2, КолонкаИндекс + 1);
			Ячейка.Текст = Формат(Таблица_Строка[Колонка.Имя], "ЧГ=0");

			Ячейка.ГраницаСверху = Линия;
			Ячейка.ГраницаСлева = Линия;
			Ячейка.ГраницаСправа= Линия;
			Ячейка.ГраницаСнизу = Линия;

			КолонкаИндекс = КолонкаИндекс + 1;
		КонецЦикла;
		СтрокаИндекс = СтрокаИндекс + 1;
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ЭтоСсылка(ПроверяемыйТип)
	
	Возврат ПроверяемыйТип <> Тип("Неопределено") И ОписаниеТипаВсеСсылки().СодержитТип(ПроверяемыйТип);
	
КонецФункции

Функция ОписаниеТипаВсеСсылки() 
	
	Возврат Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(
		Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(
			Справочники.ТипВсеСсылки(),
			Документы.ТипВсеСсылки().Типы()),
			ПланыОбмена.ТипВсеСсылки().Типы()),
			Перечисления.ТипВсеСсылки().Типы()),
			ПланыВидовХарактеристик.ТипВсеСсылки().Типы()),
			ПланыСчетов.ТипВсеСсылки().Типы()),
			ПланыВидовРасчета.ТипВсеСсылки().Типы()),
			БизнесПроцессы.ТипВсеСсылки().Типы()),
			БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().Типы()),
			Задачи.ТипВсеСсылки().Типы());
	
КонецФункции

#КонецОбласти

#КонецОбласти

