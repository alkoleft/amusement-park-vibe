//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2025 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

// BSLLS:NonStandardRegion-off
#Область ОписаниеПеременных

// см. ЮТКонструкторТестовыхДанныхСлужебный.НовыйКонтекстКонструктора
&НаКлиенте
Перем Контекст;

#КонецОбласти

//@skip-check module-structure-top-region
#Область ПрограммныйИнтерфейс

#Область УстановкаЗначение

// Добавляет новую запись в набор движений.
// При необходимости можно выполнить установку реквизитов новой записи.
// 
// Параметры:
//  ЗначенияРеквизитов - Структура - Устанавливаемые значения реквизитов новой записи.
//                     - Неопределено - Строка добавляется с пустыми значениями (по умолчанию).
// 
// Возвращаемое значение:
//  ФормаКлиентскогоПриложения - Текущая форма конструктора для цепочки вызовов.
//
// Пример:
//  // Контекст должен быть инициализирован через вызов Инициализировать()
//  ЮТест.Данные().КонструкторДвижений(Док, "РегистрНакопления.ТоварыНаСкладах")
//      .ДобавитьСтроку(Новый Структура("СчетДебета, Сумма", ПланыСчетов.Хозрасчетный.Товары, 1000));
//
&НаКлиенте
Функция ДобавитьСтроку(ЗначенияРеквизитов = Неопределено) Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.ДобавитьСтрокуНабора(Контекст, ЗначенияРеквизитов);
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает значение реквизита текущей записи набора.
// 
// Параметры:
//  ИмяРеквизита - Строка - Имя реквизита записи.
//  Значение - Произвольный - Значение реквизита записи.
// 
// Возвращаемое значение:
//  ФормаКлиентскогоПриложения - Текущая форма конструктора для цепочки вызовов.
//
// Пример:
//  ЮТест.Данные().КонструкторДвижений(Док, "РегистрНакопления.ТоварыНаСкладах")
//      .ДобавитьСтроку()
//      .Установить("Номенклатура", МояНоменклатура);
//
&НаКлиенте
Функция Установить(ИмяРеквизита, Значение) Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.Установить(Контекст, ИмяРеквизита, Значение);
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает значения реквизитов текущей записи набора.
// 
// Параметры:
//  ЗначенияРеквизитов - Структура - Устанавливаемые значения реквизитов. Ключ структуры - имя реквизита, Значение - значение реквизита.
// 
// Возвращаемое значение:
//  ФормаКлиентскогоПриложения - Текущая форма конструктора для цепочки вызовов.
//
// Пример:
//  Конструктор = ЮТест.Данные().КонструкторДвижений(Док, "РегистрНакопления.ТоварыНаСкладах");
//  РеквизитыЗаписи = Новый Структура("Склад, Количество", МойСклад, 10);
//  ЮТест.Данные().КонструкторДвижений(Док, "РегистрНакопления.ТоварыНаСкладах")
//      .ДобавитьСтроку()
//      .УстановитьРеквизиты(РеквизитыЗаписи);
//
&НаКлиенте
Функция УстановитьРеквизиты(ЗначенияРеквизитов) Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.УстановитьРеквизиты(Контекст, ЗначенияРеквизитов);
	Возврат ЭтотОбъект;
	
КонецФункции

// Генерирует фиктивное значение для указанного реквизита. Для ссылочных типов создает новый объект, для примитивных - случайное значение.
// 
// На основании менеджера и имени реквизита вычисляется его тип, а по типу генерируется фиктивное значение:
// * Для примитивных значение генерируется случайное значение.
// * Для ссылочных типов создается новый объект.
// * Для перечислений (в том числе системных) выбирается случайно значение перечисления.
// 
// Параметры:
//  ИмяРеквизита - Строка - Имя реквизита записи.
//  РеквизитыЗаполнения - Структура - Значения реквизитов заполнения создаваемого объекта базы (если реквизит ссылочного типа).
//                      - Неопределено - Новый ссылочный объект будет создан с пустыми или фиктивными реквизитами по умолчанию.
//  ОграничениеТипа - Тип - Используется для ограничения типа составного реквизита, будет сгенерировано значение указанного типа.
//                  - ОписаниеТипов - Используется для ограничения типа составного реквизита.
//                  - Неопределено - Будет сгенерировано значение на основании типа реквизита,
//                                   если реквизит составной, то будет использован случайный тип.
// 
// Возвращаемое значение:
//  ФормаКлиентскогоПриложения - Текущая форма конструктора для цепочки вызовов.
//
// Пример:
//  ЮТест.Данные().КонструкторДвижений(Док, "РегистрНакопления.ТоварыНаСкладах")
//      .ДобавитьСтроку()
//      .Фикция("Период"); // Заполнит случайной датой
//
&НаКлиенте
Функция Фикция(ИмяРеквизита, РеквизитыЗаполнения = Неопределено, ОграничениеТипа = Неопределено) Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.Фикция(Контекст, ИмяРеквизита, РеквизитыЗаполнения, ОграничениеТипа);
	Возврат ЭтотОбъект;
	
КонецФункции

// Генерирует фиктивные значения для нескольких реквизитов.
// 
// На основании менеджера и имени реквизита вычисляется его тип, а по типу генерируется фиктивное значение:
// * Для примитивных значение генерируется случайное значение.
// * Для ссылочных типов создается новый объект.
// * Для перечислений (в том числе системных) выбирается случайно значение перечисления.
// 
// Параметры:
//  ИменаРеквизитов - Строка - Имена реквизитов записи, разделенные запятыми.
//                  - Массив из Строка - Массив имен реквизитов записи.
// 
// Возвращаемое значение:
//  ФормаКлиентскогоПриложения - Текущая форма конструктора для цепочки вызовов.
//
// Пример:
//  ЮТест.Данные().КонструкторДвижений(Док, "РегистрНакопления.ТоварыНаСкладах")
//      .ДобавитьСтроку()
//      .ФикцияРеквизитов("Регистратор, НомерСтроки");
//
&НаКлиенте
Функция ФикцияРеквизитов(ИменаРеквизитов) Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.ФикцияРеквизитов(Контекст, ИменаРеквизитов, Ложь);
	Возврат ЭтотОбъект;
	
КонецФункции

// Генерирует фиктивные значения только для незаполненных реквизитов.
// 
// На основании менеджера и имени реквизита вычисляется его тип, а по типу генерируется фиктивное значение:
// * Для примитивных значение генерируется случайное значение.
// * Для ссылочных типов создается новый объект.
// * Для перечислений (в том числе системных) выбирается случайно значение перечисления.
// 
// Параметры:
//  ИменаРеквизитов - Строка - Имена реквизитов записи, разделенные запятыми.
//                  - Массив из Строка - Массив имен реквизитов записи.
// 
// Возвращаемое значение:
//  ФормаКлиентскогоПриложения - Текущая форма конструктора для цепочки вызовов.
//
// Пример:
//  ЮТест.Данные().КонструкторДвижений(Док, "РегистрНакопления.ТоварыНаСкладах")
//      .ДобавитьСтроку()
//      .Установить("Активность", Истина)
//      .ФикцияНезаполненных("Период, Регистратор"); // Заполнит только Период и Регистратор
//
&НаКлиенте
Функция ФикцияНезаполненных(ИменаРеквизитов) Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.ФикцияРеквизитов(Контекст, ИменаРеквизитов, Истина);
	Возврат ЭтотОбъект;
	
КонецФункции

// Автоматически заполняет все обязательные поля регистра фиктивными значениями.
// 
// На основании метаданных определяются обязательные поля (Проверка заполнения = Выдавать ошибку),
// для них генерируются и устанавливаются фиктивные значения:
// * Для примитивных значение генерируется случайное значение.
// * Для ссылочных типов создается новый объект.
// * Для перечислений (в том числе системных) выбирается случайно значение перечисления.
// 
// Возвращаемое значение:
//  ФормаКлиентскогоПриложения - Текущая форма конструктора для цепочки вызовов.
//
// Пример:
//  ЮТест.Данные().КонструкторДвижений(Док, "РегистрНакопления.ТоварыНаСкладах")
//      .ДобавитьСтроку()
//      .ФикцияОбязательныхПолей();
//
&НаКлиенте
Функция ФикцияОбязательныхПолей() Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.ФикцияОбязательныхПолей(Контекст);
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает дополнительное свойство набора записей.
// 
// Параметры:
//  ИмяСвойства - Строка - Имя дополнительного свойства.
//  Значение - Произвольный - Значение дополнительного свойства (по умолчанию Неопределено).
// 
// Возвращаемое значение:
//  ФормаКлиентскогоПриложения - Текущая форма конструктора для цепочки вызовов.
//
// Пример:
//  ЮТест.Данные().КонструкторДвижений(Док, "РегистрНакопления.ТоварыНаСкладах")
//      .УстановитьДополнительноеСвойство("ЗаписыватьПриПроведении", Ложь);
//
&НаКлиенте
Функция УстановитьДополнительноеСвойство(ИмяСвойства, Значение = Неопределено) Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.УстановитьДополнительноеСвойство(Контекст, ИмяСвойства, Значение);
	Возврат ЭтотОбъект;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанных

// Возвращает данные текущей записи движений.
// 
// Возвращаемое значение:
//  Структура - Данные текущей заполняемой записи. Ключи - имена реквизитов, значения - их значения.
//
// Пример:
//  ДанныеЗаписи = ЮТест.Данные().КонструкторДвижений(Док, "РегистрНакопления.ТоварыНаСкладах")
//      .ДобавитьСтроку()
//      .Установить("СуммаРегл", 125.50)
//      .ДанныеСтроки();
//  Сообщить(ДанныеЗаписи.СуммаРегл); // Выведет 125.50
//
&НаКлиенте
Функция ДанныеСтроки() Экспорт
	
	Возврат ЮТКонструкторТестовыхДанныхСлужебный.ДанныеСтрокиКоллекции(Контекст);
	
КонецФункции

// Возвращает все записи движений.
// 
// Возвращаемое значение:
//  Массив из Структура - Массив структур, где каждая структура представляет одну запись набора.
//
// Пример:
//  ВсеДанные = ЮТест.Данные().КонструкторДвижений(Док, "РегистрНакопления.ТоварыНаСкладах")
//      .ДобавитьСтроку()
//          .Установить("Поле1", "А")
//      .ДобавитьСтроку()
//          .Установить("Поле1", "Б")
//      .Данные();
//  Сообщить(ВсеДанные.Количество()); // Выведет 2
//  Сообщить(ВсеДанные[0].Поле1); // Выведет "А"
//
&НаКлиенте
Функция Данные() Экспорт
	
	Возврат ЮТКонструкторТестовыхДанныхСлужебный.ДанныеОбъекта(Контекст);
	
КонецФункции

#КонецОбласти

// Сохраняет сформированные движения документа.
// 
// Параметры:
//  ОбменДаннымиЗагрузка - Булево - Если Истина, движения будут записаны с признаком `ОбменДанными.Загрузка = Истина`.
//                       - Неопределено - Используется значение по умолчанию (обычно Ложь или из настроек).
//
// Пример:
//  ЮТест.Данные().КонструкторДвижений(Док, "РегистрНакопления.ТоварыНаСкладах")
//      .ДобавитьСтроку()
//      .ФикцияОбязательныхПолей()
//      .Записать(); // Запишет сформированные движения
//
&НаКлиенте
Процедура Записать(ОбменДаннымиЗагрузка = Неопределено) Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.ЗаписатьДвиженияДокумента(Контекст, ОбменДаннымиЗагрузка);
	
КонецПроцедуры

#КонецОбласти

//@skip-check module-structure-top-region
#Область СлужебныйПрограммныйИнтерфейс

// Инициализирует конструктор для работы с движениями определенного документа и регистра.
// Этот метод должен быть вызван для настройки конструктора перед его использованием.
//
// Параметры:
//  Документ - ДокументСсылка - Документ-регистратор, для которого будут формироваться движения.
//  ИмяРегистра - Строка - Полное имя регистра, по которому будут формироваться движения (например, "РегистрНакопления.ТоварыНаСкладах").
//
// Пример:
//  // В коде формы, например, при открытии или по кнопке
//  Док = ПолучитьСсылкуНаДокумент(); // Функция получения ссылки на документ-регистратор
//  ИмяНужногоРегистра = "РегистрНакопления.ВзаиморасчетыСПоставщиками";
//  ЭтотОбъект.Инициализировать(Док, ИмяНужногоРегистра);
//  // Теперь форма готова к добавлению и записи движений для указанного документа и регистра.
//
&НаКлиенте
Процедура Инициализировать(Документ, ИмяРегистра) Экспорт
	
	Контекст = ЮТКонструкторТестовыхДанныхСлужебный.НовыйКонтекстКонструктораДвижений(Документ, ИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

// Генерирует фиктивные значения для незаполненных реквизитов, исключая указанные
// 
// На основании менеджера и имени реквизита вычисляется его тип, а по типу генерируется фиктивное значение.
// 
// * Для примитивных значение генерируется случайное значение
// * Для ссылочных типов создается новый объект
// * Для перечислений (в том числе системных) выбирается случайно значение перечисления
// 
// Параметры:
//  ИменаИсключений - Строка - Имена исключаемых реквизитов записи разделенные запятыми
//                  - Массив из Строка - Имена исключаемых реквизитов записи
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторДвижений - Конструктор
//
// Пример:
//  Док = ЮТест.Данные().СоздатьДокумент("Документы.ПриходТовара");
//  Товар = ЮТест.Данные().СоздатьЭлемент("Справочники.Товары");
//  
//  Конструктор = ЮТест.Данные().КонструкторДвижений(Док, "ТоварныеЗапасы");
//  Конструктор.ДобавитьСтроку()
//      .Установить("Товар", Товар)
//      .ФикцияНезаполненныхИсключая("Количество");
&НаКлиенте
Функция ФикцияНезаполненныхИсключая(ИменаИсключений) Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.ФикцияРеквизитов(Контекст, ИменаИсключений, Истина, Истина);
	Возврат ЭтотОбъект;
	
КонецФункции

// BSLLS:NonStandardRegion-on
