//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2025 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Если Сервер Тогда

#Область ОписаниеПеременных

// Содержит объект защищенного соединения для осуществления HTTPS-соединения.
Перем ЗащищенноеСоединение Экспорт;
Перем SecureConnection Экспорт; // ENG

// Содержит текущее значение использования аутентификации NTLM или Negotiate на сервере.
Перем ИспользоватьАутентификациюОС Экспорт;
Перем UseOSAuthentication Экспорт; // ENG

// Пароль пользователя, от имени которого установлено соединение.
Перем Пароль Экспорт;
Перем Password Экспорт; // ENG

// Пользователь, от имени которого установлено соединение.
Перем Пользователь Экспорт;
Перем User Экспорт; // ENG

// Порт сервера, с которым произведено соединение.
Перем Порт Экспорт;
Перем Port Экспорт; // ENG

// Прокси, через который установлено соединение.
Перем Прокси Экспорт;
Перем Proxy Экспорт; // ENG

// Сервер, с которым произведено соединение.
Перем Сервер Экспорт;
Перем Host Экспорт; // ENG

// Определяет время ожидания осуществляемого соединения и операций, в секундах.
Перем Таймаут Экспорт;
Перем Timeout Экспорт; // ENG

// Контекст конструктора
Перем Контекст;

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область HTTPСоединение

// Отправляет данные на указанный адрес для обработки с использованием указанного HTTP-метода (ENG).
//
// Параметры:
//  HTTPМетод - Строка - Строка, содержащая имя HTTP-метода для запроса (например, "GET", "POST").
//  HTTPЗапрос - HTTPЗапрос - Системный объект HTTP-запроса, содержащий адрес, заголовки и тело запроса.
//  ИмяВыходногоФайла - Строка - (необязательный) Имя файла, в который будет записано тело ответа.
//                     - Неопределено - Тело ответа не будет записано в файл.
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТHTTPОтвет - Мок-объект ответа HTTP-сервера на запрос.
//
// Пример:
//  МокСоединение = ЮТест.Данные().HTTPСоединение();
//  МокОтвет = ЮТест.Данные().HTTPОтвет().КодСостояния(200);
//  МокСоединение.УстановитьHTTPОтвет(МокОтвет);
//  
//  Запрос = Новый HTTPЗапрос("/api/data");
//  Ответ = МокСоединение.CallHTTPMethod("GET", Запрос);
//  ЮТест.ОжидаетЧто(Ответ.КодСостояния).Равно(200);
//
Функция CallHTTPMethod(HTTPМетод, HTTPЗапрос, ИмяВыходногоФайла = "") Экспорт
	
	Возврат ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос, ИмяВыходногоФайла);
	
КонецФункции

// Отправляет данных на HTTP-сервер с помощью PUT-запроса (ENG).
//
// Параметры:
//  HTTPЗапрос - HTTPЗапрос - Системный объект HTTP-запроса.
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТHTTPОтвет - Мок-объект ответа HTTP-сервера на запрос.
//
// Пример:
//  МокСоединение = ЮТест.Данные().HTTPСоединение();
//  МокОтвет = ЮТест.Данные().HTTPОтвет().КодСостояния(200);
//  МокСоединение.УстановитьHTTPОтвет(МокОтвет);
//  
//  Запрос = Новый HTTPЗапрос("/api/resource/123");
//  // Запрос.УстановитьТелоИзСтроки(...)
//  Ответ = МокСоединение.Put(Запрос);
//  ЮТест.ОжидаетЧто(Ответ.КодСостояния).Равно(200);
//
Функция Put(HTTPЗапрос) Экспорт
	
	Возврат Записать(HTTPЗапрос);
	
КонецФункции

// Изменяет данные на сервере при помощи PATCH-запроса (ENG).
//
// Параметры:
//  HTTPЗапрос - HTTPЗапрос - Системный объект HTTP-запроса.
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТHTTPОтвет - Мок-объект ответа HTTP-сервера на запрос.
//
// Пример:
//  МокСоединение = ЮТест.Данные().HTTPСоединение();
//  МокОтвет = ЮТест.Данные().HTTPОтвет().КодСостояния(200);
//  МокСоединение.УстановитьHTTPОтвет(МокОтвет);
//  
//  Запрос = Новый HTTPЗапрос("/api/resource/123");
//  // Запрос.УстановитьТелоИзСтроки("{ ""field"": ""new_value"" }")
//  Ответ = МокСоединение.Patch(Запрос);
//  ЮТест.ОжидаетЧто(Ответ.КодСостояния).Равно(200);
//
Функция Patch(HTTPЗапрос) Экспорт
	
	Возврат Изменить(HTTPЗапрос);
	
КонецФункции

// Отправляет данных на HTTP-сервер с помощью POST-запроса (ENG).
//
// Параметры:
//  HTTPЗапрос - HTTPЗапрос - Системный объект HTTP-запроса.
//  ИмяВыходногоФайла - Строка - (необязательный) Имя файла, в который будет записано тело ответа.
//                     - Неопределено - Тело ответа не будет записано в файл.
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТHTTPОтвет - Мок-объект ответа HTTP-сервера на запрос.
//
// Пример:
//  МокСоединение = ЮТест.Данные().HTTPСоединение();
//  МокОтвет = ЮТест.Данные().HTTPОтвет().КодСостояния(201);
//  МокСоединение.УстановитьHTTPОтвет(МокОтвет);
//  
//  Запрос = Новый HTTPЗапрос("/api/new_resource");
//  // Запрос.УстановитьТелоИзСтроки(...)
//  Ответ = МокСоединение.Post(Запрос);
//  ЮТест.ОжидаетЧто(Ответ.КодСостояния).Равно(201);
//
Функция Post(HTTPЗапрос, ИмяВыходногоФайла = "") Экспорт
	
	Возврат ОтправитьДляОбработки(HTTPЗапрос, ИмяВыходногоФайла);
	
КонецФункции

// Получает данные с HTTP-сервера, используя GET-запрос (ENG).
//
// Параметры:
//  HTTPЗапрос - HTTPЗапрос - Системный объект HTTP-запроса.
//  ИмяВыходногоФайла - Строка - (необязательный) Имя файла, в который будет записано тело ответа.
//                     - Неопределено - Тело ответа не будет записано в файл.
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТHTTPОтвет - Мок-объект ответа HTTP-сервера на запрос.
//
// Пример:
//  МокСоединение = ЮТест.Данные().HTTPСоединение();
//  ТелоОтветаСтрокой = "{ ""data"": ""example"" }";
//  МокОтвет = ЮТест.Данные().HTTPОтвет()
//      .КодСостояния(200)
//      .Тело(ТелоОтветаСтрокой);
//  МокСоединение.УстановитьHTTPОтвет(МокОтвет);
//  
//  Запрос = Новый HTTPЗапрос("/api/items");
//  Ответ = МокСоединение.Get(Запрос);
//  ЮТест.ОжидаетЧто(Ответ.ПолучитьТелоКакСтроку()).Равно(ТелоОтветаСтрокой);
//
Функция Get(HTTPЗапрос, ИмяВыходногоФайла = "") Экспорт
	
	Возврат  Получить(HTTPЗапрос, ИмяВыходногоФайла);
	
КонецФункции

// Получает при помощи HEAD-запроса информацию о запрашиваемых данных, содержащуюся в заголовках, не получая сами данные (ENG).
//
// Параметры:
//  HTTPЗапрос - HTTPЗапрос - Системный объект HTTP-запроса.
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТHTTPОтвет - Мок-объект ответа HTTP-сервера на запрос.
//
// Пример:
//  МокСоединение = ЮТест.Данные().HTTPСоединение();
//  МокОтвет = ЮТест.Данные().HTTPОтвет()
//      .КодСостояния(200)
//      .Заголовки(Новый Соответствие(ЮТКоллекции.ЗначениеВМассиве(
//          Новый Структура("Ключ,Значение", "Content-Length", "1024"),
//          Новый Структура("Ключ,Значение", "Content-Type", "application/json")
//          )));
//  МокСоединение.УстановитьHTTPОтвет(МокОтвет);
//  
//  Запрос = Новый HTTPЗапрос("/api/resource");
//  Ответ = МокСоединение.Head(Запрос);
//  ЮТест.ОжидаетЧто(Ответ.Заголовки["Content-Type"]).Равно("application/json");
//
Функция Head(HTTPЗапрос) Экспорт
	
	Возврат ПолучитьЗаголовки(HTTPЗапрос);
	
КонецФункции

// Удаляет ресурс на сервере при помощи HTTP-запроса DELETE (ENG).
//
// Параметры:
//  HTTPЗапрос - HTTPЗапрос - Системный объект HTTP-запроса.
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТHTTPОтвет - Мок-объект ответа HTTP-сервера на запрос.
//
// Пример:
//  МокСоединение = ЮТест.Данные().HTTPСоединение();
//  МокОтвет = ЮТест.Данные().HTTPОтвет().КодСостояния(204); // No Content
//  МокСоединение.УстановитьHTTPОтвет(МокОтвет);
//  
//  Запрос = Новый HTTPЗапрос("/api/resource/to_delete");
//  Ответ = МокСоединение.Delete(Запрос);
//  ЮТест.ОжидаетЧто(Ответ.КодСостояния).Равно(204);
//
Функция Delete(HTTPЗапрос) Экспорт
	
	Возврат Удалить(HTTPЗапрос);
	
КонецФункции

// Отправляет данные на указанный адрес для обработки с использованием указанного HTTP-метода.
//
// Параметры:
//  HTTPМетод - Строка - Строка, содержащая имя HTTP-метода для запроса (например, "GET", "POST").
//  HTTPЗапрос - HTTPЗапрос - Системный объект HTTP-запроса, содержащий адрес, заголовки и тело запроса.
//  ИмяВыходногоФайла - Строка - (необязательный) Имя файла, в который будет записано тело ответа.
//                     - Неопределено - Тело ответа не будет записано в файл.
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТHTTPОтвет - Мок-объект ответа HTTP-сервера на запрос.
//
// Пример:
//  МокСоединение = ЮТест.Данные().HTTPСоединение();
//  МокОтвет = ЮТест.Данные().HTTPОтвет().КодСостояния(200);
//  МокСоединение.УстановитьHTTPОтвет(МокОтвет);
//  
//  Запрос = Новый HTTPЗапрос("/api/custom_action");
//  Ответ = МокСоединение.ВызватьHTTPМетод("OPTIONS", Запрос);
//  ЮТест.ОжидаетЧто(Ответ.КодСостояния).Равно(200);
//
Функция ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос, ИмяВыходногоФайла = "") Экспорт
	
	Если Контекст.ВыброситьИсключение Тогда
		ВызватьИсключение(Контекст.ТекстИсключения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяВыходногоФайла) Тогда
		ДвоичныеДанные = Контекст.HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
		ДвоичныеДанные.Записать(ИмяВыходногоФайла);
	КонецЕсли;
	
	Возврат Контекст.HTTPОтвет;
	
КонецФункции

// Отправляет данных на HTTP-сервер с помощью PUT-запроса.
//
// Параметры:
//  HTTPЗапрос - HTTPЗапрос - Системный объект HTTP-запроса.
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТHTTPОтвет - Мок-объект ответа HTTP-сервера на запрос.
//
// Пример:
//  См. пример для Put().
//
Функция Записать(HTTPЗапрос) Экспорт
	
	Возврат ВызватьHTTPМетод("PUT", HTTPЗапрос);
	
КонецФункции

// Изменяет данные на сервере при помощи PATCH-запроса.
//
// Параметры:
//  HTTPЗапрос - HTTPЗапрос - Системный объект HTTP-запроса.
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТHTTPОтвет - Мок-объект ответа HTTP-сервера на запрос.
//
// Пример:
//  См. пример для Patch().
//
Функция Изменить(HTTPЗапрос) Экспорт
	
	Возврат ВызватьHTTPМетод("PATCH", HTTPЗапрос);
	
КонецФункции

// Отправляет данных на HTTP-сервер с помощью POST-запроса.
//
// Параметры:
//  HTTPЗапрос - HTTPЗапрос - Системный объект HTTP-запроса.
//  ИмяВыходногоФайла - Строка - (необязательный) Имя файла, в который будет записано тело ответа.
//                     - Неопределено - Тело ответа не будет записано в файл.
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТHTTPОтвет - Мок-объект ответа HTTP-сервера на запрос.
//
// Пример:
//  См. пример для Post().
//
Функция ОтправитьДляОбработки(HTTPЗапрос, ИмяВыходногоФайла = "") Экспорт
	
	Возврат ВызватьHTTPМетод("POST", HTTPЗапрос, ИмяВыходногоФайла);
	
КонецФункции

// Получает данные с HTTP-сервера, используя GET-запрос.
//
// Параметры:
//  HTTPЗапрос - HTTPЗапрос - Системный объект HTTP-запроса.
//  ИмяВыходногоФайла - Строка - (необязательный) Имя файла, в который будет записано тело ответа.
//                     - Неопределено - Тело ответа не будет записано в файл.
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТHTTPОтвет - Мок-объект ответа HTTP-сервера на запрос.
//
// Пример:
//  См. пример для Get().
//
Функция Получить(HTTPЗапрос, ИмяВыходногоФайла = "") Экспорт
	
	Возврат ВызватьHTTPМетод("GET", HTTPЗапрос, ИмяВыходногоФайла);
	
КонецФункции

// Получает при помощи HEAD-запроса информацию о запрашиваемых данных, содержащуюся в заголовках, не получая сами данные.
//
// Параметры:
//  HTTPЗапрос - HTTPЗапрос - Системный объект HTTP-запроса.
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТHTTPОтвет - Мок-объект ответа HTTP-сервера на запрос.
//
// Пример:
//  См. пример для Head().
//
Функция ПолучитьЗаголовки(HTTPЗапрос) Экспорт
	
	Возврат ВызватьHTTPМетод("HEAD", HTTPЗапрос);
	
КонецФункции

// Удаляет ресурс на сервере при помощи HTTP-запроса DELETE.
//
// Параметры:
//  HTTPЗапрос - HTTPЗапрос - Системный объект HTTP-запроса.
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТHTTPОтвет - Мок-объект ответа HTTP-сервера на запрос.
//
// Пример:
//  См. пример для Delete().
//
Функция Удалить(HTTPЗапрос) Экспорт
	
	Возврат ВызватьHTTPМетод("DELETE", HTTPЗапрос);
	
КонецФункции

#КонецОбласти

#Область Конструктор

// Указывает, что при выполнении HTTP-запроса необходимо выбросить исключение.
//
// Параметры:
//  ТекстИсключения - Строка - Текст выбрасываемого исключения.
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТHTTPСоединение - Текущий объект для цепочки вызовов.
//
// Пример:
//  МокСоединение = ЮТест.Данные().HTTPСоединение()
//      .ВыброситьИсключение("Сервер недоступен (ошибка 503)");
//  
//  Попытка
//      Запрос = Новый HTTPЗапрос("/api/status");
//      Ответ = МокСоединение.Get(Запрос);
//  Исключение
//      ЮТест.ОжидаетЧто(ОписаниеОшибки()).Содержит("Сервер недоступен");
//  КонецПопытки;
//
Функция ВыброситьИсключение(ТекстИсключения) Экспорт
	
	Контекст.ВыброситьИсключение = Истина;
	Контекст.ТекстИсключения = ТекстИсключения;
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает возвращаемый HTTP-ответ.
//
// Параметры:
//  HTTPОтвет - ОбработкаОбъект.ЮТHTTPОтвет - Мок-объект HTTP-ответа, который будет возвращен при вызове методов соединения.
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТHTTPСоединение - Текущий объект для цепочки вызовов.
//
// Пример:
//  МокОтвет = ЮТест.Данные().HTTPОтвет().КодСостояния(404).Тело("Ресурс не найден");
//  МокСоединение = ЮТест.Данные().HTTPСоединение().УстановитьHTTPОтвет(МокОтвет);
//
Функция УстановитьHTTPОтвет(HTTPОтвет) Экспорт
	
	Контекст.HTTPОтвет = HTTPОтвет;
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает защищенное соединение.
//
// Параметры:
//  Значение - ЗащищенноеСоединениеOpenSSL - Объект защищенного соединения для осуществления HTTPS соединения.
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТHTTPСоединение - Текущий объект для цепочки вызовов.
//
// Пример:
//  SSLСоединение = Новый ЗащищенноеСоединениеOpenSSL(); // Настроить SSLСоединение при необходимости
//  МокСоединение = ЮТест.Данные().HTTPСоединение()
//      .УстановитьЗащищенноеСоединение(SSLСоединение);
//
Функция УстановитьЗащищенноеСоединение(Значение) Экспорт
	
	ЗащищенноеСоединение = Значение;
	SecureConnection = Значение;
	Возврат ЭтотОбъект;
	
КонецФункции

// Установить использование аутентификации ОС.
//
// Параметры:
//  Значение - Булево - Включает использование аутентификации NTLM или Negotiate на сервере.
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТHTTPСоединение - Текущий объект для цепочки вызовов.
//
// Пример:
//  МокСоединение = ЮТест.Данные().HTTPСоединение()
//      .УстановитьАутентификациюОС(Истина);
//
Функция УстановитьАутентификациюОС(Значение) Экспорт
	
	ИспользоватьАутентификациюОС = Значение;
	UseOSAuthentication = Значение;
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает пароль для аутентификации.
//
// Параметры:
//  Значение - Строка - Пароль пользователя на указанном сервере.
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТHTTPСоединение - Текущий объект для цепочки вызовов.
//
// Пример:
//  МокСоединение = ЮТест.Данные().HTTPСоединение()
//      .УстановитьПользователя("admin")
//      .УстановитьПароль("secret_password");
//
Функция УстановитьПароль(Значение) Экспорт
	
	Пароль = Значение;
	Password = Значение;
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает пользователя для аутентификации.
//
// Параметры:
//  Значение - Строка - Имя пользователя на указанном сервере.
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТHTTPСоединение - Текущий объект для цепочки вызовов.
//
// Пример:
//  МокСоединение = ЮТест.Данные().HTTPСоединение()
//      .УстановитьПользователя("service_user");
//
Функция УстановитьПользователя(Значение) Экспорт
	
	Пользователь = Значение;
	User = Значение;
	Возврат ЭтотОбъект;
	
КонецФункции

// Установить порт соединения.
//
// Параметры:
//  Значение - Число - Порт сервера, с которым осуществляется соединение.
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТHTTPСоединение - Текущий объект для цепочки вызовов.
//
// Пример:
//  МокСоединение = ЮТест.Данные().HTTPСоединение()
//      .УстановитьСервер("my-test-server.com")
//      .УстановитьПорт(8080);
//
Функция УстановитьПорт(Значение) Экспорт
	
	Порт = Значение;
	Port = Значение;
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает прокси соединения.
//
// Параметры:
//  Значение - ИнтернетПрокси - Прокси, используемый для соединения с сервером.
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТHTTPСоединение - Текущий объект для цепочки вызовов.
//
// Пример:
//  ПроксиСервер = Новый ИнтернетПрокси;
//  ПроксиСервер.Установить("http", "proxy.example.com", 8000);
//  МокСоединение = ЮТест.Данные().HTTPСоединение()
//      .УстановитьПрокси(ПроксиСервер);
//
Функция УстановитьПрокси(Значение) Экспорт
	
	Прокси = Значение;
	Proxy = Значение;
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает адрес сервера.
//
// Параметры:
//  Значение - Строка - Хост сервера, с которым осуществляется соединение (например, "localhost", "api.example.com").
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТHTTPСоединение - Текущий объект для цепочки вызовов.
//
// Пример:
//  МокСоединение = ЮТест.Данные().HTTPСоединение()
//      .УстановитьСервер("my-api.internal");
//
Функция УстановитьСервер(Значение) Экспорт
	
	Сервер = Значение;
	Host = Значение;
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает таймаут соединения.
//
// Параметры:
//  Значение - Число - Таймаут осуществляемого соединения и операций, в секундах.
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТHTTPСоединение - Текущий объект для цепочки вызовов.
//
// Пример:
//  МокСоединение = ЮТест.Данные().HTTPСоединение()
//      .УстановитьТаймаут(60); // Таймаут 60 секунд
//
Функция УстановитьТаймаут(Значение) Экспорт
	
	Таймаут = Значение;
	Timeout = Значение;
	Возврат ЭтотОбъект;
	
КонецФункции

// Конструктор по умолчанию.
//
// Параметры:
//  _Сервер - Строка - Хост сервера, с которым осуществляется соединение.
//  _Порт - Число - (необязательный) Порт сервера, с которым осуществляется соединение (по умолчанию 80 или 443 для HTTPS).
//  _Пользователь - Строка - (необязательный) Имя пользователя на указанном сервере.
//  _Пароль - Строка - (необязательный) Пароль пользователя на указанном сервере.
//  _Прокси - ИнтернетПрокси - (необязательный) Прокси, используемый для соединения с сервером.
//            - Неопределено - Прокси не используется или используется системный.
//  _Таймаут - Число - (необязательный) Таймаут осуществляемого соединения и операций, в секундах (по умолчанию 0 - бесконечно).
//  _ЗащищенноеСоединение - ЗащищенноеСоединениеOpenSSL - (необязательный) Объект защищенного соединения для осуществления HTTPS соединения.
//                        - Неопределено - Используется незащищенное соединение или системные настройки SSL.
//  _ИспользоватьАутентификациюОС - Булево - (необязательный) Включает использование аутентификации NTLM или Negotiate на сервере (по умолчанию Ложь).
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТHTTPСоединение - Текущий объект для цепочки вызовов.
//
// Пример:
//  // Простое создание для сервера по умолчанию
//  МокСоединение1 = ЮТест.Данные().HTTPСоединение().КонструкторПоУмолчанию("test.api.com");
//  
//  // Создание с указанием порта и таймаута
//  МокСоединение2 = ЮТест.Данные().HTTPСоединение()
//      .КонструкторПоУмолчанию("secure.example.org", 443, , , , 30, Новый ЗащищенноеСоединениеOpenSSL());
//
Функция КонструкторПоУмолчанию(_Сервер, _Порт = 0, _Пользователь = "", _Пароль = "",
			_Прокси = Неопределено, _Таймаут = 0, _ЗащищенноеСоединение = Неопределено,
			_ИспользоватьАутентификациюОС = Ложь) Экспорт
	
	УстановитьАутентификациюОС(_ИспользоватьАутентификациюОС);
	УстановитьЗащищенноеСоединение(_ЗащищенноеСоединение);
	УстановитьПароль(_Пароль);
	УстановитьПользователя(_Пользователь);
	УстановитьСервер(_Сервер);
	УстановитьТаймаут(_Таймаут);
	
	Если _Прокси = Неопределено Тогда
		ПроксиПоУмолчанию = Новый ИнтернетПрокси;
		УстановитьПрокси(ПроксиПоУмолчанию);
	Иначе
		УстановитьПрокси(_Прокси);
	КонецЕсли;
	
	Если _Порт = 0 Тогда
		ПортПоУмолчанию = ?(ЗащищенноеСоединение = Неопределено, 80, 443);
		УстановитьПорт(ПортПоУмолчанию);
	Иначе
		УстановитьПорт(_Порт);
	КонецЕсли;
	
	Возврат ЭтотОбъект;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Инициализирует начальные значения переменных.
//
Процедура Инициализировать()
	
	Контекст = Новый Структура;
	Контекст.Вставить("HTTPОтвет");
	Контекст.Вставить("ВыброситьИсключение", Ложь);
	Контекст.Вставить("ТекстИсключения", "");
	
	КонструкторПоУмолчанию("");
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

Инициализировать();

#КонецОбласти

#КонецЕсли
