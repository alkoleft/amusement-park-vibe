// Тестовый модуль для проверки базовой инфраструктуры онлайн продаж
// Покрывает функциональность модуля ОнлайнПродажиСервер
//
// Этот модуль содержит тесты для завершения первого этапа плана реализации REST API

#Область ПрограммныйИнтерфейс

#Область ТестыЗаполнения

// Регистрирует тесты для выполнения
//
Процедура ИсполняемыеСценарии() Экспорт
	
	ЮТТесты
		.ДобавитьТестовыйНабор("ТестыБазовойИнфраструктуры", "API,Инфраструктура,Этап1")
			.Тег("Критичный")
			.ДобавитьСерверныйТест("ТестСформироватьОтветУспех", "Тест формирования успешного ответа")
			.ДобавитьСерверныйТест("ТестСформироватьОтветОшибка", "Тест формирования ответа об ошибке")
			.ДобавитьСерверныйТест("ТестПолучитьВерсиюАПИ", "Тест получения версии API")
			.ДобавитьСерверныйТест("ТестВалидироватьДжейСОН", "Тест валидации JSON")
				.Тег("Валидация")
			.ДобавитьСерверныйТест("ТестПроверитьОбязательныеПоля", "Тест проверки обязательных полей")
				.Тег("Валидация")
			.ДобавитьСерверныйТест("ТестВалидироватьТелефон", "Тест валидации номера телефона")
				.Тег("Валидация")
			.ДобавитьСерверныйТест("ТестВалидироватьЭлектроннуюПочту", "Тест валидации email")
				.Тег("Валидация")
			.ДобавитьСерверныйТест("ТестВалидироватьUUID", "Тест валидации UUID")
				.Тег("Валидация")
			.ДобавитьСерверныйТест("ТестВалидироватьДату", "Тест валидации даты")
				.Тег("Валидация")
			.ДобавитьСерверныйТест("ТестВалидироватьЧисло", "Тест валидации числа")
				.Тег("Валидация")
			.ДобавитьСерверныйТест("ТестПолучитьКодОшибки", "Тест получения стандартных кодов ошибок")
				.Тег("КодыОшибок")
			.ДобавитьСерверныйТест("ТестСформироватьСтандартныйОтветОшибка", "Тест формирования стандартного ответа об ошибке")
				.Тег("КодыОшибок");
	
	ЮТТесты
		.ДобавитьТестовыйНабор("ТестыОбработчиковHTTP", "API,HTTP,Обработчики")
			.Тег("Интеграция")
			.ДобавитьСерверныйТест("ТестОбработатьПолучениеСпискаНоменклатуры", "Тест получения списка номенклатуры")
			.ДобавитьСерверныйТест("ТестОбработатьПолучениеДанныхНоменклатуры", "Тест получения данных номенклатуры")
			.ДобавитьСерверныйТест("ТестОбработатьПоискКлиента", "Тест поиска клиента")
			.ДобавитьСерверныйТест("ТестОбработатьСозданиеКлиента", "Тест создания клиента")
				.Тег("Валидация")
			.ДобавитьСерверныйТест("ТестОбработатьПолучениеБалансаБонусов", "Тест получения баланса бонусов")
			.ДобавитьСерверныйТест("ТестОбработчикиНеРеализованныхМетодов", "Тест заглушек нереализованных методов");
	
	ЮТТесты
		.ДобавитьТестовыйНабор("ТестыЖурналирования", "API,Журнал")
			.Тег("Журналирование")
			.ДобавитьСерверныйТест("ТестЗаписатьВЖурналАПИ", "Тест записи в журнал API");
	
КонецПроцедуры

#КонецОбласти

#Область ТестыБазовойИнфраструктуры

// Тест формирования успешного ответа
//
Процедура ТестСформироватьОтветУспех() Экспорт
	
	// Arrange
	ТестовыеДанные = Новый Структура();
	ТестовыеДанные.Вставить("test_field", "test_value");
	ТестовыеДанные.Вставить("number_field", 123);
	
	// Act
	Ответ = ОнлайнПродажиСервер.СформироватьОтветУспех(ТестовыеДанные);
	
	// Assert
	ЮТест.ОжидаетЧто(Ответ, "Ответ должен быть создан")
		.Свойство("КодСостояния")
		.Равно(200);
	
	// Проверяем заголовки
	ЮТест.ОжидаетЧто(Ответ.Заголовки.Получить("Content-Type"))
		.Равно("application/json; charset=utf-8");
	
	// Проверяем структуру JSON ответа
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
	ЮТест.ОжидаетЧто(ТелоОтвета, "Тело ответа не должно быть пустым")
		.НеРавно("");
	
	// Парсим JSON и проверяем структуру
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
	ПарсенныйОтвет = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	ЮТест.ОжидаетЧто(ПарсенныйОтвет)
		.Свойство("success")
		.ЭтоИстина();
	
	ЮТест.ОжидаетЧто(ПарсенныйОтвет)
		.Свойство("data")
		.Свойство("test_field")
		.Равно("test_value");
	
	ЮТест.ОжидаетЧто(ПарсенныйОтвет)
		.Свойство("timestamp")
		.Заполнено();
	
КонецПроцедуры

// Тест формирования ответа об ошибке
//
Процедура ТестСформироватьОтветОшибка() Экспорт
	
	// Arrange
	КодОшибки = 400;
	ТекстОшибки = "Тестовая ошибка";
	ДополнительныеДанные = Новый Структура("details", "дополнительная информация");
	
	// Act
	Ответ = ОнлайнПродажиСервер.СформироватьОтветОшибка(КодОшибки, ТекстОшибки, ДополнительныеДанные);
	
	// Assert
	ЮТест.ОжидаетЧто(Ответ.КодСостояния)
		.Равно(400);
	
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
	ПарсенныйОтвет = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	ЮТест.ОжидаетЧто(ПарсенныйОтвет.success)
		.ЭтоЛожь();
	
	ЮТест.ОжидаетЧто(ПарсенныйОтвет.error)
		.Равно(ТекстОшибки);
	
	ЮТест.ОжидаетЧто(ПарсенныйОтвет.details)
		.Равно(ДополнительныеДанные);
	
КонецПроцедуры

// Тест получения версии API
//
Процедура ТестПолучитьВерсиюАПИ() Экспорт
	
	// Act
	Версия = ОнлайнПродажиСервер.ПолучитьВерсиюАПИ();
	
	// Assert
	ЮТест.ОжидаетЧто(Версия, "Версия API должна быть заполнена")
		.Заполнено();
	
	ЮТест.ОжидаетЧто(Версия, "Версия должна быть в формате X.Y")
		.Содержит(".");
	
КонецПроцедуры

#КонецОбласти

#Область ТестыВалидации

// Тест валидации JSON
//
Процедура ТестВалидироватьДжейСОН() Экспорт
	
	// Тест корректного JSON
	КорректныйJSON = "{""test"": ""value"", ""number"": 123}";
	Результат = ОнлайнПродажиСервер.ВалидироватьДжейСОН(КорректныйJSON);
	
	ЮТест.ОжидаетЧто(Результат.Успех, "Корректный JSON должен проходить валидацию")
		.ЭтоИстина();
	
	ЮТест.ОжидаетЧто(Результат.Данные, "Данные должны быть распарсены")
		.Свойство("test")
		.Равно("value");
	
	// Тест некорректного JSON
	НекорректныйJSON = "{""test"": ""value"",}"; // лишняя запятая
	Результат = ОнлайнПродажиСервер.ВалидироватьДжейСОН(НекорректныйJSON);
	
	ЮТест.ОжидаетЧто(Результат.Успех, "Некорректный JSON должен не проходить валидацию")
		.ЭтоЛожь();
	
	ЮТест.ОжидаетЧто(Результат.ОписаниеОшибки, "Должно быть описание ошибки")
		.Заполнено();
	
	// Тест пустой строки
	Результат = ОнлайнПродажиСервер.ВалидироватьДжейСОН("");
	
	ЮТест.ОжидаетЧто(Результат.Успех)
		.ЭтоЛожь();
	
	ЮТест.ОжидаетЧто(Результат.ОписаниеОшибки)
		.Содержит("Пустое тело запроса");
	
КонецПроцедуры

// Тест проверки обязательных полей
//
Процедура ТестПроверитьОбязательныеПоля() Экспорт
	
	// Тест с заполненными полями
	Данные = Новый Структура();
	Данные.Вставить("name", "Тест");
	Данные.Вставить("phone", "+7-900-123-45-67");
	
	ОбязательныеПоля = Новый Массив;
	ОбязательныеПоля.Добавить("name");
	ОбязательныеПоля.Добавить("phone");
	
	Результат = ОнлайнПродажиСервер.ПроверитьОбязательныеПоля(Данные, ОбязательныеПоля);
	
	ЮТест.ОжидаетЧто(Результат.Успех, "Все поля заполнены - проверка должна пройти")
		.ЭтоИстина();
	
	ЮТест.ОжидаетЧто(Результат.ОтсутствующиеПоля.Количество())
		.Равно(0);
	
	// Тест с отсутствующими полями
	НеполныеДанные = Новый Структура();
	НеполныеДанные.Вставить("name", "Тест");
	// phone отсутствует
	
	Результат = ОнлайнПродажиСервер.ПроверитьОбязательныеПоля(НеполныеДанные, ОбязательныеПоля);
	
	ЮТест.ОжидаетЧто(Результат.Успех)
		.ЭтоЛожь();
	
	ЮТест.ОжидаетЧто(Результат.ОтсутствующиеПоля.Количество())
		.Больше(0);
	
	ЮТест.ОжидаетЧто(Результат.ОтсутствующиеПоля.Найти("phone"))
		.НеРавно(Неопределено);
	
	// Тест с пустыми значениями
	ДанныеСПустымиЗначениями = Новый Структура();
	ДанныеСПустымиЗначениями.Вставить("name", "");
	ДанныеСПустымиЗначениями.Вставить("phone", "+7-900-123-45-67");
	
	Результат = ОнлайнПродажиСервер.ПроверитьОбязательныеПоля(ДанныеСПустымиЗначениями, ОбязательныеПоля);
	
	ЮТест.ОжидаетЧто(Результат.Успех, "Пустые значения должны считаться как отсутствующие")
		.ЭтоЛожь();
	
КонецПроцедуры

// Тест валидации номера телефона
//
Процедура ТестВалидироватьТелефон() Экспорт
	
	// Корректные номера
	КорректныеНомера = Новый Массив;
	КорректныеНомера.Добавить("+7-900-123-45-67");
	КорректныеНомера.Добавить("8 (900) 123-45-67");
	КорректныеНомера.Добавить("79001234567");
	КорректныеНомера.Добавить("9001234567");
	
	Для Каждого Номер Из КорректныеНомера Цикл
		Результат = ОнлайнПродажиСервер.ВалидироватьТелефон(Номер);
		ЮТест.ОжидаетЧто(Результат, СтрШаблон("Номер %1 должен быть корректным", Номер))
			.ЭтоИстина();
	КонецЦикла;
	
	// Некорректные номера
	НекорректныеНомера = Новый Массив;
	НекорректныеНомера.Добавить("123"); // слишком короткий
	НекорректныеНомера.Добавить("12345678901234567890"); // слишком длинный
	НекорректныеНомера.Добавить(""); // пустой
	НекорректныеНомера.Добавить("abc-def-gh-ij"); // буквы
	
	Для Каждого Номер Из НекорректныеНомера Цикл
		Результат = ОнлайнПродажиСервер.ВалидироватьТелефон(Номер);
		ЮТест.ОжидаетЧто(Результат, СтрШаблон("Номер %1 должен быть некорректным", Номер))
			.ЭтоЛожь();
	КонецЦикла;
	
КонецПроцедуры

// Тест валидации электронной почты
//
Процедура ТестВалидироватьЭлектроннуюПочту() Экспорт
	
	// Корректные адреса
	КорректныеАдреса = Новый Массив;
	КорректныеАдреса.Добавить("test@example.com");
	КорректныеАдреса.Добавить("user.name@domain.org");
	КорректныеАдреса.Добавить("test123@mail.ru");
	
	Для Каждого Адрес Из КорректныеАдреса Цикл
		Результат = ОнлайнПродажиСервер.ВалидироватьЭлектроннуюПочту(Адрес);
		ЮТест.ОжидаетЧто(Результат, СтрШаблон("Адрес %1 должен быть корректным", Адрес))
			.ЭтоИстина();
	КонецЦикла;
	
	// Некорректные адреса
	НекорректныеАдреса = Новый Массив;
	НекорректныеАдреса.Добавить("test"); // нет @ и .
	НекорректныеАдреса.Добавить("test@"); // нет домена
	НекорректныеАдреса.Добавить("@example.com"); // нет пользователя
	НекорректныеАдреса.Добавить("test@example"); // нет точки в домене
	НекорректныеАдреса.Добавить(""); // пустой
	
	Для Каждого Адрес Из НекорректныеАдреса Цикл
		Результат = ОнлайнПродажиСервер.ВалидироватьЭлектроннуюПочту(Адрес);
		ЮТест.ОжидаетЧто(Результат, СтрШаблон("Адрес %1 должен быть некорректным", Адрес))
			.ЭтоЛожь();
	КонецЦикла;
	
КонецПроцедуры

// Тест валидации UUID
//
Процедура ТестВалидироватьUUID() Экспорт
	
	// Корректные UUID
	КорректныеUUID = Новый Массив;
	КорректныеUUID.Добавить("00000000-0000-0000-0000-000000000000");
	КорректныеUUID.Добавить("123e4567-e89b-12d3-a456-426614174000");
	КорректныеUUID.Добавить("550e8400-e29b-41d4-a716-446655440000");
	
	Для Каждого UUID Из КорректныеUUID Цикл
		Результат = ОнлайнПродажиСервер.ВалидироватьUUID(UUID);
		ЮТест.ОжидаетЧто(Результат, СтрШаблон("UUID %1 должен быть корректным", UUID))
			.ЭтоИстина();
	КонецЦикла;
	
	// Некорректные UUID
	НекорректныеUUID = Новый Массив;
	НекорректныеUUID.Добавить("123"); // слишком короткий
	НекорректныеUUID.Добавить("00000000000000000000000000000000000000"); // слишком длинный
	НекорректныеUUID.Добавить("00000000-0000-0000-0000"); // неполный
	НекорректныеUUID.Добавить("00000000_0000_0000_0000_000000000000"); // неправильные разделители
	НекорректныеUUID.Добавить(""); // пустой
	
	Для Каждого UUID Из НекорректныеUUID Цикл
		Результат = ОнлайнПродажиСервер.ВалидироватьUUID(UUID);
		ЮТест.ОжидаетЧто(Результат, СтрШаблон("UUID %1 должен быть некорректным", UUID))
			.ЭтоЛожь();
	КонецЦикла;
	
КонецПроцедуры

// Тест валидации даты
//
Процедура ТестВалидироватьДату() Экспорт
	
	// Корректные даты
	КорректныеДаты = Новый Массив;
	КорректныеДаты.Добавить("20240101");
	КорректныеДаты.Добавить("2024-12-31");
	КорректныеДаты.Добавить("01.01.2024");
	
	Для Каждого СтрокаДаты Из КорректныеДаты Цикл
		Результат = ОнлайнПродажиСервер.ВалидироватьДату(СтрокаДаты);
		ЮТест.ОжидаетЧто(Результат.Успех, СтрШаблон("Дата %1 должна быть корректной", СтрокаДаты))
			.ЭтоИстина();
		
		ЮТест.ОжидаетЧто(Результат.Дата, "Дата должна быть заполнена")
			.Заполнено();
	КонецЦикла;
	
	// Некорректные даты
	НекорректныеДаты = Новый Массив;
	НекорректныеДаты.Добавить("2024-13-01"); // несуществующий месяц
	НекорректныеДаты.Добавить("2024-02-30"); // несуществующий день
	НекорректныеДаты.Добавить("abc-def-ghi"); // не дата
	НекорректныеДаты.Добавить(""); // пустая
	
	Для Каждого СтрокаДаты Из НекорректныеДаты Цикл
		Результат = ОнлайнПродажиСервер.ВалидироватьДату(СтрокаДаты);
		ЮТест.ОжидаетЧто(Результат.Успех, СтрШаблон("Дата %1 должна быть некорректной", СтрокаДаты))
			.ЭтоЛожь();
		
		ЮТест.ОжидаетЧто(Результат.ОписаниеОшибки, "Должно быть описание ошибки")
			.Заполнено();
	КонецЦикла;
	
КонецПроцедуры

// Тест валидации числа
//
Процедура ТестВалидироватьЧисло() Экспорт
	
	// Корректные числа
	Результат = ОнлайнПродажиСервер.ВалидироватьЧисло("123");
	ЮТест.ОжидаетЧто(Результат.Успех)
		.ЭтоИстина();
	ЮТест.ОжидаетЧто(Результат.Число)
		.Равно(123);
	
	Результат = ОнлайнПродажиСервер.ВалидироватьЧисло("123.45");
	ЮТест.ОжидаетЧто(Результат.Успех)
		.ЭтоИстина();
	ЮТест.ОжидаетЧто(Результат.Число)
		.Равно(123.45);
	
	// Проверка с ограничениями
	Результат = ОнлайнПродажиСервер.ВалидироватьЧисло("50", 10, 100);
	ЮТест.ОжидаетЧто(Результат.Успех, "Число в диапазоне должно быть корректным")
		.ЭтоИстина();
	
	Результат = ОнлайнПродажиСервер.ВалидироватьЧисло("5", 10, 100);
	ЮТест.ОжидаетЧто(Результат.Успех, "Число меньше минимального должно быть некорректным")
		.ЭтоЛожь();
	ЮТест.ОжидаетЧто(Результат.ОписаниеОшибки)
		.Содержит("меньше минимального");
	
	Результат = ОнлайнПродажиСервер.ВалидироватьЧисло("150", 10, 100);
	ЮТест.ОжидаетЧто(Результат.Успех, "Число больше максимального должно быть некорректным")
		.ЭтоЛожь();
	ЮТест.ОжидаетЧто(Результат.ОписаниеОшибки)
		.Содержит("больше максимального");
	
	// Некорректные значения
	Результат = ОнлайнПродажиСервер.ВалидироватьЧисло("abc");
	ЮТест.ОжидаетЧто(Результат.Успех)
		.ЭтоЛожь();
	ЮТест.ОжидаетЧто(Результат.ОписаниеОшибки)
		.Содержит("Невозможно преобразовать в число");
	
КонецПроцедуры

#КонецОбласти

#Область ТестыКодовОшибок

// Тест получения стандартных кодов ошибок
//
Процедура ТестПолучитьКодОшибки() Экспорт
	
	// Тестируем несколько стандартных кодов ошибок
	ТестовыеОшибки = Новый Массив;
	ТестовыеОшибки.Добавить("INVALID_JSON");
	ТестовыеОшибки.Добавить("MISSING_FIELDS");
	ТестовыеОшибки.Добавить("NOT_FOUND");
	ТестовыеОшибки.Добавить("INTERNAL_ERROR");
	
	Для Каждого ТипОшибки Из ТестовыеОшибки Цикл
		ИнформацияОбОшибке = ОнлайнПродажиСервер.ПолучитьКодОшибки(ТипОшибки);
		
		ЮТест.ОжидаетЧто(ИнформацияОбОшибке, СтрШаблон("Информация об ошибке %1 должна быть заполнена", ТипОшибки))
			.Заполнено();
		
		ЮТест.ОжидаетЧто(ИнформацияОбОшибке)
			.Свойство("Код")
			.Больше(0);
		
		ЮТест.ОжидаетЧто(ИнформацияОбОшибке)
			.Свойство("КодОшибки")
			.Заполнено();
		
		ЮТест.ОжидаетЧто(ИнформацияОбОшибке)
			.Свойство("Сообщение")
			.Заполнено();
	КонецЦикла;
	
	// Тест несуществующего типа ошибки
	ИнформацияОбОшибке = ОнлайнПродажиСервер.ПолучитьКодОшибки("НЕСУЩЕСТВУЮЩАЯ_ОШИБКА");
	ЮТест.ОжидаетЧто(ИнформацияОбОшибке.КодОшибки, "Для несуществующей ошибки должна возвращаться общая ошибка")
		.Равно("INTERNAL_ERROR");
	
КонецПроцедуры

// Тест формирования стандартного ответа об ошибке
//
Процедура ТестСформироватьСтандартныйОтветОшибка() Экспорт
	
	// Тест стандартной ошибки
	Ответ = ОнлайнПродажиСервер.СформироватьСтандартныйОтветОшибка("INVALID_JSON");
	
	ЮТест.ОжидаетЧто(Ответ.КодСостояния)
		.Равно(400);
	
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
	ПарсенныйОтвет = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	ЮТест.ОжидаетЧто(ПарсенныйОтвет.success)
		.ЭтоЛожь();
	
	ЮТест.ОжидаетЧто(ПарсенныйОтвет.error_code)
		.Равно("INVALID_JSON");
	
	ЮТест.ОжидаетЧто(ПарсенныйОтвет.error)
		.Заполнено();
	
	// Тест с дополнительным сообщением и данными
	ДополнительныеДанные = Новый Структура("field", "value");
	Ответ = ОнлайнПродажиСервер.СформироватьСтандартныйОтветОшибка("VALIDATION_ERROR", 
		"Дополнительное сообщение", ДополнительныеДанные);
	
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
	ПарсенныйОтвет = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	ЮТест.ОжидаетЧто(ПарсенныйОтвет.error)
		.Равно("Дополнительное сообщение");
	
	ЮТест.ОжидаетЧто(ПарсенныйОтвет.details)
		.Равно(ДополнительныеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ТестыОбработчиковHTTP

// Тест получения списка номенклатуры
//
Процедура ТестОбработатьПолучениеСпискаНоменклатуры() Экспорт
	
	// Arrange - создаем стаб HTTP-запроса через YAxUnit
	МакетЗапроса = ЮТест.Данные().HTTPСервисЗапрос()
		.Метод("GET")
		.ОтносительныйURL("/api/v1/products");
	
	// Act
	Ответ = ОнлайнПродажиСервер.ОбработатьПолучениеСпискаНоменклатуры(МакетЗапроса);
	
	// Assert
	ЮТест.ОжидаетЧто(Ответ.КодСостояния, "Должен возвращаться код 200")
		.Равно(200);
	
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
	ПарсенныйОтвет = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	ЮТест.ОжидаетЧто(ПарсенныйОтвет.success, "Ответ должен быть успешным")
		.ЭтоИстина();
	
	ЮТест.ОжидаетЧто(ПарсенныйОтвет.data, "Должны возвращаться данные номенклатуры")
		.ИмеетТип("Массив");
	
	// Проверяем структуру первого элемента (заглушки)
	Если ПарсенныйОтвет.data.Количество() > 0 Тогда
		ПервыйЭлемент = ПарсенныйОтвет.data[0];
		
		ЮТест.ОжидаетЧто(ПервыйЭлемент)
			.Свойство("id")
			.Заполнено();
		
		ЮТест.ОжидаетЧто(ПервыйЭлемент)
			.Свойство("name")
			.Заполнено();
		
		ЮТест.ОжидаетЧто(ПервыйЭлемент)
			.Свойство("price")
			.Больше(0);
	КонецЕсли;
	
КонецПроцедуры

// Тест получения данных номенклатуры
//
Процедура ТестОбработатьПолучениеДанныхНоменклатуры() Экспорт
	
	// Arrange - создаем стаб HTTP-запроса через YAxUnit
	МакетЗапроса = ЮТест.Данные().HTTPСервисЗапрос()
		.Метод("GET")
		.ОтносительныйURL("/api/v1/products/test-product-id");
	
	// Act
	Ответ = ОнлайнПродажиСервер.ОбработатьПолучениеДанныхНоменклатуры(МакетЗапроса);
	
	// Assert
	ЮТест.ОжидаетЧто(Ответ.КодСостояния)
		.Равно(200);
	
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
	ПарсенныйОтвет = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	ЮТест.ОжидаетЧто(ПарсенныйОтвет.success)
		.ЭтоИстина();
	
	// Проверяем детальную структуру товара
	ДанныеТовара = ПарсенныйОтвет.data;
	
	ЮТест.ОжидаетЧто(ДанныеТовара)
		.Свойство("restrictions")
		.ИмеетТип("Структура");
	
	ЮТест.ОжидаетЧто(ДанныеТовара.restrictions)
		.Свойство("min_age")
		.Больше(0);
	
КонецПроцедуры

// Тест поиска клиента
//
Процедура ТестОбработатьПоискКлиента() Экспорт
	
	// Arrange - создаем стаб HTTP-запроса через YAxUnit
	МакетЗапроса = ЮТест.Данные().HTTPСервисЗапрос()
		.Метод("GET")
		.ОтносительныйURL("/api/v1/customers/search")
		.ДобавитьПараметрЗапроса("phone", "+79001234567");
	
	// Act
	Ответ = ОнлайнПродажиСервер.ОбработатьПоискКлиента(МакетЗапроса);
	
	// Assert
	ЮТест.ОжидаетЧто(Ответ.КодСостояния)
		.Равно(200);
	
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
	ПарсенныйОтвет = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	ЮТест.ОжидаетЧто(ПарсенныйОтвет.success)
		.ЭтоИстина();
	
	ДанныеКлиента = ПарсенныйОтвет.data;
	
	ЮТест.ОжидаетЧто(ДанныеКлиента)
		.Свойство("bonus_balance")
		.БольшеИлиРавно(0);
	
КонецПроцедуры

// Тест создания клиента
//
Процедура ТестОбработатьСозданиеКлиента() Экспорт
	
	// Тест с корректными данными
	КорректныеДанные = Новый Структура();
	КорректныеДанные.Вставить("name", "Тестовый Клиент");
	КорректныеДанные.Вставить("phone", "+7-900-123-45-67");
	КорректныеДанные.Вставить("email", "test@example.com");
	
	МакетЗапроса = ЮТест.Данные().HTTPСервисЗапрос()
		.Метод("POST")
		.ОтносительныйURL("/api/v1/customers")
		.УстановитьТелоКакСтрокуJSON(КорректныеДанные);
	
	Ответ = ОнлайнПродажиСервер.ОбработатьСозданиеКлиента(МакетЗапроса);
	
	ЮТест.ОжидаетЧто(Ответ.КодСостояния, "Корректные данные должны создать клиента")
		.Равно(200);
	
	// Тест с некорректным JSON
	МакетЗапроса = ЮТест.Данные().HTTPСервисЗапрос()
		.Метод("POST")
		.ОтносительныйURL("/api/v1/customers")
		.Тело("{invalid json}");
	
	Ответ = ОнлайнПродажиСервер.ОбработатьСозданиеКлиента(МакетЗапроса);
	
	ЮТест.ОжидаетЧто(Ответ.КодСостояния, "Некорректный JSON должен возвращать ошибку 400")
		.Равно(400);
	
	// Тест с отсутствующими полями
	НеполныеДанные = Новый Структура();
	НеполныеДанные.Вставить("name", "Тест");
	// phone отсутствует
	
	МакетЗапроса = ЮТест.Данные().HTTPСервисЗапрос()
		.Метод("POST")
		.ОтносительныйURL("/api/v1/customers")
		.УстановитьТелоКакСтрокуJSON(НеполныеДанные);
	
	Ответ = ОнлайнПродажиСервер.ОбработатьСозданиеКлиента(МакетЗапроса);
	
	ЮТест.ОжидаетЧто(Ответ.КодСостояния, "Отсутствующие поля должны возвращать ошибку 400")
		.Равно(400);
	
	// Тест с некорректным телефоном
	НекорректныеДанные = Новый Структура();
	НекорректныеДанные.Вставить("name", "Тест");
	НекорректныеДанные.Вставить("phone", "123");
	
	МакетЗапроса = ЮТест.Данные().HTTPСервисЗапрос()
		.Метод("POST")
		.ОтносительныйURL("/api/v1/customers")
		.УстановитьТелоКакСтрокуJSON(НекорректныеДанные);
	
	Ответ = ОнлайнПродажиСервер.ОбработатьСозданиеКлиента(МакетЗапроса);
	
	ЮТест.ОжидаетЧто(Ответ.КодСостояния, "Некорректный телефон должен возвращать ошибку 400")
		.Равно(400);
	
КонецПроцедуры

// Тест получения баланса бонусов
//
Процедура ТестОбработатьПолучениеБалансаБонусов() Экспорт
	
	// Arrange - создаем стаб HTTP-запроса через YAxUnit
	МакетЗапроса = ЮТест.Данные().HTTPСервисЗапрос()
		.Метод("GET")
		.ОтносительныйURL("/api/v1/customers/test-client-id/bonus");
	
	// Act
	Ответ = ОнлайнПродажиСервер.ОбработатьПолучениеБалансаБонусов(МакетЗапроса);
	
	// Assert
	ЮТест.ОжидаетЧто(Ответ.КодСостояния)
		.Равно(200);
	
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
	ПарсенныйОтвет = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	ЮТест.ОжидаетЧто(ПарсенныйОтвет.success)
		.ЭтоИстина();
	
	ДанныеБонусов = ПарсенныйОтвет.data;
	
	ЮТест.ОжидаетЧто(ДанныеБонусов)
		.Свойство("bonus_balance")
		.БольшеИлиРавно(0);
	
	ЮТест.ОжидаетЧто(ДанныеБонусов)
		.Свойство("available_for_payment")
		.БольшеИлиРавно(0);
	
КонецПроцедуры

// Тест заглушек нереализованных методов
//
Процедура ТестОбработчикиНеРеализованныхМетодов() Экспорт
	
	// Тестируем все нереализованные обработчики
	НереализованныеОбработчики = Новый Массив;
	НереализованныеОбработчики.Добавить("ОбработатьСозданиеБронирования");
	НереализованныеОбработчики.Добавить("ОбработатьПолучениеСтатусаБронирования");
	НереализованныеОбработчики.Добавить("ОбработатьОтменуБронирования");
	НереализованныеОбработчики.Добавить("ОбработатьПодтверждениеОплаты");
	НереализованныеОбработчики.Добавить("ОбработатьПолучениеИнформацииОБилете");
	НереализованныеОбработчики.Добавить("ОбработатьПолучениеБилетовКлиента");
	
	Для Каждого ИмяОбработчика Из НереализованныеОбработчики Цикл
		
		// Создаем стаб HTTP-запроса для каждого теста
		МакетЗапроса = ЮТест.Данные().HTTPСервисЗапрос()
			.Метод("POST")
			.ОтносительныйURL("/api/v1/test");
		
		Попытка
			// Используем Вычислить для динамического вызова метода
			КодВызова = СтрШаблон("ОнлайнПродажиСервер.%1(МакетЗапроса)", ИмяОбработчика);
			Ответ = Вычислить(КодВызова);
			
			ЮТест.ОжидаетЧто(Ответ.КодСостояния, СтрШаблон("Обработчик %1 должен возвращать 501", ИмяОбработчика))
				.Равно(501);
			
			ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
			ПарсенныйОтвет = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			
			ЮТест.ОжидаетЧто(ПарсенныйОтвет.success)
				.ЭтоЛожь();
			
			ЮТест.ОжидаетЧто(ПарсенныйОтвет.error_code)
				.Равно("NOT_IMPLEMENTED");
				
		Исключение
			ЮТест.ОжидаетЧто(Ложь, СтрШаблон("Ошибка при тестировании обработчика %1: %2", ИмяОбработчика, ОписаниеОшибки()))
				.ЭтоИстина();
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ТестыЖурналирования

// Тест записи в журнал API
//
Процедура ТестЗаписатьВЖурналАПИ() Экспорт
	
	// Arrange
	ТипСобытия = "TEST /api/test";
	Описание = "Тестовое событие";
	ДанныеЗапроса = Новый Структура("test", "data");
	ВремяВыполнения = 150;
	КодОтвета = 200;
	
	// Act - просто проверяем, что функция не падает
	Попытка
		ОнлайнПродажиСервер.ЗаписатьВЖурналАПИ(ТипСобытия, Описание, ДанныеЗапроса, ВремяВыполнения, КодОтвета);
		ТестПрошел = Истина;
	Исключение
		ТестПрошел = Ложь;
		ОписаниеОшибкиТеста = ОписаниеОшибки();
	КонецПопытки;
	
	// Assert
	ЮТест.ОжидаетЧто(ТестПрошел, СтрШаблон("Запись в журнал не должна вызывать ошибку: %1", ОписаниеОшибкиТеста))
		.ЭтоИстина();
	
	// Тест с минимальными параметрами
	Попытка
		ОнлайнПродажиСервер.ЗаписатьВЖурналАПИ("TEST /minimal", "Минимальный тест");
		ТестПрошел = Истина;
	Исключение
		ТестПрошел = Ложь;
	КонецПопытки;
	
	ЮТест.ОжидаетЧто(ТестПрошел, "Запись с минимальными параметрами должна работать")
		.ЭтоИстина();
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеМетоды

// Вспомогательные методы для тестирования
// (в данном случае не требуются, так как используем стабы YAxUnit)

#КонецОбласти

#КонецОбласти
