//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2025 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

/////////////////////////////////////////////////////////////////////////////////
// Механизм предикатов позволяет:
// 
// * Формировать наборы утверждений и передавать в методы проверки
// * Методы для формирования предикатов имеют такой же синтаксис как и утверждения для тестов см. ЮТест.ОжидаетЧто
// * Проверять элементы коллекций на соответствие утверждениям
/////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// Устанавливает имя реквизита, все последующие проверки будут относится к нему.
// 
// Параметры:
//  ИмяРеквизита - Строка - Имя реквизита
//               - Число - Индекс коллекции
//               - Произвольный - Ключ соответствия
// 
// Возвращаемое значение:
//  ОбщийМодуль - см. ЮТПредикаты.
//
// Пример:
// // Проверка реквизита "Код" на равенство "123"
// ЮТест.Предикат().Реквизит("Код").Равно("123");
//
// // Проверка элемента массива по индексу
// ЮТест.Предикат().Реквизит(0).Равно("Первый");
Функция Реквизит(ИмяРеквизита) Экспорт
	
	Контекст().ИмяРеквизита = ИмяРеквизита;
	Возврат ЮТПредикаты;
	
КонецФункции

// Устанавливает имя свойства, все последующие проверки будут относится к нему.
// Это псевдоним (алиас) для см. Реквизит
// 
// Параметры:
//  ИмяСвойства - Строка - Имя реквизита
//              - Число - Индекс коллекции
//              - Произвольный - Ключ соответствия
// 
// Возвращаемое значение:
//  ОбщийМодуль - см. ЮТПредикаты.
Функция Свойство(ИмяСвойства) Экспорт
	
	Возврат Реквизит(ИмяСвойства);
	
КонецФункции

// Добавляет предикат, проверяющий равенство объекта (свойства) указанному значению
// 
// Параметры:
//  Значение - Произвольный - Значение для сравнения
// 
// Возвращаемое значение:
//  ОбщийМодуль - см. ЮТПредикаты.
//
// Пример:
// // Проверка на равенство строки
// ЮТест.Предикат().Реквизит("Наименование").Равно("Товар");
//
// // Проверка на равенство числа
// ЮТест.Предикат().Реквизит("Количество").Равно(10);
//
// // Проверка на равенство даты
// ЮТест.Предикат().Реквизит("Дата").Равно(ТекущаяДата());
Функция Равно(Значение) Экспорт
	
	ДобавитьПредикат(Выражения().Равно, Значение);
	Возврат ЮТПредикаты;
	
КонецФункции

// Добавляет предикат, проверяющий не равенство объекта (свойства) указанному значению
// 
// Параметры:
//  Значение - Произвольный - Значение для сравнения
// 
// Возвращаемое значение:
//  ОбщийМодуль - см. ЮТПредикаты.
//
// Пример:
// // Проверка на неравенство строки
// ЮТест.Предикат().Реквизит("Наименование").НеРавно("Товар");
//
// // Проверка на неравенство числа
// ЮТест.Предикат().Реквизит("Количество").НеРавно(0);
Функция НеРавно(Значение) Экспорт
	
	ДобавитьПредикат(Выражения().НеРавно, Значение);
	Возврат ЮТПредикаты;
	
КонецФункции

// Добавляет предикат, проверяющий заполненность объекта (свойства)
// 
// Возвращаемое значение:
//  ОбщийМодуль - см. ЮТПредикаты.
//
// Пример:
// // Проверка заполненности реквизита
// ЮТест.Предикат().Реквизит("Наименование").Заполнено();
//
// // Проверка заполненности элемента массива
// ЮТест.Предикат().Реквизит(0).Заполнено();
Функция Заполнено() Экспорт
	
	ДобавитьПредикат(Выражения().Заполнено, Неопределено);
	Возврат ЮТПредикаты;
	
КонецФункции

// Добавляет предикат, проверяющий, что объект (свойств) не заполнено
// 
// Возвращаемое значение:
//  ОбщийМодуль - см. ЮТПредикаты.
//
// Пример:
// // Проверка пустоты реквизита
// ЮТест.Предикат().Реквизит("Комментарий").НеЗаполнено();
//
// // Проверка пустоты элемента массива
// ЮТест.Предикат().Реквизит(0).НеЗаполнено();
Функция НеЗаполнено() Экспорт
	
	ДобавитьПредикат(Выражения().НеЗаполнено, Неопределено);
	Возврат ЮТПредикаты;
	
КонецФункции

// Добавляет предикат, проверяющий, что объект (свойств) не заполнено
// 
// Возвращаемое значение:
//  ОбщийМодуль - см. ЮТПредикаты.
//
// Пример:
// // Проверка пустоты реквизита
// ЮТест.Предикат().Реквизит("Комментарий").Пусто();
//
// // Проверка пустоты элемента массива
// ЮТест.Предикат().Реквизит(0).Пусто();
Функция Пусто() Экспорт
	
	Возврат НеЗаполнено();

КонецФункции

// Добавляет предикат, проверяющий, что значение объекта (свойства) больше указанного
// 
// Параметры:
//  Значение - Произвольный - Значение для сравнения
// 
// Возвращаемое значение:
//  ОбщийМодуль - см. ЮТПредикаты.
//
// Пример:
// // Проверка, что число больше
// ЮТест.Предикат().Реквизит("Количество").Больше(0);
//
// // Проверка, что дата больше
// ЮТест.Предикат().Реквизит("Дата").Больше(ДобавитьКДате(ТекущаяДата(), "ДЕНЬ", -1));
Функция Больше(Значение) Экспорт
	
	ДобавитьПредикат(Выражения().Больше, Значение);
	Возврат ЮТПредикаты;
	
КонецФункции

// Добавляет предикат, проверяющий, что значение объекта (свойства) больше или равно указанному
// 
// Параметры:
//  Значение - Произвольный - Значение для сравнения
// 
// Возвращаемое значение:
//  ОбщийМодуль - см. ЮТПредикаты.
//
// Пример:
// // Проверка, что число больше или равно
// ЮТест.Предикат().Реквизит("Количество").БольшеИлиРавно(0);
//
// // Проверка, что дата больше или равна
// ЮТест.Предикат().Реквизит("Дата").БольшеИлиРавно(ТекущаяДата());
Функция БольшеИлиРавно(Значение) Экспорт
	
	ДобавитьПредикат(Выражения().БольшеРавно, Значение);
	Возврат ЮТПредикаты;
	
КонецФункции

// Добавляет предикат, проверяющий, что значение объекта (свойства) меньше указанного
// 
// Параметры:
//  Значение - Произвольный - Значение для сравнения
// 
// Возвращаемое значение:
//  ОбщийМодуль - см. ЮТПредикаты.
//
// Пример:
// // Проверка, что число меньше
// ЮТест.Предикат().Реквизит("Количество").Меньше(100);
//
// // Проверка, что дата меньше
// ЮТест.Предикат().Реквизит("Дата").Меньше(ТекущаяДата());
Функция Меньше(Значение) Экспорт
	
	ДобавитьПредикат(Выражения().Меньше, Значение);
	Возврат ЮТПредикаты;
	
КонецФункции

// Добавляет предикат, проверяющий, что значение объекта (свойства) меньше или равно указанному
// 
// Параметры:
//  Значение - Произвольный - Значение для сравнения
// 
// Возвращаемое значение:
//  ОбщийМодуль - см. ЮТПредикаты.
//
// Пример:
// // Проверка, что число меньше или равно
// ЮТест.Предикат().Реквизит("Количество").МеньшеИлиРавно(100);
//
// // Проверка, что дата меньше или равна
// ЮТест.Предикат().Реквизит("Дата").МеньшеИлиРавно(ТекущаяДата());
Функция МеньшеИлиРавно(Значение) Экспорт
	
	ДобавитьПредикат(Выражения().МеньшеРавно, Значение);
	Возврат ЮТПредикаты;
	
КонецФункции

// Добавляет предикат, проверяющий, что значение объекта (свойства) имеет указанный тип
// 
// Параметры:
//  Тип - Тип - Тип для проверки
//      - ОписаниеТипов - Описание типов для проверки
//      - Строка - Имя типа для проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - см. ЮТПредикаты.
//
// Пример:
// // Проверка типа по имени
// ЮТест.Предикат().Реквизит("Значение").ИмеетТип("Строка");
//
// // Проверка типа по типу
// ЮТест.Предикат().Реквизит("Дата").ИмеетТип(Тип("Дата"));
//
// // Проверка типа по описанию типов
// ЮТест.Предикат().Реквизит("Сумма").ИмеетТип(Новый ОписаниеТипов("Число"));
Функция ИмеетТип(Тип) Экспорт
	
	ДобавитьПредикат(Выражения().ИмеетТип, Тип);
	Возврат ЮТПредикаты;
	
КонецФункции

// Добавляет предикат, проверяющий, что значение объекта (свойства) имеет тип отличный от указанного
// 
// Параметры:
//  Тип - Тип - Тип для проверки
//      - ОписаниеТипов - Описание типов для проверки
//      - Строка - Имя типа для проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - см. ЮТПредикаты.
//
// Пример:
// // Проверка, что значение не строка
// ЮТест.Предикат().Реквизит("Значение").ИмеетТипОтличныйОт("Строка");
//
// // Проверка, что значение не число
// ЮТест.Предикат().Реквизит("Сумма").ИмеетТипОтличныйОт(Тип("Число"));
Функция ИмеетТипОтличныйОт(Тип) Экспорт
	
	ДобавитьПредикат(Выражения().НеИмеетТип, Тип);
	Возврат ЮТПредикаты;
	
КонецФункции

// Добавляет предикат, проверяющий, длину/размер значение объекта (свойства) на равенство указанному значению
// 
// Параметры:
//  Значение - Число - Ожидаемая длина/размер
// 
// Возвращаемое значение:
//  ОбщийМодуль - см. ЮТПредикаты.
//
// Пример:
// // Проверка длины строки
// ЮТест.Предикат().Реквизит("Наименование").ИмеетДлину(10);
//
// // Проверка размера массива
// ЮТест.Предикат().Реквизит("Элементы").ИмеетДлину(5);
//
// // Проверка количества записей в таблице
// ЮТест.Предикат().Реквизит("Товары").ИмеетДлину(100);
Функция ИмеетДлину(Значение) Экспорт
	
	ДобавитьПредикат(Выражения().ИмеетДлину, Значение);
	Возврат ЮТПредикаты;
	
КонецФункции

// Добавляет предикат, проверяющий, длину/размер значение объекта (свойства) на не равенство указанному значению
// 
// Параметры:
//  Значение - Число - Ожидаемая длина/размер
// 
// Возвращаемое значение:
//  ОбщийМодуль - см. ЮТПредикаты.
//
// Пример:
// // Проверка, что длина строки не равна
// ЮТест.Предикат().Реквизит("Наименование").ИмеетДлинуОтличнуюОт(0);
//
// // Проверка, что размер массива не равен
// ЮТест.Предикат().Реквизит("Элементы").ИмеетДлинуОтличнуюОт(1);
Функция ИмеетДлинуОтличнуюОт(Значение) Экспорт
	
	ДобавитьПредикат(Выражения().НеИмеетДлину, Значение);
	Возврат ЮТПредикаты;
	
КонецФункции

// Добавляет предикат, проверяющий, что значение объекта (реквизита) содержит вложенное свойство
// 
// Параметры:
//  ИмяСвойства - Строка - Имя свойства для проверки
//              - Число - Индекс коллекции для проверки
//              - Произвольный - Ключ соответствия для проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - см. ЮТПредикаты.
//
// Пример:
// // Проверка наличия свойства в структуре
// ЮТест.Предикат().Реквизит("Данные").ИмеетСвойство("Код");
//
// // Проверка наличия элемента в массиве по индексу
// ЮТест.Предикат().Реквизит("Массив").ИмеетСвойство(0);
//
// // Проверка наличия значения в соответствии по ключу
// ЮТест.Предикат().Реквизит("Соответствие").ИмеетСвойство("Ключ");
Функция ИмеетСвойство(ИмяСвойства) Экспорт
	
	ДобавитьПредикат(Выражения().ИмеетСвойство, ИмяСвойства);
	Возврат ЮТПредикаты;
	
КонецФункции

// Добавляет предикат, проверяющий, что значение объекта (реквизита) не содержит вложенное свойство
// 
// Параметры:
//  ИмяСвойства - Строка - Имя свойства для проверки
//              - Число - Индекс коллекции для проверки
//              - Произвольный - Ключ соответствия для проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - см. ЮТПредикаты.
//
// Пример:
// // Проверка отсутствия свойства в структуре
// ЮТест.Предикат().Реквизит("Данные").НеИмеетСвойства("Код");
//
// // Проверка отсутствия элемента в массиве
// ЮТест.Предикат().Реквизит("Массив").НеИмеетСвойства(10);
Функция НеИмеетСвойства(ИмяСвойства) Экспорт
	
	ДобавитьПредикат(Выражения().НеИмеетСвойство, ИмяСвойства);
	Возврат ЮТПредикаты;
	
КонецФункции

// Добавляет предикат, проверяющий, что значение объекта (реквизита) содержит указанное значение
// 
// Параметры:
//  Значение - Произвольный - Значение для поиска
// 
// Возвращаемое значение:
//  ОбщийМодуль - см. ЮТПредикаты.
//
// Пример:
// // Проверка наличия подстроки
// ЮТест.Предикат().Реквизит("Наименование").Содержит("Товар");
//
// // Проверка наличия элемента в массиве
// ЮТест.Предикат().Реквизит("Элементы").Содержит("ИскомыйЭлемент");
Функция Содержит(Значение) Экспорт
	
	ДобавитьПредикат(Выражения().Содержит, Значение);
	Возврат ЮТПредикаты;
	
КонецФункции

// Добавляет предикат, проверяющий, что значение объекта (реквизита) не содержит указанное значение
// 
// Параметры:
//  Значение - Произвольный - Значение для поиска
// 
// Возвращаемое значение:
//  ОбщийМодуль - см. ЮТПредикаты.
//
// Пример:
// // Проверка отсутствия подстроки
// ЮТест.Предикат().Реквизит("Наименование").НеСодержит("ЗапрещенноеСлово");
//
// // Проверка отсутствия элемента в массиве
// ЮТест.Предикат().Реквизит("Элементы").НеСодержит("НежелательныйЭлемент");
Функция НеСодержит(Значение) Экспорт
	
	ДобавитьПредикат(Выражения().НеСодержит, Значение);
	Возврат ЮТПредикаты;
	
КонецФункции

// Добавляет предикат, проверяющий, что строка соответствует указанному регулярному выражению
//
// Параметры:
//  Значение - Строка - Регулярное выражение для проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - см. ЮТПредикаты.
//
// Пример:
// // Проверка соответствия шаблону
// ЮТест.Предикат().Реквизит("Код").СодержитСтрокуПоШаблону("\d{6}");
//
// // Проверка формата даты
// ЮТест.Предикат().Реквизит("ДатаСтрокой").СодержитСтрокуПоШаблону("\d{2}\.\d{2}\.\d{4}");
Функция СодержитСтрокуПоШаблону(Значение) Экспорт
	
	ДобавитьПредикат(Выражения().СодержитСтрокуПоШаблону, Значение);
	Возврат ЮТПредикаты;
	
КонецФункции

// Добавляет предикат, проверяющий, что строка не соответствует указанному регулярному выражению
//
// Параметры:
//  Значение - Строка - Регулярное выражение для проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - см. ЮТПредикаты.
//
// Пример:
// // Проверка несоответствия шаблону
// ЮТест.Предикат().Реквизит("Код").НеСодержитСтрокуПоШаблону("[А-Я]");
//
// // Проверка формата даты
// ЮТест.Предикат().Реквизит("ДатаСтрокой").НеСодержитСтрокуПоШаблону("\d{2}-\d{2}-\d{4}");
Функция НеСодержитСтрокуПоШаблону(Значение) Экспорт
	
	ДобавитьПредикат(Выражения().НеСодержитСтрокуПоШаблону, Значение);
	Возврат ЮТПредикаты;
	
КонецФункции

// Добавляет условие, что проверяемое значение (или значение его свойства) входит в список значений 
// 
// Параметры:
//  Значения - Массив из Произвольный - Значения для проверки
//           - СписокЗначений из Произвольный - Значения для проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - см. ЮТПредикаты.
//
// Пример:
// // Проверка вхождения в массив значений
// ЮТест.Предикат().Реквизит("Статус").ВСписке(ЮТКоллекции.ЗначениеВМассиве("Новый", "ВРаботе", "Завершен"));
//
// // Проверка вхождения в список значений
// СписокСтатусов = Новый СписокЗначений;
// СписокСтатусов.Добавить("Новый");
// СписокСтатусов.Добавить("ВРаботе");
// ЮТест.Предикат().Реквизит("Статус").ВСписке(СписокСтатусов);
Функция ВСписке(Значения) Экспорт
	
	ДобавитьПредикат(Выражения().ВСписке, Значения);
	Возврат ЮТПредикаты;
	
КонецФункции

// Добавляет условие, что проверяемое значение (или значение его свойства) входит в заданный интервал.
// 
// Проверяемое значение может находится на границе интервала.
// 
// Параметры:
//  НачалоИнтервала - Произвольный - Левая граница интервала. Может иметь любой тип, позволяющий сравнивать значения
//  ОкончаниеИнтервала - Произвольный - Правая граница. Может иметь любой тип, позволяющий сравнивать значения
// 
// Возвращаемое значение:
//  ОбщийМодуль - см. ЮТПредикаты.
//
// Пример:
// // Проверка вхождения числа в интервал
// ЮТест.Предикат().Реквизит("Количество").Между(0, 100);
Функция Между(НачалоИнтервала, ОкончаниеИнтервала) Экспорт
	
	Возврат МеждуВключаяГраницы(НачалоИнтервала, ОкончаниеИнтервала);
	
КонецФункции

// Добавляет условие, что проверяемое значение (или значение его свойства) входит в заданный интервал.
// 
// Проверяемое значение может находится на границе интервала.
// 
// Параметры:
//  НачалоИнтервала - Произвольный - Левая граница интервала. Может иметь любой тип, позволяющий сравнивать значения
//  ОкончаниеИнтервала - Произвольный - Правая граница. Может иметь любой тип, позволяющий сравнивать значения
// 
// Возвращаемое значение:
//  ОбщийМодуль - см. ЮТПредикаты.
Функция МеждуВключаяГраницы(НачалоИнтервала, ОкончаниеИнтервала) Экспорт
	
	Предикат = ДобавитьПредикат(Выражения().МеждуВключаяГраницы, НачалоИнтервала);
	Предикат.Вставить("ОкончаниеИнтервала", ОкончаниеИнтервала);
	Возврат ЮТПредикаты;
	
КонецФункции

// Добавляет условие, что проверяемое значение (или значение его свойства) входит в заданный интервал.
// 
// Проверяемое значение не может находится на границе интервала.
// 
// Параметры:
//  НачалоИнтервала - Произвольный - Левая граница интервала. Может иметь любой тип, позволяющий сравнивать значения
//  ОкончаниеИнтервала - Произвольный - Правая граница. Может иметь любой тип, позволяющий сравнивать значения
// 
// Возвращаемое значение:
//  ОбщийМодуль - см. ЮТПредикаты.
Функция МеждуИсключаяГраницы(НачалоИнтервала, ОкончаниеИнтервала) Экспорт
	
	Предикат = ДобавитьПредикат(Выражения().МеждуИсключаяГраницы, НачалоИнтервала);
	Предикат.Вставить("ОкончаниеИнтервала", ОкончаниеИнтервала);
	Возврат ЮТПредикаты;
	
КонецФункции

// Добавляет условие, что проверяемое значение (или значение его свойства) входит в заданный интервал.
// 
// Проверяемое значение может находится на начальной границе интервала.
// 
// Параметры:
//  НачалоИнтервала - Произвольный - Левая граница интервала. Может иметь любой тип, позволяющий сравнивать значения
//  ОкончаниеИнтервала - Произвольный - Правая граница. Может иметь любой тип, позволяющий сравнивать значения
// 
// Возвращаемое значение:
//  ОбщийМодуль - см. ЮТПредикаты.
Функция МеждуВключаяНачалоГраницы(НачалоИнтервала, ОкончаниеИнтервала) Экспорт
	
	Предикат = ДобавитьПредикат(Выражения().МеждуВключаяНачалоГраницы, НачалоИнтервала);
	Предикат.Вставить("ОкончаниеИнтервала", ОкончаниеИнтервала);
	Возврат ЮТПредикаты;
	
КонецФункции

// Добавляет условие, что проверяемое значение (или значение его свойства) входит в заданный интервал.
// 
// Проверяемое значение может находится на конечной границе интервала.
// 
// Параметры:
//  НачалоИнтервала - Произвольный - Левая граница интервала. Может иметь любой тип, позволяющий сравнивать значения
//  ОкончаниеИнтервала - Произвольный - Правая граница. Может иметь любой тип, позволяющий сравнивать значения
// 
// Возвращаемое значение:
//  ОбщийМодуль - см. ЮТПредикаты.
Функция МеждуВключаяОкончаниеГраницы(НачалоИнтервала, ОкончаниеИнтервала) Экспорт
	
	Предикат = ДобавитьПредикат(Выражения().МеждуВключаяОкончаниеГраницы, НачалоИнтервала);
	Предикат.Вставить("ОкончаниеИнтервала", ОкончаниеИнтервала);
	Возврат ЮТПредикаты;
	
КонецФункции

// Возвращает набор сформированных утверждений.
// 
// Рекомендуется использовать этот метод, если планируется отложенная проверка предикатов. Например, вы хотите сформировать два набору предикатов
// и проверять их в зависимости от условия.
// 
// Метод копирует настроенный набор утверждений в массив и возвращает его, таким образом сохраняется состояние, которое можно передавать дальше.
//  
// Возвращаемое значение:
//  Массив из см. ЮТФабрика.ВыражениеПредиката - Набор предикатов
Функция Получить() Экспорт
	
	Возврат ЮТКоллекции.СкопироватьМассив(Контекст().Предикаты);
	
КонецФункции

// Возвращает структуру-перечисление с типами выражений предикатов
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура - Выражения
Функция Выражения() Экспорт
	
	Выражения = Новый Структура;
	Выражения.Вставить("Равно", "Равно");
	Выражения.Вставить("НеРавно", "НеРавно");
	Выражения.Вставить("Заполнено", "Заполнено");
	Выражения.Вставить("НеЗаполнено", "НеЗаполнено");
	Выражения.Вставить("Больше", "Больше");
	Выражения.Вставить("БольшеРавно", "БольшеРавно");
	Выражения.Вставить("Меньше", "Меньше");
	Выражения.Вставить("МеньшеРавно", "МеньшеРавно");
	Выражения.Вставить("ИмеетТип", "ИмеетТип");
	Выражения.Вставить("НеИмеетТип", "НеИмеетТип");
	Выражения.Вставить("ИмеетДлину", "ИмеетДлину");
	Выражения.Вставить("НеИмеетДлину", "НеИмеетДлину");
	Выражения.Вставить("ИмеетСвойство", "ИмеетСвойство");
	Выражения.Вставить("НеИмеетСвойство", "НеИмеетСвойство");
	Выражения.Вставить("Содержит", "Содержит");
	Выражения.Вставить("НеСодержит", "НеСодержит");
	Выражения.Вставить("СодержитСтрокуПоШаблону", "СодержитСтрокуПоШаблону");
	Выражения.Вставить("НеСодержитСтрокуПоШаблону", "НеСодержитСтрокуПоШаблону");
	Выражения.Вставить("ВСписке", "ВСписке");
	Выражения.Вставить("МеждуВключаяГраницы", "МеждуВключаяГраницы");
	Выражения.Вставить("МеждуИсключаяГраницы", "МеждуИсключаяГраницы");
	Выражения.Вставить("МеждуВключаяНачалоГраницы", "МеждуВключаяНачалоГраницы");
	Выражения.Вставить("МеждуВключаяОкончаниеГраницы", "МеждуВключаяОкончаниеГраницы");
	
	//@skip-check constructor-function-return-section
	Возврат Новый ФиксированнаяСтруктура(Выражения);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Инициализирует конструктор предиката
// Параметры:
//  Условия - Структура, Соответствие из Произвольный - Набор условий, которыми инициализируется предикат
//             Ключ - Строка - Имя реквизита
//             Значение - Произвольный - Значение, которому должен быть равен реквизит
// 
// Возвращаемое значение:
//  ОбщийМодуль - см. ЮТПредикаты.
Функция Инициализировать(Условия = Неопределено) Экспорт
	
	Если ТипЗнч(Условия) = Тип("Массив") Тогда
		Возврат ИнициализироватьИзМассива(Условия);
	ИначеЕсли ТипЗнч(Условия) = Тип("ОбщийМодуль") И Условия = ЮТПредикаты Тогда
		Возврат ИнициализироватьИзПредиката(Условия);
	Иначе
		ЮТКонтекстСлужебный.УстановитьЗначениеКонтекста(КлючКонтекста(), НовыйКонтекст());
		
		Если ЗначениеЗаполнено(Условия) Тогда
			Для Каждого Элемент Из Условия Цикл
				Реквизит(Элемент.Ключ).Равно(Элемент.Значение);
			КонецЦикла;
		КонецЕсли;
		
		Возврат ЮТПредикаты;
	КонецЕсли;
	
КонецФункции

// Инициализирует предикат из массива выражений
//
// Параметры:
//  Предикаты - Массив из см. ЮТФабрика.ВыражениеПредиката - Набор предикатов
//
// Возвращаемое значение:
//  ОбщийМодуль - см. ЮТПредикаты
Функция ИнициализироватьИзМассива(Предикаты)
	
	Контекст = НовыйКонтекст();
	
	Для Каждого Предикат Из Предикаты Цикл
		Контекст.Предикаты.Добавить(Предикат);
	КонецЦикла;
	
	ЮТКонтекстСлужебный.УстановитьЗначениеКонтекста(КлючКонтекста(), Контекст);
	
	Возврат ЮТПредикаты;
	
КонецФункции

// Инициализирует предикат из существующего предиката
//
// Параметры:
//  Предикат - ОбщийМодуль - Модуль настройки предикатов, см. ЮТест.Предикат
//
// Возвращаемое значение:
//  ОбщийМодуль - см. ЮТПредикаты
Функция ИнициализироватьИзПредиката(Предикат)
	
	Контекст = НовыйКонтекст();
	КонтекстПредиката = Контекст();
	
	Для Каждого ПредикатИзКонтекста Из КонтекстПредиката.Предикаты Цикл
		Контекст.Предикаты.Добавить(ПредикатИзКонтекста);
	КонецЦикла;
	
	ЮТКонтекстСлужебный.УстановитьЗначениеКонтекста(КлючКонтекста(), Контекст);
	
	Возврат ЮТПредикаты;
	
КонецФункции

// Контекст.
// 
// Возвращаемое значение:
//  см. НовыйКонтекст
Функция Контекст()
	
	//@skip-check constructor-function-return-section
	Возврат ЮТКонтекстСлужебный.ЗначениеКонтекста(КлючКонтекста());
	
КонецФункции

Функция КлючКонтекста()
	
	Возврат "Предикаты";
	
КонецФункции

// Новый контекст.
// 
// Возвращаемое значение:
//  Структура - Новый контекст:
// * Предикаты - Массив из см. Предикат - Зарегистрированные предикаты
// * ИмяРеквизита - Неопределено, Строка - Имя проверяемого реквизита
Функция НовыйКонтекст()
	
	Описание = Новый Структура();
	Описание.Вставить("Предикаты", Новый Массив());
	Описание.Вставить("ИмяРеквизита", Неопределено);
	
	Возврат Описание;
	
КонецФункции

Функция ДобавитьПредикат(ВидСравнения, Значение)
	
	Контекст = Контекст();
	
	Предикат = ЮТФабрика.ВыражениеПредиката(ВидСравнения, Контекст.ИмяРеквизита, Значение);
	Контекст.Предикаты.Добавить(Предикат);
	
	Возврат Предикат;
	
КонецФункции

#КонецОбласти
