//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2025 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область ПрограммныйИнтерфейс

// Описание объекта метаданных.
// 
// Ограничения:
// - На сервере объект метаданных преобразуется в его полное имя
// - Если передан тип, то используется его идентификатор для кэширования
// 
// Параметры:
//  Значение - ОбъектМетаданных - Объект метаданных
//           - Тип - Тип объекта информационной базы
//           - Строка - Полное имя объекта метаданных
//           - см. СтруктураОписанияОбъектаМетаданных
//           - Произвольный - Объект информационной базы
//  ВыбрасыватьИсключение - Булево - Выбрасывать исключение, если объект не найден
//
// Возвращаемое значение:
//  см. СтруктураОписанияОбъектаМетаданных
//
// Пример:
// // Получение описания по объекту метаданных
// Описание = ЮТМетаданные.ОписаниеОбъектаМетаданных(Метаданные.Справочники.Номенклатура);
//
// // Получение описания по типу
// Описание = ЮТМетаданные.ОписаниеОбъектаМетаданных(Тип("СправочникСсылка.Номенклатура"));
//
// // Получение описания по имени
// Описание = ЮТМетаданные.ОписаниеОбъектаМетаданных("Справочник.Номенклатура");
Функция ОписаниеОбъектаМетаданных(Знач Значение, ВыбрасыватьИсключение = Ложь) Экспорт
	
	Если ЮТМетаданныеСлужебныйКлиентСервер.ЭтоОписаниеОбъектаМетаданных(Значение) Тогда
		//@skip-check constructor-function-return-section
		Возврат Значение;
	КонецЕсли;
	
	ТипПараметра = ТипЗнч(Значение);
	ТипЗначения = ТипПараметра;
	
	ТипТип = Тип("Тип");
#Если Сервер Тогда
	Если ТипЗначения = Тип("ОбъектМетаданных") Тогда
		Значение = Значение.ПолноеИмя();
		ТипЗначения = Тип("Строка");
	КонецЕсли;
#КонецЕсли
	
	Если ТипЗначения <> ТипТип И ТипЗначения <> Тип("Строка") Тогда
		Значение = ТипЗнч(Значение);
		ТипЗначения = ТипТип;
	КонецЕсли;
	
	Если ТипЗначения = ТипТип Тогда
		ИдентификаторТипа = ЮТТипыДанныхСлужебный.ИдентификаторТипа(Значение); // Для работы кэширования
		Описание = ЮТМетаданныеСлужебныйПовтИсп.ОписаниеОбъектаМетаданныхПоИдентификаторуТипа(ИдентификаторТипа);
	Иначе
		Описание = ЮТМетаданныеСлужебныйПовтИсп.ОписаниеОбъектаМетаданных(Значение);
	КонецЕсли;
	
	Если ВыбрасыватьИсключение И Описание = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Не удалось определить тип объекта метаданных для '%1' (%2)", Значение, ТипПараметра);
	КонецЕсли;
	
	//@skip-check constructor-function-return-section
	Возврат Описание;
	
КонецФункции

// Возвращает список реквизитов и их типов
// 
// Ограничения:
// - Для табличных частей имя должно быть в формате "ИмяКоллекции.ТипОбъекта.ТабличнаяЧасть"
// - Если имя табличной части не указано, возвращаются реквизиты основного объекта
// 
// Параметры:
//  ТаблицаИнформационнойБазы - ОбъектМетаданных - Объект метаданных
//                            - Тип - Тип объекта информационной базы
//                            - Строка - Полное имя объекта метаданных, может включать имя табличной части
//                            - см. СтруктураОписанияОбъектаМетаданных
//                            - Произвольный - Объект информационной базы
//  ВСоответствие - Булево - Возвращать в виде соответстия, иначе структура
// 
// Возвращаемое значение:
//  Соответствие из ОписаниеТипов, Структура - Типы реквизитов. Ключ - Имя реквизита, Значение - его тип (ОписаниеТипов)
//
// Пример:
// // Получение типов реквизитов справочника
// ТипыРеквизитов = ЮТМетаданные.ТипыРеквизитов("Справочник.Номенклатура");
//
// // Получение типов реквизитов табличной части
// ТипыРеквизитов = ЮТМетаданные.ТипыРеквизитов("Документ.РеализацияТоваров.Товары");
//
// // Получение типов реквизитов в виде соответствия
// ТипыРеквизитов = ЮТМетаданные.ТипыРеквизитов("Справочник.Номенклатура", Истина);
Функция ТипыРеквизитов(ТаблицаИнформационнойБазы, ВСоответствие = Ложь) Экспорт
	Перем ИмяТабличнойЧасти;
	
	Если ТипЗнч(ТаблицаИнформационнойБазы) = Тип("Строка") Тогда
		Части = СтрРазделить(ТаблицаИнформационнойБазы, ".");
		Если Части.Количество() = 3 Тогда
			ИмяОбъекта = СтрШаблон("%1.%2", Части[0], Части[1]);
			ИмяТабличнойЧасти = Части[2];
		ИначеЕсли Части.Количество() = 2 Тогда
			ИмяОбъекта = ТаблицаИнформационнойБазы;
		Иначе
			ВызватьИсключение "Некорректное имя таблицы (объекта метаданных) - " + ТаблицаИнформационнойБазы;
		КонецЕсли;
	Иначе
		ИмяОбъекта = ТаблицаИнформационнойБазы;
	КонецЕсли;
	
	ОписаниеОбъекта = ОписаниеОбъектаМетаданных(ИмяОбъекта);
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		Реквизиты = ОписаниеОбъекта.ТабличныеЧасти[ИмяТабличнойЧасти];
	Иначе
		Реквизиты = ОписаниеОбъекта.Реквизиты;
	КонецЕсли;
	
	ТипыРеквизитов = ?(ВСоответствие, Новый Соответствие(), Новый Структура());
	
	Для Каждого Элемент Из Реквизиты Цикл
		ТипыРеквизитов.Вставить(Элемент.Ключ, Элемент.Значение.Тип);
	КонецЦикла;
	
	Возврат ТипыРеквизитов;
	
КонецФункции

// Возвращает нормализованное имя таблицы, то которое можно использовать в запросах
// 
// Ограничения:
// - Имя формируется как "ИмяТипа.ИмяОбъекта"
// - Для объектов метаданных на сервере используется их полное имя
// 
// Параметры:
//  Значение - ОбъектМетаданных - Объект метаданных
//           - Тип - Тип объекта информационной базы
//           - Строка - Полное имя объекта метаданных
//           - см. СтруктураОписанияОбъектаМетаданных
//           - Произвольный - Объект информационной базы
// 
// Возвращаемое значение:
//  Строка - Нормализованное имя таблицы
//
// Пример:
// // Получение имени таблицы справочника
// ИмяТаблицы = ЮТМетаданные.НормализованноеИмяТаблицы("Справочник.Номенклатура"); // Результат: "Справочник.Номенклатура"
//
// // Получение имени таблицы документа
// ИмяТаблицы = ЮТМетаданные.НормализованноеИмяТаблицы("Документы.РеализацияТоваров"); // Результат: "Документ.РеализацияТоваров"
//
// // Получение имени таблицы по типу
// ИмяТаблицы = ЮТМетаданные.НормализованноеИмяТаблицы(Тип("СправочникСсылка.Номенклатура")); // Результат: "Справочник.Номенклатура"
Функция НормализованноеИмяТаблицы(Значение) Экспорт
	
	Описание = ОписаниеОбъектаМетаданных(Значение);
	
	Возврат СтрШаблон("%1.%2", Описание.ОписаниеТипа.Имя, Описание.Имя);
	
КонецФункции

// Проверка, что переданное значение относится к справочникам.
// 
// Ограничения:
// - На сервере объект метаданных преобразуется в его полное имя
// - Если передан тип, то используется его идентификатор для кэширования
// 
// Параметры:
//  Значение - ОбъектМетаданных - Объект метаданных
//           - Тип - Тип объекта информационной базы
//           - Строка - Полное имя объекта метаданных
//           - см. СтруктураОписанияОбъектаМетаданных
//           - Произвольный - Объект информационной базы
// 
// Возвращаемое значение:
//  Булево - Истина, если объект является справочником
//
// Пример:
// // Проверка по объекту метаданных
// Результат = ЭтоСправочник(Метаданные.Справочники.Номенклатура); // Результат: Истина
//
// // Проверка по типу
// Результат = ЭтоСправочник(Тип("СправочникСсылка.Номенклатура")); // Результат: Истина
//
// // Проверка по имени
// Результат = ЭтоСправочник("Справочник.Номенклатура"); // Результат: Истина
Функция ЭтоСправочник(Значение) Экспорт
	
	Возврат ЭтоОбъектМетаданныхОжидаемогоТипа(Значение, "Справочник");
	
КонецФункции

// Проверка, что переданное значение относится к документам.
// 
// Ограничения:
// - На сервере объект метаданных преобразуется в его полное имя
// - Если передан тип, то используется его идентификатор для кэширования
// 
// Параметры:
//  Значение - ОбъектМетаданных - Объект метаданных
//           - Тип - Тип объекта информационной базы
//           - Строка - Полное имя объекта метаданных
//           - см. СтруктураОписанияОбъектаМетаданных
//           - Произвольный - Объект информационной базы
// 
// Возвращаемое значение:
//  Булево - Истина, если объект является документом
//
// Пример:
// // Проверка по объекту метаданных
// Результат = ЭтоДокумент(Метаданные.Документы.РеализацияТоваров); // Результат: Истина
//
// // Проверка по типу
// Результат = ЭтоДокумент(Тип("ДокументСсылка.РеализацияТоваров")); // Результат: Истина
//
// // Проверка по имени
// Результат = ЭтоДокумент("Документ.РеализацияТоваров"); // Результат: Истина
Функция ЭтоДокумент(Значение) Экспорт
	
	Возврат ЭтоОбъектМетаданныхОжидаемогоТипа(Значение, "Документ");
	
КонецФункции

// Проверка, что переданное значение относится к ПВХ.
// 
// Ограничения:
// - На сервере объект метаданных преобразуется в его полное имя
// - Если передан тип, то используется его идентификатор для кэширования
// 
// Параметры:
//  Значение - ОбъектМетаданных - Объект метаданных
//           - Тип - Тип объекта информационной базы
//           - Строка - Полное имя объекта метаданных
//           - см. СтруктураОписанияОбъектаМетаданных
//           - Произвольный - Объект информационной базы
// 
// Возвращаемое значение:
//  Булево - Истина, если объект является планом видов характеристик
//
// Пример:
// // Проверка по объекту метаданных
// Результат = ЭтоПланВидовХарактеристик(Метаданные.ПланыВидовХарактеристик.ХарактеристикиНоменклатуры); // Результат: Истина
//
// // Проверка по типу
// Результат = ЭтоПланВидовХарактеристик(Тип("ПланВидовХарактеристикСсылка.ХарактеристикиНоменклатуры")); // Результат: Истина
//
// // Проверка по имени
// Результат = ЭтоПланВидовХарактеристик("ПланВидовХарактеристик.ХарактеристикиНоменклатуры"); // Результат: Истина
Функция ЭтоПланВидовХарактеристик(Значение) Экспорт
	
	Возврат ЭтоОбъектМетаданныхОжидаемогоТипа(Значение, "ПланВидовХарактеристик");
	
КонецФункции

// Проверка, что переданное значение относится к перечислениям.
// 
// Ограничения:
// - На сервере объект метаданных преобразуется в его полное имя
// - Если передан тип, то используется его идентификатор для кэширования
// 
// Параметры:
//  Значение - ОбъектМетаданных - Объект метаданных
//           - Тип - Тип объекта информационной базы
//           - Строка - Полное имя объекта метаданных
//           - см. СтруктураОписанияОбъектаМетаданных
//           - Произвольный - Объект информационной базы
// 
// Возвращаемое значение:
//  Булево - Истина, если объект является планом счетов
//
// Пример:
// // Проверка по объекту метаданных
// Результат = ЭтоПланСчетов(Метаданные.ПланыСчетов.Хозрасчетный); // Результат: Истина
//
// // Проверка по типу
// Результат = ЭтоПланСчетов(Тип("ПланСчетовСсылка.Хозрасчетный")); // Результат: Истина
//
// // Проверка по имени
// Результат = ЭтоПланСчетов("ПланСчетов.Хозрасчетный"); // Результат: Истина
Функция ЭтоПланСчетов(Значение) Экспорт
	
	Возврат ЭтоОбъектМетаданныхОжидаемогоТипа(Значение, "ПланСчетов");
	
КонецФункции

// Проверка, что переданное значение относится к ПВР.
// 
// Ограничения:
// - На сервере объект метаданных преобразуется в его полное имя
// - Если передан тип, то используется его идентификатор для кэширования
// 
// Параметры:
//  Значение - ОбъектМетаданных - Объект метаданных
//           - Тип - Тип объекта информационной базы
//           - Строка - Полное имя объекта метаданных
//           - см. СтруктураОписанияОбъектаМетаданных
//           - Произвольный - Объект информационной базы
// 
// Возвращаемое значение:
//  Булево - Истина, если объект является планом видов расчета
//
// Пример:
// // Проверка по объекту метаданных
// Результат = ЭтоПланВидовРасчета(Метаданные.ПланыВидовРасчета.ОсновныеНачисления); // Результат: Истина
//
// // Проверка по типу
// Результат = ЭтоПланВидовРасчета(Тип("ПланВидовРасчетаСсылка.ОсновныеНачисления")); // Результат: Истина
//
// // Проверка по имени
// Результат = ЭтоПланВидовРасчета("ПланВидовРасчета.ОсновныеНачисления"); // Результат: Истина
Функция ЭтоПланВидовРасчета(Значение) Экспорт
	
	Описание = ОписаниеОбъектаМетаданных(Значение);
	Возврат Описание <> Неопределено И Описание.ОписаниеТипа.Имя = "ПланВидовРасчета";
	
КонецФункции

// Проверка, что переданное значение относится к планам обмена.
// 
// Ограничения:
// - На сервере объект метаданных преобразуется в его полное имя
// - Если передан тип, то используется его идентификатор для кэширования
// 
// Параметры:
//  Значение - ОбъектМетаданных - Объект метаданных
//           - Тип - Тип объекта информационной базы
//           - Строка - Полное имя объекта метаданных
//           - см. СтруктураОписанияОбъектаМетаданных
//           - Произвольный - Объект информационной базы
// 
// Возвращаемое значение:
//  Булево - Истина, если объект является планом обмена
//
// Пример:
// // Проверка по объекту метаданных
// Результат = ЭтоПланОбмена(Метаданные.ПланыОбмена.ОбменДанными); // Результат: Истина
//
// // Проверка по типу
// Результат = ЭтоПланОбмена(Тип("ПланОбменаСсылка.ОбменДанными")); // Результат: Истина
//
// // Проверка по имени
// Результат = ЭтоПланОбмена("ПланОбмена.ОбменДанными"); // Результат: Истина
Функция ЭтоПланОбмена(Значение) Экспорт
	
	Описание = ОписаниеОбъектаМетаданных(Значение);
	Возврат Описание <> Неопределено И Описание.ОписаниеТипа.Имя = "ПланОбмена";
	
КонецФункции

// Проверка, что переданное значение относится к бизнес процессам.
// 
// Ограничения:
// - На сервере объект метаданных преобразуется в его полное имя
// - Если передан тип, то используется его идентификатор для кэширования
// 
// Параметры:
//  Значение - ОбъектМетаданных - Объект метаданных
//           - Тип - Тип объекта информационной базы
//           - Строка - Полное имя объекта метаданных
//           - см. СтруктураОписанияОбъектаМетаданных
//           - Произвольный - Объект информационной базы
// 
// Возвращаемое значение:
//  Булево - Истина, если объект является бизнес процессом
//
// Пример:
// // Проверка по объекту метаданных
// Результат = ЭтоБизнесПроцесс(Метаданные.БизнесПроцессы.ОбработкаЗаказа); // Результат: Истина
//
// // Проверка по типу
// Результат = ЭтоБизнесПроцесс(Тип("БизнесПроцессСсылка.ОбработкаЗаказа")); // Результат: Истина
//
// // Проверка по имени
// Результат = ЭтоБизнесПроцесс("БизнесПроцесс.ОбработкаЗаказа"); // Результат: Истина
Функция ЭтоБизнесПроцесс(Значение) Экспорт
	
	Описание = ОписаниеОбъектаМетаданных(Значение);
	Возврат Описание <> Неопределено И Описание.ОписаниеТипа.Имя = "БизнесПроцесс";
	
КонецФункции

// Проверка, что переданное значение относится к задачам.
// 
// Ограничения:
// - На сервере объект метаданных преобразуется в его полное имя
// - Если передан тип, то используется его идентификатор для кэширования
// 
// Параметры:
//  Значение - ОбъектМетаданных - Объект метаданных
//           - Тип - Тип объекта информационной базы
//           - Строка - Полное имя объекта метаданных
//           - см. СтруктураОписанияОбъектаМетаданных
//           - Произвольный - Объект информационной базы
// 
// Возвращаемое значение:
//  Булево - Истина, если объект является задачей
//
// Пример:
// // Проверка по объекту метаданных
// Результат = ЭтоЗадача(Метаданные.Задачи.Задача); // Результат: Истина
//
// // Проверка по типу
// Результат = ЭтоЗадача(Тип("ЗадачаСсылка.Задача")); // Результат: Истина
//
// // Проверка по имени
// Результат = ЭтоЗадача("Задача.Задача"); // Результат: Истина
Функция ЭтоЗадача(Значение) Экспорт
	
	Описание = ОписаниеОбъектаМетаданных(Значение);
	Возврат Описание <> Неопределено И Описание.ОписаниеТипа.Имя = "Задача";
	
КонецФункции

// Проверка, что переданное значение относится к перечислениям.
// 
// Ограничения:
// - На сервере объект метаданных преобразуется в его полное имя
// - Если передан тип, то используется его идентификатор для кэширования
// 
// Параметры:
//  Значение - ОбъектМетаданных - Объект метаданных
//           - Тип - Тип объекта информационной базы
//           - Строка - Полное имя объекта метаданных
//           - см. СтруктураОписанияОбъектаМетаданных
//           - Произвольный - Объект информационной базы
// 
// Возвращаемое значение:
//  Булево - Истина, если объект является перечислением
//
// Пример:
// // Проверка по объекту метаданных
// Результат = ЭтоПеречисление(Метаданные.Перечисления.СтатусЗаказа); // Результат: Истина
//
// // Проверка по типу
// Результат = ЭтоПеречисление(Тип("ПеречислениеСсылка.СтатусЗаказа")); // Результат: Истина
//
// // Проверка по имени
// Результат = ЭтоПеречисление("Перечисление.СтатусЗаказа"); // Результат: Истина
Функция ЭтоПеречисление(Значение) Экспорт
	
	Описание = ОписаниеОбъектаМетаданных(Значение);
	Возврат Описание <> Неопределено И Описание.ОписаниеТипа.Имя = "Перечисление";
	
КонецФункции

// Проверка, что переданное значение относится к регистрам сведений.
// 
// Ограничения:
// - На сервере объект метаданных преобразуется в его полное имя
// - Если передан тип, то используется его идентификатор для кэширования
// 
// Параметры:
//  Значение - ОбъектМетаданных - Объект метаданных
//           - Тип - Тип объекта информационной базы
//           - Строка - Полное имя объекта метаданных
//           - см. СтруктураОписанияОбъектаМетаданных
//           - Произвольный - Объект информационной базы
// 
// Возвращаемое значение:
//  Булево - Истина, если объект является регистром сведений
//
// Пример:
// // Проверка по объекту метаданных
// Результат = ЭтоРегистрСведений(Метаданные.РегистрыСведений.ОстаткиТоваров); // Результат: Истина
//
// // Проверка по типу
// Результат = ЭтоРегистрСведений(Тип("РегистрСведенийСсылка.ОстаткиТоваров")); // Результат: Истина
//
// // Проверка по имени
// Результат = ЭтоРегистрСведений("РегистрСведений.ОстаткиТоваров"); // Результат: Истина
Функция ЭтоРегистрСведений(Значение) Экспорт
	
	Описание = ОписаниеОбъектаМетаданных(Значение);
	Возврат Описание <> Неопределено И Описание.ОписаниеТипа.Имя = "РегистрСведений";
	
КонецФункции

// Проверка, что переданное значение относится к регистрам бухгалтерии.
// 
// Параметры:
//  Значение - ОбъектМетаданных
//           - Тип - Тип объекта информационной базы
//           - Строка - Полное имя объекта метаданных
//           - см. СтруктураОписанияОбъектаМетаданных
//           - Произвольный - Объект информационной базы
// 
// Возвращаемое значение:
//  Булево - Это регистр бухгалтерии
Функция ЭтоРегистрБухгалтерии(Значение) Экспорт
	
	Описание = ОписаниеОбъектаМетаданных(Значение);
	Возврат Описание <> Неопределено И Описание.ОписаниеТипа.Имя = "РегистрБухгалтерии";
	
КонецФункции

// Проверка, что переданное значение относится к регистрам.
// 
// Ограничения:
// - На сервере объект метаданных преобразуется в его полное имя
// - Если передан тип, то используется его идентификатор для кэширования
// 
// Параметры:
//  Значение - ОбъектМетаданных - Объект метаданных
//           - Тип - Тип объекта информационной базы
//           - Строка - Полное имя объекта метаданных
//           - см. СтруктураОписанияОбъектаМетаданных
//           - Произвольный - Объект информационной базы
// 
// Возвращаемое значение:
//  Булево - Истина, если объект является регистром
//
// Пример:
// // Проверка по объекту метаданных
// Результат = ЭтоРегистр(Метаданные.РегистрыНакопления.ТоварыНаСкладах); // Результат: Истина
//
// // Проверка по типу
// Результат = ЭтоРегистр(Тип("РегистрНакопленияСсылка.ТоварыНаСкладах")); // Результат: Истина
//
// // Проверка по имени
// Результат = ЭтоРегистр("РегистрНакопления.ТоварыНаСкладах"); // Результат: Истина
Функция ЭтоРегистр(Значение) Экспорт
	
	Описание = ОписаниеОбъектаМетаданных(Значение);
	Возврат Описание <> Неопределено И СтрНачинаетсяС(Описание.ОписаниеТипа.Имя, "Регистр");
	
КонецФункции

// Разрешены ли синхронные вызовы в параметрах конфигурации.
// 
// Возвращаемое значение:
//  Булево - Разрешены синхронные вызовы
Функция РазрешеныСинхронныеВызовы() Экспорт
	
	Возврат ЮТМетаданныеСлужебныйПовтИсп.РазрешеныСинхронныеВызовы();
	
КонецФункции

// Возвращает набор регистров движений документа
// 
// Параметры:
//  Документ - ОбъектМетаданных
//           - Тип - Тип объекта информационной базы
//           - Строка - Полное имя объекта метаданных
//           - см. СтруктураОписанияОбъектаМетаданных
//           - ДокументСсылка, ДокументОбъект - Объект информационной базы
//           - ДокументМенеджер - Менеджер вида документа
// 
// Возвращаемое значение:
//  Структура - Регистры движений документа. Ключи - Имя регистра, Значение - Полное имя регистра
//
// Пример:
// // Получение регистров движений документа
// Регистры = ЮТМетаданные.РегистрыДвиженийДокумента("Документ.РеализацияТоваров");
//
// // Получение регистров движений по типу
// Регистры = ЮТМетаданные.РегистрыДвиженийДокумента(Тип("ДокументСсылка.РеализацияТоваров"));
//
// // Получение регистров движений по объекту
// Регистры = ЮТМетаданные.РегистрыДвиженийДокумента(Документы.РеализацияТоваров);
Функция РегистрыДвиженийДокумента(Документ) Экспорт
	
	ОписаниеОбъектаМетаданных = ОписаниеОбъектаМетаданных(Документ);
	
	ПолноеИмя = СтрШаблон("%1.%2", ОписаниеОбъектаМетаданных.ОписаниеТипа.ИмяКоллекции, ОписаниеОбъектаМетаданных.Имя);
	
	Возврат ЮТМетаданныеСлужебныйПовтИсп.РегистрыДвиженийДокумента(ПолноеИмя);
	
КонецФункции

// Возвращает описание регистра движений документа.
//
// Параметры:
//  Документ     - ДокументСсылка, ДокументОбъект, ДокументМенеджер - Документ или менеджер
//               - ОбъектМетаданных, Тип - Метаданные или тип документа
//               - Строка - Полное имя объекта метаданных 
//  ИмяРегистра  - Строка - Имя регистра движений.
//
// Возвращаемое значение:
//  см. СтруктураОписанияОбъектаМетаданных - Описание регистра движений документа
//  Неопределено - Документ не делает движений по указанному регистру
//
// Пример:
// // Получение описания регистра движений
// Описание = ЮТМетаданные.ОписаниеРегистраДвиженийДокумента("Документ.РеализацияТоваров", "ТоварыНаСкладах");
//
// // Получение описания по типу
// Описание = ЮТМетаданные.ОписаниеРегистраДвиженийДокумента(Тип("ДокументСсылка.РеализацияТоваров"), "ТоварыНаСкладах");
//
// // Получение описания по объекту
// Описание = ЮТМетаданные.ОписаниеРегистраДвиженийДокумента(Документы.РеализацияТоваров, "ТоварыНаСкладах");
Функция ОписаниеРегистраДвиженийДокумента(Документ, ИмяРегистра) Экспорт
	
	ПолноеИмяРегистра = Неопределено;
	
	Если НЕ РегистрыДвиженийДокумента(Документ).Свойство(ИмяРегистра, ПолноеИмяРегистра) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//@skip-check constructor-function-return-section
	Возврат ОписаниеОбъектаМетаданных(ПолноеИмяРегистра);
	
КонецФункции

// Возвращает текущую версию тестового движка (YAxUnit)
// 
// Возвращаемое значение:
//  Строка - Версия движка
Функция ВерсияДвижка() Экспорт
	
	Возврат ЮТМетаданныеСлужебныйПовтИсп.ВерсияДвижка();
	
КонецФункции

// Описание типа объекта метаданных.
// 
// Возвращаемое значение:
//  Структура - Описание типа метаданных:
//  * Имя - Строка
//  * ИмяКоллекции - Строка
//  * Конструктор - Строка
//  * Группы - Булево
//  * Ссылочный - Булево
//  * Регистр - Булево
//  * ОбработкаОтчет - Булево
//  * НаборыРеквизитов - Массив Из Строка
//  * ТабличныеЧасти - Булево
//  * ВидыСубконто - Булево
//  * УстановитьНовыйКод - Булево - Доступна автоустановка кода
//  * Предопределенные - Булево
Функция ОписаниеТипаМетаданных() Экспорт
	
	Описание = Новый Структура();
	Описание.Вставить("Имя", "");
	Описание.Вставить("ИмяКоллекции", "");
	Описание.Вставить("Конструктор", "");
	Описание.Вставить("Группы", Ложь);
	Описание.Вставить("Ссылочный", Ложь);
	Описание.Вставить("НаборыРеквизитов", Новый Массив);
	Описание.Вставить("ТабличныеЧасти", Ложь);
	Описание.Вставить("ВидыСубконто", Ложь);
	Описание.Вставить("Регистр", Ложь);
	Описание.Вставить("ОбработкаОтчет", Ложь);
	Описание.Вставить("УстановитьНовыйКод", Ложь);
	Описание.Вставить("Предопределенные", Ложь);
	
	Возврат Описание;
	
КонецФункции

// Описание объекта метаданных.
// 
// Возвращаемое значение:
//  Структура - Описание объекта метаданных:
// * Имя - Строка
// * ОписаниеТипа - см. ОписаниеТипаМетаданных 
// * Реквизиты - Структура из см. ЮТМетаданные.ОписаниеРеквизита
// * ТабличныеЧасти - Структура
Функция СтруктураОписанияОбъектаМетаданных() Экспорт
	
	Описание = Новый Структура;
	Описание.Вставить("Имя", "");
	Описание.Вставить("Представление", "");
	Описание.Вставить("ОписаниеТипа", Неопределено);
	Описание.Вставить("Реквизиты", Новый Структура());
	Описание.Вставить("ТабличныеЧасти", Новый Структура());
	
	//@skip-check constructor-function-return-section
	Возврат Описание;
	
КонецФункции

// Описание реквизита объекта метаданных
//
// Возвращаемое значение:
//  Структура - Описание реквизита:
// * Имя - Строка
// * Тип - ОписаниеТипов
// * Обязательный - Булево
// * ЭтоКлюч - Булево
Функция ОписаниеРеквизита() Экспорт
	
	Описание = Новый Структура();
	Описание.Вставить("Имя", "");
	Описание.Вставить("Тип", Новый ОписаниеТипов("Неопределено"));
	Описание.Вставить("Обязательный", Ложь);
	Описание.Вставить("ЭтоКлюч", Ложь);
	
	Возврат Описание;
	
КонецФункции

// Типы метаданных.
// 
// Возвращаемое значение:
//  Структура - Типы метаданных.
//				* Ключ - Строка
//				* Значение - см. ЮТМетаданные.ОписаниеТипаМетаданных
Функция ТипыМетаданных() Экспорт
	
	Возврат ЮТМетаданныеСлужебныйПовтИсп.ТипыМетаданных();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭтоОбъектМетаданныхОжидаемогоТипа(Значение, ОжидаемыйТип)
	
	Описание = ОписаниеОбъектаМетаданных(Значение);
	Возврат Описание <> Неопределено И Описание.ОписаниеТипа.Имя = ОжидаемыйТип;
	
КонецФункции

#КонецОбласти
