//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2025 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

///////////////////////////////////////////////////////////////////
// Расширяет возможности тестирования, 
// позволяет в упрощенной форме получать данны из информационной базы
// как с сервера так и с клиента.
///////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// Возвращает значения реквизитов ссылки
// 
// Параметры:
//  Ссылка - ЛюбаяСсылка
//  ИменаРеквизитов - Строка - Имена получаемых реквизитов, разделенные запятой.
//                             Важно, нельзя указывать реквизиты через точку.
// 
// Возвращаемое значение:
//  Структура Из Произвольный - Значения реквизитов ссылки
Функция ЗначенияРеквизитов(Ссылка, ИменаРеквизитов) Экспорт
	
	//@skip-check constructor-function-return-section
#Если Сервер Тогда
	Возврат ЮТЗапросыСлужебныйСервер.ЗначенияРеквизитов(Ссылка, ИменаРеквизитов, Ложь);
#Иначе
	Возврат ЮТЗапросыСлужебныйВызовСервера.ЗначенияРеквизитов(Ссылка, ИменаРеквизитов, Ложь);
#КонецЕсли
	
КонецФункции

// Возвращает значение реквизита ссылки
// 
// Параметры:
//  Ссылка - ЛюбаяСсылка
//  ИмяРеквизита - Строка - Имя получаемого реквизита, можно указать путь к вложенному реквизиту через точку
// 
// Возвращаемое значение:
//  Произвольный - Значение реквизита ссылки
Функция ЗначениеРеквизита(Ссылка, ИмяРеквизита) Экспорт
	
#Если Сервер Тогда
	Возврат ЮТЗапросыСлужебныйСервер.ЗначенияРеквизитов(Ссылка, ИмяРеквизита, Истина);
#Иначе
	Возврат ЮТЗапросыСлужебныйВызовСервера.ЗначенияРеквизитов(Ссылка, ИмяРеквизита, Истина);
#КонецЕсли
	
КонецФункции

// Возвращает первую запись таблицы соответствующую условиям
// 
// Параметры:
//  ИмяТаблицы - Строка - Имя таблицы базы
//  Предикат - Массив из см. ЮТФабрика.ВыражениеПредиката - Набор условий, см. ЮТПредикаты.Получить
//           - см. ЮТФабрика.ВыражениеПредиката
//           - ОбщийМодуль - Модуль настройки предикатов, см. ЮТест.Предикат
//           - Неопределено - Проверит, что таблица не пустая
// Возвращаемое значение:
//  Структура, Неопределено - Содержит все данные записи, включая табличный части
Функция Запись(ИмяТаблицы, Предикат) Экспорт
	
	ОписаниеЗапроса = ЮТЗапросыСлужебныйКлиентСервер.ОписаниеЗапроса(ИмяТаблицы, Предикат, "*");
	//@skip-check constructor-function-return-section
#Если Сервер Тогда
	Возврат ЮТЗапросыСлужебныйСервер.Записи(ОписаниеЗапроса, Истина, Истина);
#Иначе
	Возврат ЮТЗапросыСлужебныйВызовСервера.Записи(ОписаниеЗапроса, Истина, Истина);
#КонецЕсли
	
КонецФункции

// Возвращает первую ссылку на объект таблицы соответствующую условиям
// 
// Параметры:
//  ИмяТаблицы - Строка - Имя таблицы базы
//  Предикат - Массив из см. ЮТФабрика.ВыражениеПредиката - Набор условий, см. ЮТПредикаты.Получить
//           - см. ЮТФабрика.ВыражениеПредиката
//           - ОбщийМодуль - Модуль настройки предикатов, см. ЮТест.Предикат
//           - Неопределено - Проверит, что таблица не пустая
// Возвращаемое значение:
//  ЛюбаяСсылка - Ссылка на объект
Функция СсылкаПоУсловиям(ИмяТаблицы, Предикат) Экспорт
	
	ОписаниеЗапроса = ЮТЗапросыСлужебныйКлиентСервер.ОписаниеЗапроса(ИмяТаблицы, Предикат, "Ссылка");
	//@skip-check constructor-function-return-section
#Если Сервер Тогда
	Данные = ЮТЗапросыСлужебныйСервер.Записи(ОписаниеЗапроса, Истина, Истина);
#Иначе
	Данные = ЮТЗапросыСлужебныйВызовСервера.Записи(ОписаниеЗапроса, Истина, Истина);
#КонецЕсли
	
	Если Данные <> Неопределено Тогда
		Возврат Данные.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает записи таблицы соответствующую условиям
// 
// Параметры:
//  ИмяТаблицы - Строка - Имя таблицы базы
//  Предикат - Массив из см. ЮТФабрика.ВыражениеПредиката - Набор условий, см. ЮТПредикаты.Получить
//           - см. ЮТФабрика.ВыражениеПредиката
//           - ОбщийМодуль - Модуль настройки предикатов, см. ЮТест.Предикат
//           - Неопределено - Проверит, что таблица не пустая
// Возвращаемое значение:
//  Массив из Структура - Найденные записи, включая табличный части
Функция Записи(ИмяТаблицы, Предикат) Экспорт
	
	ОписаниеЗапроса = ЮТЗапросыСлужебныйКлиентСервер.ОписаниеЗапроса(ИмяТаблицы, Предикат, "*");
#Если Сервер Тогда
	Возврат ЮТЗапросыСлужебныйСервер.Записи(ОписаниеЗапроса, Ложь, Истина);
#Иначе
	Возврат ЮТЗапросыСлужебныйВызовСервера.Записи(ОписаниеЗапроса, Ложь, Истина);
#КонецЕсли
	
КонецФункции

// Возвращает значения реквизитов первой записи таблицы, соответствующей условиям
// 
// Параметры:
//  ИмяТаблицы - Строка
//  Предикат - Массив из см. ЮТФабрика.ВыражениеПредиката - Набор условий, см. ЮТПредикаты.Получить
//           - см. ЮТФабрика.ВыражениеПредиката
//           - ОбщийМодуль - Модуль настройки предикатов, см. ЮТест.Предикат
//  ИменаРеквизитов - Строка - Имена получаемых реквизитов
// 
// Возвращаемое значение:
//  Произвольный - Значение реквизита записи
// 
Функция ЗначенияРеквизитовЗаписи(ИмяТаблицы, Предикат, ИменаРеквизитов) Экспорт
	
	ОписаниеЗапроса = ЮТЗапросыСлужебныйКлиентСервер.ОписаниеЗапроса(ИмяТаблицы, Предикат, ИменаРеквизитов);
#Если Сервер Тогда
	Возврат ЮТЗапросыСлужебныйСервер.ЗначенияРеквизитовЗаписи(ОписаниеЗапроса, Ложь);
#Иначе
	Возврат ЮТЗапросыСлужебныйВызовСервера.ЗначенияРеквизитовЗаписи(ОписаниеЗапроса, Ложь);
#КонецЕсли
	
КонецФункции

// Возвращает значение реквизита первой записи таблицы, соответствующей условиям
// 
// Параметры:
//  ИмяТаблицы - Строка
//  Предикат - Массив из см. ЮТФабрика.ВыражениеПредиката - Набор условий, см. ЮТПредикаты.Получить
//           - см. ЮТФабрика.ВыражениеПредиката
//           - ОбщийМодуль - Модуль настройки предикатов, см. ЮТест.Предикат
//  ИмяРеквизита - Строка - Имя получаемого реквизита
// 
// Возвращаемое значение:
//  Структура Из Произвольный - Значения реквизитов записи
// 
Функция ЗначениеРеквизитаЗаписи(ИмяТаблицы, Предикат, ИмяРеквизита) Экспорт
	
	ОписаниеЗапроса = ЮТЗапросыСлужебныйКлиентСервер.ОписаниеЗапроса(ИмяТаблицы, Предикат, ИмяРеквизита);
	//@skip-check constructor-function-return-section
#Если Сервер Тогда
	Возврат ЮТЗапросыСлужебныйСервер.ЗначенияРеквизитовЗаписи(ОписаниеЗапроса, Истина);
#Иначе
	Возврат ЮТЗапросыСлужебныйВызовСервера.ЗначенияРеквизитовЗаписи(ОписаниеЗапроса, Истина);
#КонецЕсли
	
КонецФункции

// Вернет признак содержит ли таблица записи удовлетворяющие переданным условиям
// 
// Параметры:
//  ИмяТаблицы - Строка - Имя таблицы базы
//  Предикат - Массив из см. ЮТФабрика.ВыражениеПредиката - Набор условий, см. ЮТПредикаты.Получить
//           - см. ЮТФабрика.ВыражениеПредиката
//           - ОбщийМодуль - Модуль настройки предикатов, см. ЮТест.Предикат
//           - Неопределено - Проверит, что таблица не пустая
// Возвращаемое значение:
//  Булево - Таблица содержит записи
Функция ТаблицаСодержитЗаписи(ИмяТаблицы, Предикат = Неопределено) Экспорт
	
	ОписаниеЗапроса = ЮТЗапросыСлужебныйКлиентСервер.ОписаниеЗапроса(ИмяТаблицы, Предикат);
	Возврат НЕ РезультатПустой(ОписаниеЗапроса);
	
КонецФункции

// Возвращает количество записей таблицы удовлетворяющих переданным условиям
//
// Параметры:
//  ИмяТаблицы - Строка - Имя таблицы базы
//  Предикат - Массив из см. ЮТФабрика.ВыражениеПредиката - Набор условий, см. ЮТПредикаты.Получить
//           - см. ЮТФабрика.ВыражениеПредиката
//           - ОбщийМодуль - Модуль настройки предикатов, см. ЮТест.Предикат
//           - Неопределено - Проверит, что таблица не пустая
//
// Возвращаемое значение:
//  Число - Количество записей
//
Функция КоличествоЗаписей(ИмяТаблицы, Предикат = Неопределено) Экспорт
	
	ОписаниеЗапроса = ЮТЗапросыСлужебныйКлиентСервер.ОписаниеЗапроса(ИмяТаблицы, Предикат);
#Если Сервер Тогда
	Возврат ЮТЗапросыСлужебныйСервер.КоличествоЗаписей(ОписаниеЗапроса);
#Иначе
	Возврат ЮТЗапросыСлужебныйВызовСервера.КоличествоЗаписей(ОписаниеЗапроса);
#КонецЕсли
	
КонецФункции

// Возвращает результат выполнения простого запроса.
// 
// Параметры:
//  ОписаниеЗапроса - см. ОписаниеЗапроса
// 
// Возвращаемое значение:
//  - ТаблицаЗначений - Результат запроса для сервера
//  - Массив из Структура - Результат запроса для клиента
Функция РезультатЗапроса(ОписаниеЗапроса) Экспорт
	
#Если Сервер Тогда
	Возврат ЮТЗапросыСлужебныйСервер.РезультатЗапроса(ОписаниеЗапроса, Ложь);
#Иначе
	Возврат ЮТЗапросыСлужебныйВызовСервера.РезультатЗапроса(ОписаниеЗапроса, Истина);
#КонецЕсли
	
КонецФункции

// Определяет, есть ли в результате записи
// 
// Параметры:
//  ОписаниеЗапроса - см. ОписаниеЗапроса
// 
// Возвращаемое значение:
//  Булево - Результат пустой
Функция РезультатПустой(ОписаниеЗапроса) Экспорт
	
#Если Сервер Тогда
	Возврат ЮТЗапросыСлужебныйСервер.РезультатПустой(ОписаниеЗапроса);
#Иначе
	Возврат ЮТЗапросыСлужебныйВызовСервера.РезультатПустой(ОписаниеЗапроса);
#КонецЕсли
	
КонецФункции

// Описание простого запроса
// 
// Возвращаемое значение:
//  Структура - Описание запроса:
// * ИмяТаблицы - Строка - Имя таблицы, из которой нужно получить данные
// * ВыбираемыеПоля - Массив из Строка - Выражения выбираемых полей
// * КоличествоЗаписей - Число, Неопределено - Ограничение количества выбираемых записей
// * Условия - Массив из Строка - Коллекция выражений условий, которые будут объединены через `И`
// * ЗначенияПараметров - Структура - Набор параметров запроса
// * Порядок - Массив из Строка - Поля сортировки
//
// Пример:
// ОписаниеЗапроса = ЮТЗапросы.ОписаниеЗапроса();
// ОписаниеЗапроса.ИмяТаблицы = "Справочник.Номенклатура";
// ОписаниеЗапроса.ВыбираемыеПоля.Добавить("Ссылка");
// ОписаниеЗапроса.ВыбираемыеПоля.Добавить("Наименование");
// ОписаниеЗапроса.Условия.Добавить("Наименование = &Наименование");
// ОписаниеЗапроса.ЗначенияПараметров.Вставить("Наименование", "Товар1");
// ОписаниеЗапроса.Порядок.Добавить("Наименование");
//
// Результат = ЮТЗапросы.РезультатЗапроса(ОписаниеЗапроса);
// // Результат будет содержать записи номенклатуры с наименованием "Товар1",
// // отсортированные по наименованию
//
Функция ОписаниеЗапроса() Экспорт
	
	Описание = Новый Структура();
	Описание.Вставить("ИмяТаблицы", "");
	Описание.Вставить("ВыбираемыеПоля", Новый Массив);
	Описание.Вставить("КоличествоЗаписей", Неопределено);
	Описание.Вставить("Условия", Новый Массив());
	Описание.Вставить("Порядок", Новый Массив());
	Описание.Вставить("ЗначенияПараметров", Новый Структура());
	
	//@skip-check constructor-function-return-section
	Возврат Описание;
	
КонецФункции

// Функция получает список движений по указанному документу и регистру. 
// Если документ не делает движений по указанному регистру, функция вызывает исключение. 
// Результатом работы функции является список записей регистра, отсортированных по номеру строки.
// 
// Параметры:
//  Документ - ДокументСсылка
//  ИмяРегистра - Строка - Короткое или полное имя регистра движений
// 
// Возвращаемое значение:
//  - Массив из Структура - Движения документа для клиента
//  - ТаблицаЗначений - Движения документа для сервера
Функция ДвиженияДокумента(Документ, Знач ИмяРегистра) Экспорт
	
	Если СтрНайти(ИмяРегистра, ".") = 0 Тогда
		РегистрыДвижения = ЮТМетаданные.РегистрыДвиженийДокумента(Документ);
		
		Если НЕ РегистрыДвижения.Свойство(ИмяРегистра) Тогда
			ВызватьИсключение "Документ не делает движений по регистру " + ИмяРегистра;
		КонецЕсли;
		
		ИмяРегистра = РегистрыДвижения[ИмяРегистра];
	КонецЕсли;
	
	Предикат = ЮТест.Предикат().Реквизит("Регистратор").Равно(Документ);
	ОписаниеЗапроса = ЮТЗапросыСлужебныйКлиентСервер.ОписаниеЗапроса(ИмяРегистра, Предикат, "*");
	ОписаниеЗапроса.Порядок.Добавить("НомерСтроки");
	
#Если Клиент Тогда
	Возврат ЮТЗапросыСлужебныйВызовСервера.Записи(ОписаниеЗапроса, Ложь, Истина);
#Иначе
	Возврат ЮТЗапросыСлужебныйСервер.Записи(ОписаниеЗапроса, Ложь, Ложь);
#КонецЕсли
	
КонецФункции

// Возвращает случайную ссылку на объект из информационной базы,
// удовлетворяющую заданным условиям отбора.
// 
// Параметры:
//  МетаданныеОбъекта - ОбъектМетаданных - Явное указание объекта метаданных.
//                    - Произвольный - менеджер, например, Справочники.Номенклатура.
//                    - Строка -  Полное имя объекта метаданных или менеджера, например, "Справочник.Номенклатура".
//                    - Тип, ОписаниеТипов - Тип искомого объекта
//  Отборы - Массив из см. ЮТФабрика.ВыражениеПредиката - Набор условий, см. ЮТПредикаты.Получить
//           - см. ЮТФабрика.ВыражениеПредиката
//           - ОбщийМодуль - Модуль настройки предикатов, см. ЮТест.Предикат
//           - Структура, Соответствие - Простой отбор по полям "ключ-значение".
//           - Неопределено - Отбор не используется.
// 
// Возвращаемое значение:
//  ЛюбаяСсылка - Случайная ссылка
//  Структура - Набор ключей для регистра
Функция СлучайнаяЗапись(МетаданныеОбъекта, Знач Отборы = Неопределено) Экспорт
	
#Если Сервер Тогда
	Возврат ЮТЗапросыСлужебныйСервер.СлучайнаяЗапись(МетаданныеОбъекта, Отборы);
#Иначе
	Если ЮТПредикатыСлужебныйКлиентСервер.ЭтоПредикатОбщийМодуль(Отборы) Тогда
		Отборы = Отборы.Получить();
	КонецЕсли;
	
	Возврат ЮТЗапросыСлужебныйВызовСервера.СлучайнаяЗапись(МетаданныеОбъекта, Отборы);
#КонецЕсли
	
КонецФункции
#КонецОбласти
